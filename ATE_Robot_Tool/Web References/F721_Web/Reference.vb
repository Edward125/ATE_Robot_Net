'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.1
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.1 版自动生成。
'
Namespace F721_Web
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebServiceSoap", [Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class WebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetScrapQualifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFixtureStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IACSReturnPrepareMaterialStatusToSFCSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTestLogFileInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebServiceInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebServiceConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNlistByRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRuninRackUnitStateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFixtureUsedTimesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckSFCDLSkillOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadSonyIDDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadSonyIDDatasOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllocateSonyKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllocateSonyKeysOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BindingUSNRIPalletIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LinkUSNRIPalletIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDcsChassisInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCfiNewSiListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCfiSiInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCfiSiStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCfiDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadCfiHwInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadBurnInRoomTemperatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IPCUSNPositionLinkageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckInOutIPCBurnInRoomOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransferIPCBurnInLocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LinkMultiBoardUSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RequstJDMD3FileJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJDMD3FileJobInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJDMD3FileJobStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAISImageFileNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAISImageFileNameSplitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIDValueByMOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetICPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEngravingInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMacSecurityKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRendyResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRendyAntiTheftCCIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTpsUpnInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTeNotReadyMoListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTeReadyFlagByMoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMoInfoByMoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMOItemByMoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTVKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDefectUsnListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnDefectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RosaHddMoLinkCRUDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLastTransactionDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLastFixtureIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnRepairOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnInfoAtStageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRfEquTestTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAutoStickLabelPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RosaSwPoNackRuleCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEDI860SignalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadPcbLotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadEngravingResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadAstroMoInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUpnInfoFromViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetKeyInfoFromViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRuninRackStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllocateAndroidKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckEngravingBoradBarcLotNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllocateAwaitingUnitSnListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadCompleteEngravingUnitSnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMoAndBoardInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get2SLabelInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Upload2SLabelInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnInformationListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTvDacDataListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SwapUSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEllaRackLoctionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadOCRInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBomPnDescriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadBomTransferUPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecordLogMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecordESOPInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LinkUsnWorkingPalletIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLinkUSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BarcodeValidationWithGivenCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMoOnLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LinkWorkingPalletCSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SwapPalletIDUSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SwapWorkingPalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnlinkWorkingPalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RequestLabelPrintOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsCPNCompleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignUserGroupCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAndProcessKtlOutEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDynamicDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckRouteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompleteWithSingleTrnDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompleteWithDefectRemarkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompleteWithErrorDescriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVADCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVDACOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVQCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVQCwithWhiteBalanceFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadMonitorWhiteBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVPowerRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVHDCPKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHDCPKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTVCIPlusKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCIPlusKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadUSNItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadUSNItemWithBarcodeValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnIdWithoutCombineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHDCPFileNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFixtureIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadVolTageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTPSKeyValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTPSLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTPSRetestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckOPIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsnGenealogyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEDIDFilenameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadEDIDResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadMonitorEDIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTestLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRuninRackUnitStartDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckTestFixtureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadUSNInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadUSNInfoWithUniqueCheckFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMOInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransactionTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetReflowStageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSetCA210OffsetTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTestSuiteInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTestSuiteInfoWithDataSearchTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMOItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadMonitorLpByUsnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadMonitorLPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckErrorCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRIRackPositionByUSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNByRIRackPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDownTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNByUSNInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSPCConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUPNInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPanelParameterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPanelParameterWithDataSearchTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUUTDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNByCSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadCertifyPOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSWCPNForUPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNInfoByMACOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSyncStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEarliestSIListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDeleteSIInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAvailableGradeListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLastGradeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckSamplingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSkuBomDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentDBSysdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSNByRIPalletIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BreakUpUSNRIPalletByUSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMO53PNItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTEModelNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMFGTypeByStageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTestEquipmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTestEquipmentsWithStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTestDataWithStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFGCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreparedMOListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ATE_Robot_Tool.My.MySettings.Default.ATE_Robot_Tool_F721_Web_WebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetScrapQualifyCompleted As GetScrapQualifyCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFixtureStatusCompleted As UpdateFixtureStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event IACSReturnPrepareMaterialStatusToSFCSCompleted As IACSReturnPrepareMaterialStatusToSFCSCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTestLogFileInfoCompleted As UploadTestLogFileInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebServiceInfoCompleted As GetWebServiceInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebServiceConfigCompleted As GetWebServiceConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNlistByRangeCompleted As GetUSNlistByRangeCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRuninRackUnitStateCompleted As UploadRuninRackUnitStateCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFixtureUsedTimesCompleted As UploadFixtureUsedTimesCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckSFCDLSkillCompleted As CheckSFCDLSkillCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadSonyIDDataCompleted As UploadSonyIDDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadSonyIDDatasCompleted As UploadSonyIDDatasCompletedEventHandler
        
        '''<remarks/>
        Public Event AllocateSonyKeyCompleted As AllocateSonyKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event AllocateSonyKeysCompleted As AllocateSonyKeysCompletedEventHandler
        
        '''<remarks/>
        Public Event BindingUSNRIPalletIDCompleted As BindingUSNRIPalletIDCompletedEventHandler
        
        '''<remarks/>
        Public Event LinkUSNRIPalletIDCompleted As LinkUSNRIPalletIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDcsChassisInfoCompleted As GetDcsChassisInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCfiNewSiListCompleted As GetCfiNewSiListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCfiSiInfoCompleted As GetCfiSiInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCfiSiStatusCompleted As UpdateCfiSiStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCfiDataCompleted As GetCfiDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadCfiHwInfoCompleted As UploadCfiHwInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadBurnInRoomTemperatureCompleted As UploadBurnInRoomTemperatureCompletedEventHandler
        
        '''<remarks/>
        Public Event IPCUSNPositionLinkageCompleted As IPCUSNPositionLinkageCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckInOutIPCBurnInRoomCompleted As CheckInOutIPCBurnInRoomCompletedEventHandler
        
        '''<remarks/>
        Public Event TransferIPCBurnInLocationCompleted As TransferIPCBurnInLocationCompletedEventHandler
        
        '''<remarks/>
        Public Event LinkMultiBoardUSNCompleted As LinkMultiBoardUSNCompletedEventHandler
        
        '''<remarks/>
        Public Event RequstJDMD3FileJobCompleted As RequstJDMD3FileJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJDMD3FileJobInfoCompleted As GetJDMD3FileJobInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJDMD3FileJobStatusCompleted As UpdateJDMD3FileJobStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAISImageFileNameCompleted As GetAISImageFileNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAISImageFileNameSplitCompleted As GetAISImageFileNameSplitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIDValueByMOCompleted As GetIDValueByMOCompletedEventHandler
        
        '''<remarks/>
        Public Event GetICPNCompleted As GetICPNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEngravingInfoCompleted As GetEngravingInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMacSecurityKeyCompleted As GetMacSecurityKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRendyResultCompleted As UploadRendyResultCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRendyAntiTheftCCIDCompleted As UploadRendyAntiTheftCCIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTpsUpnInfoCompleted As UploadTpsUpnInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTeNotReadyMoListCompleted As GetTeNotReadyMoListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTeReadyFlagByMoCompleted As UpdateTeReadyFlagByMoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMoInfoByMoCompleted As GetMoInfoByMoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMOItemByMoCompleted As GetMOItemByMoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTVKeyCompleted As GetTVKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVKeyCompleted As UploadTVKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDefectUsnListCompleted As GetDefectUsnListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnDefectCompleted As GetUsnDefectCompletedEventHandler
        
        '''<remarks/>
        Public Event RosaHddMoLinkCRUDCompleted As RosaHddMoLinkCRUDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLastTransactionDataCompleted As GetLastTransactionDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLastFixtureIdCompleted As GetLastFixtureIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnRepairCompleted As GetUsnRepairCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnInfoAtStageCompleted As GetUsnInfoAtStageCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRfEquTestTimeCompleted As UploadRfEquTestTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAutoStickLabelPNCompleted As GetAutoStickLabelPNCompletedEventHandler
        
        '''<remarks/>
        Public Event RosaSwPoNackRuleCheckCompleted As RosaSwPoNackRuleCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEDI860SignalCompleted As UpdateEDI860SignalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnByIdCompleted As GetUsnByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadPcbLotCompleted As UploadPcbLotCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadEngravingResultCompleted As UploadEngravingResultCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadAstroMoInfoCompleted As UploadAstroMoInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUpnInfoFromViewCompleted As GetUpnInfoFromViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetKeyInfoFromViewCompleted As GetKeyInfoFromViewCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRuninRackStatusCompleted As UploadRuninRackStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event AllocateAndroidKeyCompleted As AllocateAndroidKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckEngravingBoradBarcLotNoCompleted As CheckEngravingBoradBarcLotNoCompletedEventHandler
        
        '''<remarks/>
        Public Event AllocateAwaitingUnitSnListCompleted As AllocateAwaitingUnitSnListCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadCompleteEngravingUnitSnCompleted As UploadCompleteEngravingUnitSnCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMoAndBoardInfoCompleted As GetMoAndBoardInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Get2SLabelInfoCompleted As Get2SLabelInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Upload2SLabelInfoCompleted As Upload2SLabelInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnInformationListCompleted As GetUsnInformationListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTvDacDataListCompleted As GetTvDacDataListCompletedEventHandler
        
        '''<remarks/>
        Public Event SwapUSNCompleted As SwapUSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEllaRackLoctionCompleted As GetEllaRackLoctionCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadOCRInfoCompleted As UploadOCRInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBomPnDescriptionCompleted As GetBomPnDescriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadBomTransferUPNCompleted As UploadBomTransferUPNCompletedEventHandler
        
        '''<remarks/>
        Public Event RecordLogMessageCompleted As RecordLogMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event RecordESOPInfoCompleted As RecordESOPInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event LinkUsnWorkingPalletIdCompleted As LinkUsnWorkingPalletIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLinkUSNCompleted As GetLinkUSNCompletedEventHandler
        
        '''<remarks/>
        Public Event BarcodeValidationWithGivenCategoryCompleted As BarcodeValidationWithGivenCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMoOnLineCompleted As SetMoOnLineCompletedEventHandler
        
        '''<remarks/>
        Public Event LinkWorkingPalletCSNCompleted As LinkWorkingPalletCSNCompletedEventHandler
        
        '''<remarks/>
        Public Event SwapPalletIDUSNCompleted As SwapPalletIDUSNCompletedEventHandler
        
        '''<remarks/>
        Public Event SwapWorkingPalletCompleted As SwapWorkingPalletCompletedEventHandler
        
        '''<remarks/>
        Public Event UnlinkWorkingPalletCompleted As UnlinkWorkingPalletCompletedEventHandler
        
        '''<remarks/>
        Public Event RequestLabelPrintCompleted As RequestLabelPrintCompletedEventHandler
        
        '''<remarks/>
        Public Event IsCPNCompleteCompleted As IsCPNCompleteCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignUserGroupCodeCompleted As AssignUserGroupCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAndProcessKtlOutEventCompleted As GetAndProcessKtlOutEventCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDynamicDataCompleted As GetDynamicDataCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckRouteCompleted As CheckRouteCompletedEventHandler
        
        '''<remarks/>
        Public Event CompleteCompleted As CompleteCompletedEventHandler
        
        '''<remarks/>
        Public Event CompleteWithSingleTrnDataCompleted As CompleteWithSingleTrnDataCompletedEventHandler
        
        '''<remarks/>
        Public Event CompleteWithDefectRemarkCompleted As CompleteWithDefectRemarkCompletedEventHandler
        
        '''<remarks/>
        Public Event CompleteWithErrorDescriptionCompleted As CompleteWithErrorDescriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVADCCompleted As UploadTVADCCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVDACCompleted As UploadTVDACCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVQCCompleted As UploadTVQCCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVQCwithWhiteBalanceFlagCompleted As UploadTVQCwithWhiteBalanceFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadMonitorWhiteBalanceCompleted As UploadMonitorWhiteBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVPowerRangeCompleted As UploadTVPowerRangeCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVHDCPKeyCompleted As UploadTVHDCPKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHDCPKeyCompleted As GetHDCPKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTVCIPlusKeyCompleted As UploadTVCIPlusKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCIPlusKeyCompleted As GetCIPlusKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNItemCompleted As GetUSNItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadUSNItemCompleted As UploadUSNItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadUSNItemWithBarcodeValidationCompleted As UploadUSNItemWithBarcodeValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnIDCompleted As GetUsnIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnIdWithoutCombineCompleted As GetUsnIdWithoutCombineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHDCPFileNameCompleted As GetHDCPFileNameCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFixtureIDCompleted As UploadFixtureIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadVolTageCompleted As UploadVolTageCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTPSKeyValueCompleted As UploadTPSKeyValueCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTPSLogCompleted As UploadTPSLogCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTPSRetestCompleted As UploadTPSRetestCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckOPIDCompleted As CheckOPIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsnGenealogyCompleted As GetUsnGenealogyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEDIDFilenameCompleted As GetEDIDFilenameCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadEDIDResultCompleted As UploadEDIDResultCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadMonitorEDIDCompleted As UploadMonitorEDIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTestLogCompleted As UploadTestLogCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRuninRackUnitStartDateCompleted As UploadRuninRackUnitStartDateCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckTestFixtureCompleted As CheckTestFixtureCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadUSNInfoCompleted As UploadUSNInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadUSNInfoWithUniqueCheckFlagCompleted As UploadUSNInfoWithUniqueCheckFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMOInfoCompleted As GetMOInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransactionTimeCompleted As GetTransactionTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event SetReflowStageCompleted As SetReflowStageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSetCA210OffsetTableCompleted As GetSetCA210OffsetTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTestSuiteInfoCompleted As GetTestSuiteInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTestSuiteInfoWithDataSearchTypeCompleted As GetTestSuiteInfoWithDataSearchTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNInfoCompleted As GetUSNInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMOItemCompleted As GetMOItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadMonitorLpByUsnCompleted As UploadMonitorLpByUsnCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadMonitorLPCompleted As UploadMonitorLPCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckErrorCodeCompleted As CheckErrorCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRIRackPositionByUSNCompleted As GetRIRackPositionByUSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNByRIRackPositionCompleted As GetUSNByRIRackPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDownTimeCompleted As UploadDownTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNInformationCompleted As GetUSNInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNByUSNInfoCompleted As GetUSNByUSNInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMessageCompleted As GetMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSPCConfigCompleted As GetSPCConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUPNInformationCompleted As GetUPNInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPanelParameterCompleted As GetPanelParameterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPanelParameterWithDataSearchTypeCompleted As GetPanelParameterWithDataSearchTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUUTDataCompleted As GetUUTDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNByCSNCompleted As GetUSNByCSNCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadCertifyPOCompleted As UploadCertifyPOCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSWCPNForUPNCompleted As GetSWCPNForUPNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNInfoByMACCompleted As GetUSNInfoByMACCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSyncStatusCompleted As UpdateSyncStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEarliestSIListCompleted As GetEarliestSIListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDeleteSIInfoCompleted As UpdateDeleteSIInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAvailableGradeListCompleted As GetAvailableGradeListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLastGradeCompleted As GetLastGradeCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckSamplingCompleted As CheckSamplingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSkuBomDataCompleted As GetSkuBomDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentDBSysdateCompleted As GetCurrentDBSysdateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSNByRIPalletIDCompleted As GetUSNByRIPalletIDCompletedEventHandler
        
        '''<remarks/>
        Public Event BreakUpUSNRIPalletByUSNCompleted As BreakUpUSNRIPalletByUSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMO53PNItemCompleted As GetMO53PNItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTEModelNameCompleted As GetTEModelNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMFGTypeByStageCompleted As GetMFGTypeByStageCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTestEquipmentsCompleted As UploadTestEquipmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTestDataCompleted As UploadTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTestEquipmentsWithStringCompleted As UploadTestEquipmentsWithStringCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTestDataWithStringCompleted As UploadTestDataWithStringCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFGCodeCompleted As UploadFGCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreparedMOListCompleted As GetPreparedMOListCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetScrapQualify", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetScrapQualify(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("GetScrapQualify", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetScrapQualifyAsync(ByVal FixtureID As String)
            Me.GetScrapQualifyAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetScrapQualifyAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.GetScrapQualifyOperationCompleted Is Nothing) Then
                Me.GetScrapQualifyOperationCompleted = AddressOf Me.OnGetScrapQualifyOperationCompleted
            End If
            Me.InvokeAsync("GetScrapQualify", New Object() {FixtureID}, Me.GetScrapQualifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetScrapQualifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetScrapQualifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetScrapQualifyCompleted(Me, New GetScrapQualifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateFixtureStatus", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFixtureStatus(ByVal FixtureID As String, ByVal Status As Integer) As String
            Dim results() As Object = Me.Invoke("UpdateFixtureStatus", New Object() {FixtureID, Status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFixtureStatusAsync(ByVal FixtureID As String, ByVal Status As Integer)
            Me.UpdateFixtureStatusAsync(FixtureID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFixtureStatusAsync(ByVal FixtureID As String, ByVal Status As Integer, ByVal userState As Object)
            If (Me.UpdateFixtureStatusOperationCompleted Is Nothing) Then
                Me.UpdateFixtureStatusOperationCompleted = AddressOf Me.OnUpdateFixtureStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateFixtureStatus", New Object() {FixtureID, Status}, Me.UpdateFixtureStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFixtureStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFixtureStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFixtureStatusCompleted(Me, New UpdateFixtureStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/IACSReturnPrepareMaterialStatusToSF"& _ 
            "CS", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IACSReturnPrepareMaterialStatusToSFCS(ByVal Plant As String, ByVal SequenceID As String, ByVal Status As String, ByVal ActualCPN As String, ByVal ActualQty As String, ByVal ActualStorageLoc As String) As String
            Dim results() As Object = Me.Invoke("IACSReturnPrepareMaterialStatusToSFCS", New Object() {Plant, SequenceID, Status, ActualCPN, ActualQty, ActualStorageLoc})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IACSReturnPrepareMaterialStatusToSFCSAsync(ByVal Plant As String, ByVal SequenceID As String, ByVal Status As String, ByVal ActualCPN As String, ByVal ActualQty As String, ByVal ActualStorageLoc As String)
            Me.IACSReturnPrepareMaterialStatusToSFCSAsync(Plant, SequenceID, Status, ActualCPN, ActualQty, ActualStorageLoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IACSReturnPrepareMaterialStatusToSFCSAsync(ByVal Plant As String, ByVal SequenceID As String, ByVal Status As String, ByVal ActualCPN As String, ByVal ActualQty As String, ByVal ActualStorageLoc As String, ByVal userState As Object)
            If (Me.IACSReturnPrepareMaterialStatusToSFCSOperationCompleted Is Nothing) Then
                Me.IACSReturnPrepareMaterialStatusToSFCSOperationCompleted = AddressOf Me.OnIACSReturnPrepareMaterialStatusToSFCSOperationCompleted
            End If
            Me.InvokeAsync("IACSReturnPrepareMaterialStatusToSFCS", New Object() {Plant, SequenceID, Status, ActualCPN, ActualQty, ActualStorageLoc}, Me.IACSReturnPrepareMaterialStatusToSFCSOperationCompleted, userState)
        End Sub
        
        Private Sub OnIACSReturnPrepareMaterialStatusToSFCSOperationCompleted(ByVal arg As Object)
            If (Not (Me.IACSReturnPrepareMaterialStatusToSFCSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IACSReturnPrepareMaterialStatusToSFCSCompleted(Me, New IACSReturnPrepareMaterialStatusToSFCSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestLogFileInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTestLogFileInfo(ByVal UnitSerialNumber As String, ByVal Stage As String, ByVal FileFolder As String, ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("UploadTestLogFileInfo", New Object() {UnitSerialNumber, Stage, FileFolder, FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTestLogFileInfoAsync(ByVal UnitSerialNumber As String, ByVal Stage As String, ByVal FileFolder As String, ByVal FileName As String)
            Me.UploadTestLogFileInfoAsync(UnitSerialNumber, Stage, FileFolder, FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTestLogFileInfoAsync(ByVal UnitSerialNumber As String, ByVal Stage As String, ByVal FileFolder As String, ByVal FileName As String, ByVal userState As Object)
            If (Me.UploadTestLogFileInfoOperationCompleted Is Nothing) Then
                Me.UploadTestLogFileInfoOperationCompleted = AddressOf Me.OnUploadTestLogFileInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadTestLogFileInfo", New Object() {UnitSerialNumber, Stage, FileFolder, FileName}, Me.UploadTestLogFileInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTestLogFileInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTestLogFileInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTestLogFileInfoCompleted(Me, New UploadTestLogFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetWebServiceInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebServiceInfo() As clsWSInfo
            Dim results() As Object = Me.Invoke("GetWebServiceInfo", New Object(-1) {})
            Return CType(results(0),clsWSInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceInfoAsync()
            Me.GetWebServiceInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceInfoAsync(ByVal userState As Object)
            If (Me.GetWebServiceInfoOperationCompleted Is Nothing) Then
                Me.GetWebServiceInfoOperationCompleted = AddressOf Me.OnGetWebServiceInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWebServiceInfo", New Object(-1) {}, Me.GetWebServiceInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebServiceInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebServiceInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebServiceInfoCompleted(Me, New GetWebServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetWebServiceConfig", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebServiceConfig() As clsWSConfig()
            Dim results() As Object = Me.Invoke("GetWebServiceConfig", New Object(-1) {})
            Return CType(results(0),clsWSConfig())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceConfigAsync()
            Me.GetWebServiceConfigAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceConfigAsync(ByVal userState As Object)
            If (Me.GetWebServiceConfigOperationCompleted Is Nothing) Then
                Me.GetWebServiceConfigOperationCompleted = AddressOf Me.OnGetWebServiceConfigOperationCompleted
            End If
            Me.InvokeAsync("GetWebServiceConfig", New Object(-1) {}, Me.GetWebServiceConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebServiceConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebServiceConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebServiceConfigCompleted(Me, New GetWebServiceConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNlistByRange", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNlistByRange(ByVal MO As String, ByVal MinSeq As Short, ByVal MaxSeq As Short, ByVal StageCode As String, ByRef GetResult As String) As String()
            Dim results() As Object = Me.Invoke("GetUSNlistByRange", New Object() {MO, MinSeq, MaxSeq, StageCode, GetResult})
            GetResult = CType(results(1),String)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNlistByRangeAsync(ByVal MO As String, ByVal MinSeq As Short, ByVal MaxSeq As Short, ByVal StageCode As String, ByVal GetResult As String)
            Me.GetUSNlistByRangeAsync(MO, MinSeq, MaxSeq, StageCode, GetResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNlistByRangeAsync(ByVal MO As String, ByVal MinSeq As Short, ByVal MaxSeq As Short, ByVal StageCode As String, ByVal GetResult As String, ByVal userState As Object)
            If (Me.GetUSNlistByRangeOperationCompleted Is Nothing) Then
                Me.GetUSNlistByRangeOperationCompleted = AddressOf Me.OnGetUSNlistByRangeOperationCompleted
            End If
            Me.InvokeAsync("GetUSNlistByRange", New Object() {MO, MinSeq, MaxSeq, StageCode, GetResult}, Me.GetUSNlistByRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNlistByRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNlistByRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNlistByRangeCompleted(Me, New GetUSNlistByRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRuninRackUnitState", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRuninRackUnitState(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal State As Integer, ByVal TimeOutMinutes As Integer) As String
            Dim results() As Object = Me.Invoke("UploadRuninRackUnitState", New Object() {UnitSerialNumber, StageCode, State, TimeOutMinutes})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRuninRackUnitStateAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal State As Integer, ByVal TimeOutMinutes As Integer)
            Me.UploadRuninRackUnitStateAsync(UnitSerialNumber, StageCode, State, TimeOutMinutes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRuninRackUnitStateAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal State As Integer, ByVal TimeOutMinutes As Integer, ByVal userState As Object)
            If (Me.UploadRuninRackUnitStateOperationCompleted Is Nothing) Then
                Me.UploadRuninRackUnitStateOperationCompleted = AddressOf Me.OnUploadRuninRackUnitStateOperationCompleted
            End If
            Me.InvokeAsync("UploadRuninRackUnitState", New Object() {UnitSerialNumber, StageCode, State, TimeOutMinutes}, Me.UploadRuninRackUnitStateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRuninRackUnitStateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRuninRackUnitStateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRuninRackUnitStateCompleted(Me, New UploadRuninRackUnitStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadFixtureUsedTimes", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFixtureUsedTimes(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ECID As String, ByVal UsedTimes As Integer) As String
            Dim results() As Object = Me.Invoke("UploadFixtureUsedTimes", New Object() {UnitSerialNumber, StageCode, ECID, UsedTimes})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFixtureUsedTimesAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ECID As String, ByVal UsedTimes As Integer)
            Me.UploadFixtureUsedTimesAsync(UnitSerialNumber, StageCode, ECID, UsedTimes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFixtureUsedTimesAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ECID As String, ByVal UsedTimes As Integer, ByVal userState As Object)
            If (Me.UploadFixtureUsedTimesOperationCompleted Is Nothing) Then
                Me.UploadFixtureUsedTimesOperationCompleted = AddressOf Me.OnUploadFixtureUsedTimesOperationCompleted
            End If
            Me.InvokeAsync("UploadFixtureUsedTimes", New Object() {UnitSerialNumber, StageCode, ECID, UsedTimes}, Me.UploadFixtureUsedTimesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFixtureUsedTimesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFixtureUsedTimesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFixtureUsedTimesCompleted(Me, New UploadFixtureUsedTimesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckSFCDLSkill", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckSFCDLSkill(ByVal EmployeeID As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("CheckSFCDLSkill", New Object() {EmployeeID, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckSFCDLSkillAsync(ByVal EmployeeID As String, ByVal StageCode As String)
            Me.CheckSFCDLSkillAsync(EmployeeID, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckSFCDLSkillAsync(ByVal EmployeeID As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.CheckSFCDLSkillOperationCompleted Is Nothing) Then
                Me.CheckSFCDLSkillOperationCompleted = AddressOf Me.OnCheckSFCDLSkillOperationCompleted
            End If
            Me.InvokeAsync("CheckSFCDLSkill", New Object() {EmployeeID, StageCode}, Me.CheckSFCDLSkillOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckSFCDLSkillOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckSFCDLSkillCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckSFCDLSkillCompleted(Me, New CheckSFCDLSkillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadSonyIDData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadSonyIDData(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal IDCode As String, ByVal IDData As String, ByVal IDTag As String) As String
            Dim results() As Object = Me.Invoke("UploadSonyIDData", New Object() {UnitSerialNumber, StageCode, Workstation, IDCode, IDData, IDTag})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadSonyIDDataAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal IDCode As String, ByVal IDData As String, ByVal IDTag As String)
            Me.UploadSonyIDDataAsync(UnitSerialNumber, StageCode, Workstation, IDCode, IDData, IDTag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadSonyIDDataAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal IDCode As String, ByVal IDData As String, ByVal IDTag As String, ByVal userState As Object)
            If (Me.UploadSonyIDDataOperationCompleted Is Nothing) Then
                Me.UploadSonyIDDataOperationCompleted = AddressOf Me.OnUploadSonyIDDataOperationCompleted
            End If
            Me.InvokeAsync("UploadSonyIDData", New Object() {UnitSerialNumber, StageCode, Workstation, IDCode, IDData, IDTag}, Me.UploadSonyIDDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadSonyIDDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadSonyIDDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadSonyIDDataCompleted(Me, New UploadSonyIDDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadSonyIDDatas", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadSonyIDDatas(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal SonyIDDatas() As clsSonyIDData) As String
            Dim results() As Object = Me.Invoke("UploadSonyIDDatas", New Object() {UnitSerialNumber, StageCode, Workstation, SonyIDDatas})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadSonyIDDatasAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal SonyIDDatas() As clsSonyIDData)
            Me.UploadSonyIDDatasAsync(UnitSerialNumber, StageCode, Workstation, SonyIDDatas, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadSonyIDDatasAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal SonyIDDatas() As clsSonyIDData, ByVal userState As Object)
            If (Me.UploadSonyIDDatasOperationCompleted Is Nothing) Then
                Me.UploadSonyIDDatasOperationCompleted = AddressOf Me.OnUploadSonyIDDatasOperationCompleted
            End If
            Me.InvokeAsync("UploadSonyIDDatas", New Object() {UnitSerialNumber, StageCode, Workstation, SonyIDDatas}, Me.UploadSonyIDDatasOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadSonyIDDatasOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadSonyIDDatasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadSonyIDDatasCompleted(Me, New UploadSonyIDDatasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateSonyKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllocateSonyKey(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDCode As String, ByRef IDData As String) As String
            Dim results() As Object = Me.Invoke("AllocateSonyKey", New Object() {UnitSerialNumber, StageCode, IDCode, IDData})
            IDData = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllocateSonyKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDCode As String, ByVal IDData As String)
            Me.AllocateSonyKeyAsync(UnitSerialNumber, StageCode, IDCode, IDData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllocateSonyKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDCode As String, ByVal IDData As String, ByVal userState As Object)
            If (Me.AllocateSonyKeyOperationCompleted Is Nothing) Then
                Me.AllocateSonyKeyOperationCompleted = AddressOf Me.OnAllocateSonyKeyOperationCompleted
            End If
            Me.InvokeAsync("AllocateSonyKey", New Object() {UnitSerialNumber, StageCode, IDCode, IDData}, Me.AllocateSonyKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllocateSonyKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllocateSonyKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllocateSonyKeyCompleted(Me, New AllocateSonyKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateSonyKeys", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllocateSonyKeys(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDCode As String, ByRef KeyQuantity As String, <System.Xml.Serialization.XmlElementAttribute("IDDatas")> ByRef IDDatas() As String) As String
            Dim results() As Object = Me.Invoke("AllocateSonyKeys", New Object() {UnitSerialNumber, StageCode, IDCode, KeyQuantity, IDDatas})
            KeyQuantity = CType(results(1),String)
            IDDatas = CType(results(2),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllocateSonyKeysAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDCode As String, ByVal KeyQuantity As String, ByVal IDDatas() As String)
            Me.AllocateSonyKeysAsync(UnitSerialNumber, StageCode, IDCode, KeyQuantity, IDDatas, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllocateSonyKeysAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDCode As String, ByVal KeyQuantity As String, ByVal IDDatas() As String, ByVal userState As Object)
            If (Me.AllocateSonyKeysOperationCompleted Is Nothing) Then
                Me.AllocateSonyKeysOperationCompleted = AddressOf Me.OnAllocateSonyKeysOperationCompleted
            End If
            Me.InvokeAsync("AllocateSonyKeys", New Object() {UnitSerialNumber, StageCode, IDCode, KeyQuantity, IDDatas}, Me.AllocateSonyKeysOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllocateSonyKeysOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllocateSonyKeysCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllocateSonyKeysCompleted(Me, New AllocateSonyKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/BindingUSNRIPalletID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BindingUSNRIPalletID(ByVal Type As Short, ByVal StageCode As String, ByRef RIPalletID As String, ByRef UnitSerialNumber As String) As String
            Dim results() As Object = Me.Invoke("BindingUSNRIPalletID", New Object() {Type, StageCode, RIPalletID, UnitSerialNumber})
            RIPalletID = CType(results(1),String)
            UnitSerialNumber = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BindingUSNRIPalletIDAsync(ByVal Type As Short, ByVal StageCode As String, ByVal RIPalletID As String, ByVal UnitSerialNumber As String)
            Me.BindingUSNRIPalletIDAsync(Type, StageCode, RIPalletID, UnitSerialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BindingUSNRIPalletIDAsync(ByVal Type As Short, ByVal StageCode As String, ByVal RIPalletID As String, ByVal UnitSerialNumber As String, ByVal userState As Object)
            If (Me.BindingUSNRIPalletIDOperationCompleted Is Nothing) Then
                Me.BindingUSNRIPalletIDOperationCompleted = AddressOf Me.OnBindingUSNRIPalletIDOperationCompleted
            End If
            Me.InvokeAsync("BindingUSNRIPalletID", New Object() {Type, StageCode, RIPalletID, UnitSerialNumber}, Me.BindingUSNRIPalletIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnBindingUSNRIPalletIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.BindingUSNRIPalletIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BindingUSNRIPalletIDCompleted(Me, New BindingUSNRIPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/LinkUSNRIPalletID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LinkUSNRIPalletID(ByVal StageCode As String, ByVal RIPalletID As String, ByVal UnitSerialNumber As String) As String
            Dim results() As Object = Me.Invoke("LinkUSNRIPalletID", New Object() {StageCode, RIPalletID, UnitSerialNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LinkUSNRIPalletIDAsync(ByVal StageCode As String, ByVal RIPalletID As String, ByVal UnitSerialNumber As String)
            Me.LinkUSNRIPalletIDAsync(StageCode, RIPalletID, UnitSerialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LinkUSNRIPalletIDAsync(ByVal StageCode As String, ByVal RIPalletID As String, ByVal UnitSerialNumber As String, ByVal userState As Object)
            If (Me.LinkUSNRIPalletIDOperationCompleted Is Nothing) Then
                Me.LinkUSNRIPalletIDOperationCompleted = AddressOf Me.OnLinkUSNRIPalletIDOperationCompleted
            End If
            Me.InvokeAsync("LinkUSNRIPalletID", New Object() {StageCode, RIPalletID, UnitSerialNumber}, Me.LinkUSNRIPalletIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnLinkUSNRIPalletIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.LinkUSNRIPalletIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LinkUSNRIPalletIDCompleted(Me, New LinkUSNRIPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetDcsChassisInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDcsChassisInfo(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentCategory As String, ByRef GetResult As String) As clsDcsChassisInfo
            Dim results() As Object = Me.Invoke("GetDcsChassisInfo", New Object() {UnitSerialNumber, StageCode, ComponentCategory, GetResult})
            GetResult = CType(results(1),String)
            Return CType(results(0),clsDcsChassisInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDcsChassisInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentCategory As String, ByVal GetResult As String)
            Me.GetDcsChassisInfoAsync(UnitSerialNumber, StageCode, ComponentCategory, GetResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDcsChassisInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentCategory As String, ByVal GetResult As String, ByVal userState As Object)
            If (Me.GetDcsChassisInfoOperationCompleted Is Nothing) Then
                Me.GetDcsChassisInfoOperationCompleted = AddressOf Me.OnGetDcsChassisInfoOperationCompleted
            End If
            Me.InvokeAsync("GetDcsChassisInfo", New Object() {UnitSerialNumber, StageCode, ComponentCategory, GetResult}, Me.GetDcsChassisInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDcsChassisInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDcsChassisInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDcsChassisInfoCompleted(Me, New GetDcsChassisInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCfiNewSiList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCfiNewSiList(ByVal NeedRecordQty As String) As String
            Dim results() As Object = Me.Invoke("GetCfiNewSiList", New Object() {NeedRecordQty})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCfiNewSiListAsync(ByVal NeedRecordQty As String)
            Me.GetCfiNewSiListAsync(NeedRecordQty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCfiNewSiListAsync(ByVal NeedRecordQty As String, ByVal userState As Object)
            If (Me.GetCfiNewSiListOperationCompleted Is Nothing) Then
                Me.GetCfiNewSiListOperationCompleted = AddressOf Me.OnGetCfiNewSiListOperationCompleted
            End If
            Me.InvokeAsync("GetCfiNewSiList", New Object() {NeedRecordQty}, Me.GetCfiNewSiListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCfiNewSiListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCfiNewSiListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCfiNewSiListCompleted(Me, New GetCfiNewSiListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCfiSiInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCfiSiInfo(ByVal SINumber As String) As clsSINumberInfo
            Dim results() As Object = Me.Invoke("GetCfiSiInfo", New Object() {SINumber})
            Return CType(results(0),clsSINumberInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCfiSiInfoAsync(ByVal SINumber As String)
            Me.GetCfiSiInfoAsync(SINumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCfiSiInfoAsync(ByVal SINumber As String, ByVal userState As Object)
            If (Me.GetCfiSiInfoOperationCompleted Is Nothing) Then
                Me.GetCfiSiInfoOperationCompleted = AddressOf Me.OnGetCfiSiInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCfiSiInfo", New Object() {SINumber}, Me.GetCfiSiInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCfiSiInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCfiSiInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCfiSiInfoCompleted(Me, New GetCfiSiInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateCfiSiStatus", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCfiSiStatus(ByVal SINumber As String, ByVal SISyncStatus As String) As String
            Dim results() As Object = Me.Invoke("UpdateCfiSiStatus", New Object() {SINumber, SISyncStatus})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCfiSiStatusAsync(ByVal SINumber As String, ByVal SISyncStatus As String)
            Me.UpdateCfiSiStatusAsync(SINumber, SISyncStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCfiSiStatusAsync(ByVal SINumber As String, ByVal SISyncStatus As String, ByVal userState As Object)
            If (Me.UpdateCfiSiStatusOperationCompleted Is Nothing) Then
                Me.UpdateCfiSiStatusOperationCompleted = AddressOf Me.OnUpdateCfiSiStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateCfiSiStatus", New Object() {SINumber, SISyncStatus}, Me.UpdateCfiSiStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCfiSiStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCfiSiStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCfiSiStatusCompleted(Me, New UpdateCfiSiStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCfiData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCfiData(ByVal UnitSerialNumber As String) As clsUnitCfiData
            Dim results() As Object = Me.Invoke("GetCfiData", New Object() {UnitSerialNumber})
            Return CType(results(0),clsUnitCfiData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCfiDataAsync(ByVal UnitSerialNumber As String)
            Me.GetCfiDataAsync(UnitSerialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCfiDataAsync(ByVal UnitSerialNumber As String, ByVal userState As Object)
            If (Me.GetCfiDataOperationCompleted Is Nothing) Then
                Me.GetCfiDataOperationCompleted = AddressOf Me.OnGetCfiDataOperationCompleted
            End If
            Me.InvokeAsync("GetCfiData", New Object() {UnitSerialNumber}, Me.GetCfiDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCfiDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCfiDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCfiDataCompleted(Me, New GetCfiDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadCfiHwInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadCfiHwInfo(ByVal UnitCfiHwInfo As clsUnitCfiHwInfo) As String
            Dim results() As Object = Me.Invoke("UploadCfiHwInfo", New Object() {UnitCfiHwInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadCfiHwInfoAsync(ByVal UnitCfiHwInfo As clsUnitCfiHwInfo)
            Me.UploadCfiHwInfoAsync(UnitCfiHwInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadCfiHwInfoAsync(ByVal UnitCfiHwInfo As clsUnitCfiHwInfo, ByVal userState As Object)
            If (Me.UploadCfiHwInfoOperationCompleted Is Nothing) Then
                Me.UploadCfiHwInfoOperationCompleted = AddressOf Me.OnUploadCfiHwInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadCfiHwInfo", New Object() {UnitCfiHwInfo}, Me.UploadCfiHwInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadCfiHwInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadCfiHwInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadCfiHwInfoCompleted(Me, New UploadCfiHwInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadBurnInRoomTemperature", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadBurnInRoomTemperature(ByVal BurnInRoomID As String, ByVal Temperature As String) As String
            Dim results() As Object = Me.Invoke("UploadBurnInRoomTemperature", New Object() {BurnInRoomID, Temperature})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadBurnInRoomTemperatureAsync(ByVal BurnInRoomID As String, ByVal Temperature As String)
            Me.UploadBurnInRoomTemperatureAsync(BurnInRoomID, Temperature, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadBurnInRoomTemperatureAsync(ByVal BurnInRoomID As String, ByVal Temperature As String, ByVal userState As Object)
            If (Me.UploadBurnInRoomTemperatureOperationCompleted Is Nothing) Then
                Me.UploadBurnInRoomTemperatureOperationCompleted = AddressOf Me.OnUploadBurnInRoomTemperatureOperationCompleted
            End If
            Me.InvokeAsync("UploadBurnInRoomTemperature", New Object() {BurnInRoomID, Temperature}, Me.UploadBurnInRoomTemperatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadBurnInRoomTemperatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadBurnInRoomTemperatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadBurnInRoomTemperatureCompleted(Me, New UploadBurnInRoomTemperatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/IPCUSNPositionLinkage", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IPCUSNPositionLinkage(ByVal USN As String, ByVal PositionID As String, ByVal Command As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("IPCUSNPositionLinkage", New Object() {USN, PositionID, Command, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IPCUSNPositionLinkageAsync(ByVal USN As String, ByVal PositionID As String, ByVal Command As String, ByVal UserID As String)
            Me.IPCUSNPositionLinkageAsync(USN, PositionID, Command, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IPCUSNPositionLinkageAsync(ByVal USN As String, ByVal PositionID As String, ByVal Command As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.IPCUSNPositionLinkageOperationCompleted Is Nothing) Then
                Me.IPCUSNPositionLinkageOperationCompleted = AddressOf Me.OnIPCUSNPositionLinkageOperationCompleted
            End If
            Me.InvokeAsync("IPCUSNPositionLinkage", New Object() {USN, PositionID, Command, UserID}, Me.IPCUSNPositionLinkageOperationCompleted, userState)
        End Sub
        
        Private Sub OnIPCUSNPositionLinkageOperationCompleted(ByVal arg As Object)
            If (Not (Me.IPCUSNPositionLinkageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IPCUSNPositionLinkageCompleted(Me, New IPCUSNPositionLinkageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckInOutIPCBurnInRoom", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckInOutIPCBurnInRoom(ByVal CartID As String, ByVal LocationID As String, ByVal Command As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("CheckInOutIPCBurnInRoom", New Object() {CartID, LocationID, Command, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckInOutIPCBurnInRoomAsync(ByVal CartID As String, ByVal LocationID As String, ByVal Command As String, ByVal UserID As String)
            Me.CheckInOutIPCBurnInRoomAsync(CartID, LocationID, Command, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckInOutIPCBurnInRoomAsync(ByVal CartID As String, ByVal LocationID As String, ByVal Command As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.CheckInOutIPCBurnInRoomOperationCompleted Is Nothing) Then
                Me.CheckInOutIPCBurnInRoomOperationCompleted = AddressOf Me.OnCheckInOutIPCBurnInRoomOperationCompleted
            End If
            Me.InvokeAsync("CheckInOutIPCBurnInRoom", New Object() {CartID, LocationID, Command, UserID}, Me.CheckInOutIPCBurnInRoomOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckInOutIPCBurnInRoomOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckInOutIPCBurnInRoomCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckInOutIPCBurnInRoomCompleted(Me, New CheckInOutIPCBurnInRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/TransferIPCBurnInLocation", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransferIPCBurnInLocation(ByVal OriginalLocID As String, ByVal NewLocID As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("TransferIPCBurnInLocation", New Object() {OriginalLocID, NewLocID, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransferIPCBurnInLocationAsync(ByVal OriginalLocID As String, ByVal NewLocID As String, ByVal UserID As String)
            Me.TransferIPCBurnInLocationAsync(OriginalLocID, NewLocID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransferIPCBurnInLocationAsync(ByVal OriginalLocID As String, ByVal NewLocID As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.TransferIPCBurnInLocationOperationCompleted Is Nothing) Then
                Me.TransferIPCBurnInLocationOperationCompleted = AddressOf Me.OnTransferIPCBurnInLocationOperationCompleted
            End If
            Me.InvokeAsync("TransferIPCBurnInLocation", New Object() {OriginalLocID, NewLocID, UserID}, Me.TransferIPCBurnInLocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransferIPCBurnInLocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransferIPCBurnInLocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransferIPCBurnInLocationCompleted(Me, New TransferIPCBurnInLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/LinkMultiBoardUSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LinkMultiBoardUSN(ByVal StageCode As String, <System.Xml.Serialization.XmlArrayItemAttribute("UnitSerialNumber")> ByVal UnitSerialNumbers() As String) As String
            Dim results() As Object = Me.Invoke("LinkMultiBoardUSN", New Object() {StageCode, UnitSerialNumbers})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LinkMultiBoardUSNAsync(ByVal StageCode As String, ByVal UnitSerialNumbers() As String)
            Me.LinkMultiBoardUSNAsync(StageCode, UnitSerialNumbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LinkMultiBoardUSNAsync(ByVal StageCode As String, ByVal UnitSerialNumbers() As String, ByVal userState As Object)
            If (Me.LinkMultiBoardUSNOperationCompleted Is Nothing) Then
                Me.LinkMultiBoardUSNOperationCompleted = AddressOf Me.OnLinkMultiBoardUSNOperationCompleted
            End If
            Me.InvokeAsync("LinkMultiBoardUSN", New Object() {StageCode, UnitSerialNumbers}, Me.LinkMultiBoardUSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnLinkMultiBoardUSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.LinkMultiBoardUSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LinkMultiBoardUSNCompleted(Me, New LinkMultiBoardUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RequstJDMD3FileJob", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequstJDMD3FileJob(ByVal RequestPlantCode As String, ByVal RequestType As String, ByVal RequestDate As String, <System.Xml.Serialization.XmlArrayItemAttribute("UnitSerialNumber")> ByVal UnitSerialNumbers() As String) As String
            Dim results() As Object = Me.Invoke("RequstJDMD3FileJob", New Object() {RequestPlantCode, RequestType, RequestDate, UnitSerialNumbers})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequstJDMD3FileJobAsync(ByVal RequestPlantCode As String, ByVal RequestType As String, ByVal RequestDate As String, ByVal UnitSerialNumbers() As String)
            Me.RequstJDMD3FileJobAsync(RequestPlantCode, RequestType, RequestDate, UnitSerialNumbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequstJDMD3FileJobAsync(ByVal RequestPlantCode As String, ByVal RequestType As String, ByVal RequestDate As String, ByVal UnitSerialNumbers() As String, ByVal userState As Object)
            If (Me.RequstJDMD3FileJobOperationCompleted Is Nothing) Then
                Me.RequstJDMD3FileJobOperationCompleted = AddressOf Me.OnRequstJDMD3FileJobOperationCompleted
            End If
            Me.InvokeAsync("RequstJDMD3FileJob", New Object() {RequestPlantCode, RequestType, RequestDate, UnitSerialNumbers}, Me.RequstJDMD3FileJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequstJDMD3FileJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequstJDMD3FileJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequstJDMD3FileJobCompleted(Me, New RequstJDMD3FileJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetJDMD3FileJobInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJDMD3FileJobInfo(ByVal RequestPlantCode As String, ByVal Status As String) As clsJDMD3FileJobInfo()
            Dim results() As Object = Me.Invoke("GetJDMD3FileJobInfo", New Object() {RequestPlantCode, Status})
            Return CType(results(0),clsJDMD3FileJobInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJDMD3FileJobInfoAsync(ByVal RequestPlantCode As String, ByVal Status As String)
            Me.GetJDMD3FileJobInfoAsync(RequestPlantCode, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJDMD3FileJobInfoAsync(ByVal RequestPlantCode As String, ByVal Status As String, ByVal userState As Object)
            If (Me.GetJDMD3FileJobInfoOperationCompleted Is Nothing) Then
                Me.GetJDMD3FileJobInfoOperationCompleted = AddressOf Me.OnGetJDMD3FileJobInfoOperationCompleted
            End If
            Me.InvokeAsync("GetJDMD3FileJobInfo", New Object() {RequestPlantCode, Status}, Me.GetJDMD3FileJobInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJDMD3FileJobInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJDMD3FileJobInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJDMD3FileJobInfoCompleted(Me, New GetJDMD3FileJobInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateJDMD3FileJobStatus", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateJDMD3FileJobStatus(ByVal RequstID As String, ByVal Status As String) As String
            Dim results() As Object = Me.Invoke("UpdateJDMD3FileJobStatus", New Object() {RequstID, Status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateJDMD3FileJobStatusAsync(ByVal RequstID As String, ByVal Status As String)
            Me.UpdateJDMD3FileJobStatusAsync(RequstID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJDMD3FileJobStatusAsync(ByVal RequstID As String, ByVal Status As String, ByVal userState As Object)
            If (Me.UpdateJDMD3FileJobStatusOperationCompleted Is Nothing) Then
                Me.UpdateJDMD3FileJobStatusOperationCompleted = AddressOf Me.OnUpdateJDMD3FileJobStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateJDMD3FileJobStatus", New Object() {RequstID, Status}, Me.UpdateJDMD3FileJobStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJDMD3FileJobStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJDMD3FileJobStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJDMD3FileJobStatusCompleted(Me, New UpdateJDMD3FileJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAISImageFileName", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAISImageFileName(ByVal UnitSerialNumber As String, ByVal Category As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetAISImageFileName", New Object() {UnitSerialNumber, Category, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAISImageFileNameAsync(ByVal UnitSerialNumber As String, ByVal Category As String, ByVal StageCode As String)
            Me.GetAISImageFileNameAsync(UnitSerialNumber, Category, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAISImageFileNameAsync(ByVal UnitSerialNumber As String, ByVal Category As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetAISImageFileNameOperationCompleted Is Nothing) Then
                Me.GetAISImageFileNameOperationCompleted = AddressOf Me.OnGetAISImageFileNameOperationCompleted
            End If
            Me.InvokeAsync("GetAISImageFileName", New Object() {UnitSerialNumber, Category, StageCode}, Me.GetAISImageFileNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAISImageFileNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAISImageFileNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAISImageFileNameCompleted(Me, New GetAISImageFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAISImageFileNameSplit", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAISImageFileNameSplit(ByVal UnitSerialNumber As String, ByVal Category As String, ByVal StageCode As String, ByVal FileNameSplitter As String) As String
            Dim results() As Object = Me.Invoke("GetAISImageFileNameSplit", New Object() {UnitSerialNumber, Category, StageCode, FileNameSplitter})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAISImageFileNameSplitAsync(ByVal UnitSerialNumber As String, ByVal Category As String, ByVal StageCode As String, ByVal FileNameSplitter As String)
            Me.GetAISImageFileNameSplitAsync(UnitSerialNumber, Category, StageCode, FileNameSplitter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAISImageFileNameSplitAsync(ByVal UnitSerialNumber As String, ByVal Category As String, ByVal StageCode As String, ByVal FileNameSplitter As String, ByVal userState As Object)
            If (Me.GetAISImageFileNameSplitOperationCompleted Is Nothing) Then
                Me.GetAISImageFileNameSplitOperationCompleted = AddressOf Me.OnGetAISImageFileNameSplitOperationCompleted
            End If
            Me.InvokeAsync("GetAISImageFileNameSplit", New Object() {UnitSerialNumber, Category, StageCode, FileNameSplitter}, Me.GetAISImageFileNameSplitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAISImageFileNameSplitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAISImageFileNameSplitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAISImageFileNameSplitCompleted(Me, New GetAISImageFileNameSplitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetIDValueByMO", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIDValueByMO(ByVal MO As String, ByVal StageCode As String, ByVal IDType As Integer) As clsMOIDValue
            Dim results() As Object = Me.Invoke("GetIDValueByMO", New Object() {MO, StageCode, IDType})
            Return CType(results(0),clsMOIDValue)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIDValueByMOAsync(ByVal MO As String, ByVal StageCode As String, ByVal IDType As Integer)
            Me.GetIDValueByMOAsync(MO, StageCode, IDType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIDValueByMOAsync(ByVal MO As String, ByVal StageCode As String, ByVal IDType As Integer, ByVal userState As Object)
            If (Me.GetIDValueByMOOperationCompleted Is Nothing) Then
                Me.GetIDValueByMOOperationCompleted = AddressOf Me.OnGetIDValueByMOOperationCompleted
            End If
            Me.InvokeAsync("GetIDValueByMO", New Object() {MO, StageCode, IDType}, Me.GetIDValueByMOOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIDValueByMOOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIDValueByMOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIDValueByMOCompleted(Me, New GetIDValueByMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetICPN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetICPN(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Location As String) As String
            Dim results() As Object = Me.Invoke("GetICPN", New Object() {UnitSerialNumber, StageCode, Location})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetICPNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Location As String)
            Me.GetICPNAsync(UnitSerialNumber, StageCode, Location, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetICPNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Location As String, ByVal userState As Object)
            If (Me.GetICPNOperationCompleted Is Nothing) Then
                Me.GetICPNOperationCompleted = AddressOf Me.OnGetICPNOperationCompleted
            End If
            Me.InvokeAsync("GetICPN", New Object() {UnitSerialNumber, StageCode, Location}, Me.GetICPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetICPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetICPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetICPNCompleted(Me, New GetICPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEngravingInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEngravingInfo(ByVal UnitSerialNumber As String, ByVal StageCode As String) As clsEngravingInfo
            Dim results() As Object = Me.Invoke("GetEngravingInfo", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),clsEngravingInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEngravingInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetEngravingInfoAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEngravingInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetEngravingInfoOperationCompleted Is Nothing) Then
                Me.GetEngravingInfoOperationCompleted = AddressOf Me.OnGetEngravingInfoOperationCompleted
            End If
            Me.InvokeAsync("GetEngravingInfo", New Object() {UnitSerialNumber, StageCode}, Me.GetEngravingInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEngravingInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEngravingInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEngravingInfoCompleted(Me, New GetEngravingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMacSecurityKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMacSecurityKey(ByVal MAC As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetMacSecurityKey", New Object() {MAC, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMacSecurityKeyAsync(ByVal MAC As String, ByVal StageCode As String)
            Me.GetMacSecurityKeyAsync(MAC, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMacSecurityKeyAsync(ByVal MAC As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetMacSecurityKeyOperationCompleted Is Nothing) Then
                Me.GetMacSecurityKeyOperationCompleted = AddressOf Me.OnGetMacSecurityKeyOperationCompleted
            End If
            Me.InvokeAsync("GetMacSecurityKey", New Object() {MAC, StageCode}, Me.GetMacSecurityKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMacSecurityKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMacSecurityKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMacSecurityKeyCompleted(Me, New GetMacSecurityKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRendyResult", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRendyResult(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Name As String, ByVal SubName As String, ByVal MinValue As String, ByVal MaxValue As String, ByVal MeasuredValue As String, ByVal Unit As String, ByVal UserID As String, ByVal Pass As Boolean) As String
            Dim results() As Object = Me.Invoke("UploadRendyResult", New Object() {UnitSerialNumber, StageCode, Workstation, Name, SubName, MinValue, MaxValue, MeasuredValue, Unit, UserID, Pass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRendyResultAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Name As String, ByVal SubName As String, ByVal MinValue As String, ByVal MaxValue As String, ByVal MeasuredValue As String, ByVal Unit As String, ByVal UserID As String, ByVal Pass As Boolean)
            Me.UploadRendyResultAsync(UnitSerialNumber, StageCode, Workstation, Name, SubName, MinValue, MaxValue, MeasuredValue, Unit, UserID, Pass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRendyResultAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Name As String, ByVal SubName As String, ByVal MinValue As String, ByVal MaxValue As String, ByVal MeasuredValue As String, ByVal Unit As String, ByVal UserID As String, ByVal Pass As Boolean, ByVal userState As Object)
            If (Me.UploadRendyResultOperationCompleted Is Nothing) Then
                Me.UploadRendyResultOperationCompleted = AddressOf Me.OnUploadRendyResultOperationCompleted
            End If
            Me.InvokeAsync("UploadRendyResult", New Object() {UnitSerialNumber, StageCode, Workstation, Name, SubName, MinValue, MaxValue, MeasuredValue, Unit, UserID, Pass}, Me.UploadRendyResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRendyResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRendyResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRendyResultCompleted(Me, New UploadRendyResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRendyAntiTheftCCID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRendyAntiTheftCCID(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ProductSerialNumber As String, ByVal AntiTheftCode As String, ByVal CCID As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("UploadRendyAntiTheftCCID", New Object() {UnitSerialNumber, StageCode, Workstation, ProductSerialNumber, AntiTheftCode, CCID, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRendyAntiTheftCCIDAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ProductSerialNumber As String, ByVal AntiTheftCode As String, ByVal CCID As String, ByVal UserID As String)
            Me.UploadRendyAntiTheftCCIDAsync(UnitSerialNumber, StageCode, Workstation, ProductSerialNumber, AntiTheftCode, CCID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRendyAntiTheftCCIDAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ProductSerialNumber As String, ByVal AntiTheftCode As String, ByVal CCID As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.UploadRendyAntiTheftCCIDOperationCompleted Is Nothing) Then
                Me.UploadRendyAntiTheftCCIDOperationCompleted = AddressOf Me.OnUploadRendyAntiTheftCCIDOperationCompleted
            End If
            Me.InvokeAsync("UploadRendyAntiTheftCCID", New Object() {UnitSerialNumber, StageCode, Workstation, ProductSerialNumber, AntiTheftCode, CCID, UserID}, Me.UploadRendyAntiTheftCCIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRendyAntiTheftCCIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRendyAntiTheftCCIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRendyAntiTheftCCIDCompleted(Me, New UploadRendyAntiTheftCCIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTpsUpnInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTpsUpnInfo(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String) As String
            Dim results() As Object = Me.Invoke("UploadTpsUpnInfo", New Object() {UnitPartNumber, StageCode, InfoName, InfoValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTpsUpnInfoAsync(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String)
            Me.UploadTpsUpnInfoAsync(UnitPartNumber, StageCode, InfoName, InfoValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTpsUpnInfoAsync(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal userState As Object)
            If (Me.UploadTpsUpnInfoOperationCompleted Is Nothing) Then
                Me.UploadTpsUpnInfoOperationCompleted = AddressOf Me.OnUploadTpsUpnInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadTpsUpnInfo", New Object() {UnitPartNumber, StageCode, InfoName, InfoValue}, Me.UploadTpsUpnInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTpsUpnInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTpsUpnInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTpsUpnInfoCompleted(Me, New UploadTpsUpnInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTeNotReadyMoList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTeNotReadyMoList(ByVal StageCode As String, <System.Xml.Serialization.XmlArrayItemAttribute("MO")> ByRef MOs() As String) As String
            Dim results() As Object = Me.Invoke("GetTeNotReadyMoList", New Object() {StageCode, MOs})
            MOs = CType(results(1),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTeNotReadyMoListAsync(ByVal StageCode As String, ByVal MOs() As String)
            Me.GetTeNotReadyMoListAsync(StageCode, MOs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTeNotReadyMoListAsync(ByVal StageCode As String, ByVal MOs() As String, ByVal userState As Object)
            If (Me.GetTeNotReadyMoListOperationCompleted Is Nothing) Then
                Me.GetTeNotReadyMoListOperationCompleted = AddressOf Me.OnGetTeNotReadyMoListOperationCompleted
            End If
            Me.InvokeAsync("GetTeNotReadyMoList", New Object() {StageCode, MOs}, Me.GetTeNotReadyMoListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTeNotReadyMoListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTeNotReadyMoListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTeNotReadyMoListCompleted(Me, New GetTeNotReadyMoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateTeReadyFlagByMo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTeReadyFlagByMo(ByVal MO As String, ByVal StageCode As String, ByVal TeProgramFlag As String) As String
            Dim results() As Object = Me.Invoke("UpdateTeReadyFlagByMo", New Object() {MO, StageCode, TeProgramFlag})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTeReadyFlagByMoAsync(ByVal MO As String, ByVal StageCode As String, ByVal TeProgramFlag As String)
            Me.UpdateTeReadyFlagByMoAsync(MO, StageCode, TeProgramFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTeReadyFlagByMoAsync(ByVal MO As String, ByVal StageCode As String, ByVal TeProgramFlag As String, ByVal userState As Object)
            If (Me.UpdateTeReadyFlagByMoOperationCompleted Is Nothing) Then
                Me.UpdateTeReadyFlagByMoOperationCompleted = AddressOf Me.OnUpdateTeReadyFlagByMoOperationCompleted
            End If
            Me.InvokeAsync("UpdateTeReadyFlagByMo", New Object() {MO, StageCode, TeProgramFlag}, Me.UpdateTeReadyFlagByMoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTeReadyFlagByMoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTeReadyFlagByMoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTeReadyFlagByMoCompleted(Me, New UpdateTeReadyFlagByMoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMoInfoByMo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMoInfoByMo(ByVal MO As String, ByVal StageCode As String, ByVal InfoName As String) As String
            Dim results() As Object = Me.Invoke("GetMoInfoByMo", New Object() {MO, StageCode, InfoName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMoInfoByMoAsync(ByVal MO As String, ByVal StageCode As String, ByVal InfoName As String)
            Me.GetMoInfoByMoAsync(MO, StageCode, InfoName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMoInfoByMoAsync(ByVal MO As String, ByVal StageCode As String, ByVal InfoName As String, ByVal userState As Object)
            If (Me.GetMoInfoByMoOperationCompleted Is Nothing) Then
                Me.GetMoInfoByMoOperationCompleted = AddressOf Me.OnGetMoInfoByMoOperationCompleted
            End If
            Me.InvokeAsync("GetMoInfoByMo", New Object() {MO, StageCode, InfoName}, Me.GetMoInfoByMoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMoInfoByMoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMoInfoByMoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMoInfoByMoCompleted(Me, New GetMoInfoByMoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMOItemByMo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMOItemByMo(ByVal MO As String, ByVal StageCode As String, ByVal Category As String, <System.Xml.Serialization.XmlArrayItemAttribute("MOItem")> ByRef MOItems() As clsMOItem) As String
            Dim results() As Object = Me.Invoke("GetMOItemByMo", New Object() {MO, StageCode, Category, MOItems})
            MOItems = CType(results(1),clsMOItem())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMOItemByMoAsync(ByVal MO As String, ByVal StageCode As String, ByVal Category As String, ByVal MOItems() As clsMOItem)
            Me.GetMOItemByMoAsync(MO, StageCode, Category, MOItems, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMOItemByMoAsync(ByVal MO As String, ByVal StageCode As String, ByVal Category As String, ByVal MOItems() As clsMOItem, ByVal userState As Object)
            If (Me.GetMOItemByMoOperationCompleted Is Nothing) Then
                Me.GetMOItemByMoOperationCompleted = AddressOf Me.OnGetMOItemByMoOperationCompleted
            End If
            Me.InvokeAsync("GetMOItemByMo", New Object() {MO, StageCode, Category, MOItems}, Me.GetMOItemByMoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMOItemByMoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMOItemByMoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMOItemByMoCompleted(Me, New GetMOItemByMoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTVKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTVKey(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef clsTVKeyData As clsTVKeyData) As String
            Dim results() As Object = Me.Invoke("GetTVKey", New Object() {UnitSerialNumber, StageCode, clsTVKeyData})
            clsTVKeyData = CType(results(1),clsTVKeyData)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTVKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal clsTVKeyData As clsTVKeyData)
            Me.GetTVKeyAsync(UnitSerialNumber, StageCode, clsTVKeyData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTVKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal clsTVKeyData As clsTVKeyData, ByVal userState As Object)
            If (Me.GetTVKeyOperationCompleted Is Nothing) Then
                Me.GetTVKeyOperationCompleted = AddressOf Me.OnGetTVKeyOperationCompleted
            End If
            Me.InvokeAsync("GetTVKey", New Object() {UnitSerialNumber, StageCode, clsTVKeyData}, Me.GetTVKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTVKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTVKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTVKeyCompleted(Me, New GetTVKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVKey(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal WorkStation As String, ByVal TVKeyItems() As clsTVKeyItem, ByVal UniqueCheckFlag As Boolean) As String
            Dim results() As Object = Me.Invoke("UploadTVKey", New Object() {UnitSerialNumber, StageCode, WorkStation, TVKeyItems, UniqueCheckFlag})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal WorkStation As String, ByVal TVKeyItems() As clsTVKeyItem, ByVal UniqueCheckFlag As Boolean)
            Me.UploadTVKeyAsync(UnitSerialNumber, StageCode, WorkStation, TVKeyItems, UniqueCheckFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal WorkStation As String, ByVal TVKeyItems() As clsTVKeyItem, ByVal UniqueCheckFlag As Boolean, ByVal userState As Object)
            If (Me.UploadTVKeyOperationCompleted Is Nothing) Then
                Me.UploadTVKeyOperationCompleted = AddressOf Me.OnUploadTVKeyOperationCompleted
            End If
            Me.InvokeAsync("UploadTVKey", New Object() {UnitSerialNumber, StageCode, WorkStation, TVKeyItems, UniqueCheckFlag}, Me.UploadTVKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVKeyCompleted(Me, New UploadTVKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetDefectUsnList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDefectUsnList(ByVal StageCode As String, ByVal DefectDateFrom As Date, ByVal DefectDateTo As Date, <System.Xml.Serialization.XmlArrayItemAttribute("UnitSerialNumber")> ByRef UnitSerialNumbers() As String) As String
            Dim results() As Object = Me.Invoke("GetDefectUsnList", New Object() {StageCode, DefectDateFrom, DefectDateTo, UnitSerialNumbers})
            UnitSerialNumbers = CType(results(1),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDefectUsnListAsync(ByVal StageCode As String, ByVal DefectDateFrom As Date, ByVal DefectDateTo As Date, ByVal UnitSerialNumbers() As String)
            Me.GetDefectUsnListAsync(StageCode, DefectDateFrom, DefectDateTo, UnitSerialNumbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDefectUsnListAsync(ByVal StageCode As String, ByVal DefectDateFrom As Date, ByVal DefectDateTo As Date, ByVal UnitSerialNumbers() As String, ByVal userState As Object)
            If (Me.GetDefectUsnListOperationCompleted Is Nothing) Then
                Me.GetDefectUsnListOperationCompleted = AddressOf Me.OnGetDefectUsnListOperationCompleted
            End If
            Me.InvokeAsync("GetDefectUsnList", New Object() {StageCode, DefectDateFrom, DefectDateTo, UnitSerialNumbers}, Me.GetDefectUsnListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDefectUsnListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDefectUsnListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDefectUsnListCompleted(Me, New GetDefectUsnListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnDefect", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnDefect(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef DataTable As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("GetUsnDefect", New Object() {UnitSerialNumber, StageCode, DataTable})
            DataTable = CType(results(1),System.Data.DataSet)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnDefectAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataTable As System.Data.DataSet)
            Me.GetUsnDefectAsync(UnitSerialNumber, StageCode, DataTable, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnDefectAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataTable As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetUsnDefectOperationCompleted Is Nothing) Then
                Me.GetUsnDefectOperationCompleted = AddressOf Me.OnGetUsnDefectOperationCompleted
            End If
            Me.InvokeAsync("GetUsnDefect", New Object() {UnitSerialNumber, StageCode, DataTable}, Me.GetUsnDefectOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnDefectOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnDefectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnDefectCompleted(Me, New GetUsnDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RosaHddMoLinkCRUD", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RosaHddMoLinkCRUD(ByVal MO As String, ByVal HDDPPID As String, ByVal CRUDType As String) As String
            Dim results() As Object = Me.Invoke("RosaHddMoLinkCRUD", New Object() {MO, HDDPPID, CRUDType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RosaHddMoLinkCRUDAsync(ByVal MO As String, ByVal HDDPPID As String, ByVal CRUDType As String)
            Me.RosaHddMoLinkCRUDAsync(MO, HDDPPID, CRUDType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RosaHddMoLinkCRUDAsync(ByVal MO As String, ByVal HDDPPID As String, ByVal CRUDType As String, ByVal userState As Object)
            If (Me.RosaHddMoLinkCRUDOperationCompleted Is Nothing) Then
                Me.RosaHddMoLinkCRUDOperationCompleted = AddressOf Me.OnRosaHddMoLinkCRUDOperationCompleted
            End If
            Me.InvokeAsync("RosaHddMoLinkCRUD", New Object() {MO, HDDPPID, CRUDType}, Me.RosaHddMoLinkCRUDOperationCompleted, userState)
        End Sub
        
        Private Sub OnRosaHddMoLinkCRUDOperationCompleted(ByVal arg As Object)
            If (Not (Me.RosaHddMoLinkCRUDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RosaHddMoLinkCRUDCompleted(Me, New RosaHddMoLinkCRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetLastTransactionData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastTransactionData(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef Workstation As String, ByRef TransactionDate As String) As String
            Dim results() As Object = Me.Invoke("GetLastTransactionData", New Object() {UnitSerialNumber, StageCode, Workstation, TransactionDate})
            Workstation = CType(results(1),String)
            TransactionDate = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLastTransactionDataAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal TransactionDate As String)
            Me.GetLastTransactionDataAsync(UnitSerialNumber, StageCode, Workstation, TransactionDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLastTransactionDataAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal TransactionDate As String, ByVal userState As Object)
            If (Me.GetLastTransactionDataOperationCompleted Is Nothing) Then
                Me.GetLastTransactionDataOperationCompleted = AddressOf Me.OnGetLastTransactionDataOperationCompleted
            End If
            Me.InvokeAsync("GetLastTransactionData", New Object() {UnitSerialNumber, StageCode, Workstation, TransactionDate}, Me.GetLastTransactionDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLastTransactionDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLastTransactionDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLastTransactionDataCompleted(Me, New GetLastTransactionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetLastFixtureId", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastFixtureId(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef FixtureId As String) As String
            Dim results() As Object = Me.Invoke("GetLastFixtureId", New Object() {UnitSerialNumber, StageCode, FixtureId})
            FixtureId = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLastFixtureIdAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal FixtureId As String)
            Me.GetLastFixtureIdAsync(UnitSerialNumber, StageCode, FixtureId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLastFixtureIdAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal FixtureId As String, ByVal userState As Object)
            If (Me.GetLastFixtureIdOperationCompleted Is Nothing) Then
                Me.GetLastFixtureIdOperationCompleted = AddressOf Me.OnGetLastFixtureIdOperationCompleted
            End If
            Me.InvokeAsync("GetLastFixtureId", New Object() {UnitSerialNumber, StageCode, FixtureId}, Me.GetLastFixtureIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLastFixtureIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLastFixtureIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLastFixtureIdCompleted(Me, New GetLastFixtureIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnRepair", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnRepair(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef DataTable As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("GetUsnRepair", New Object() {UnitSerialNumber, StageCode, DataTable})
            DataTable = CType(results(1),System.Data.DataSet)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnRepairAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataTable As System.Data.DataSet)
            Me.GetUsnRepairAsync(UnitSerialNumber, StageCode, DataTable, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnRepairAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataTable As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetUsnRepairOperationCompleted Is Nothing) Then
                Me.GetUsnRepairOperationCompleted = AddressOf Me.OnGetUsnRepairOperationCompleted
            End If
            Me.InvokeAsync("GetUsnRepair", New Object() {UnitSerialNumber, StageCode, DataTable}, Me.GetUsnRepairOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnRepairOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnRepairCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnRepairCompleted(Me, New GetUsnRepairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnInfoAtStage", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnInfoAtStage(ByVal UnitSerialNumber As String, ByVal StageCode As String, <System.Xml.Serialization.XmlArrayItemAttribute("KeyValue")> ByRef KeyValues() As clsKeyValue) As String
            Dim results() As Object = Me.Invoke("GetUsnInfoAtStage", New Object() {UnitSerialNumber, StageCode, KeyValues})
            KeyValues = CType(results(1),clsKeyValue())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnInfoAtStageAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal KeyValues() As clsKeyValue)
            Me.GetUsnInfoAtStageAsync(UnitSerialNumber, StageCode, KeyValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnInfoAtStageAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal KeyValues() As clsKeyValue, ByVal userState As Object)
            If (Me.GetUsnInfoAtStageOperationCompleted Is Nothing) Then
                Me.GetUsnInfoAtStageOperationCompleted = AddressOf Me.OnGetUsnInfoAtStageOperationCompleted
            End If
            Me.InvokeAsync("GetUsnInfoAtStage", New Object() {UnitSerialNumber, StageCode, KeyValues}, Me.GetUsnInfoAtStageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnInfoAtStageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnInfoAtStageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnInfoAtStageCompleted(Me, New GetUsnInfoAtStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRfEquTestTime", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRfEquTestTime(ByVal PlantCode As String, ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal EquipmentId As String, ByVal TestStage As String, ByVal TestStartTime As String, ByVal TestEndTime As String, ByVal TestResult As Boolean) As String
            Dim results() As Object = Me.Invoke("UploadRfEquTestTime", New Object() {PlantCode, UnitSerialNumber, StageCode, EquipmentId, TestStage, TestStartTime, TestEndTime, TestResult})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRfEquTestTimeAsync(ByVal PlantCode As String, ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal EquipmentId As String, ByVal TestStage As String, ByVal TestStartTime As String, ByVal TestEndTime As String, ByVal TestResult As Boolean)
            Me.UploadRfEquTestTimeAsync(PlantCode, UnitSerialNumber, StageCode, EquipmentId, TestStage, TestStartTime, TestEndTime, TestResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRfEquTestTimeAsync(ByVal PlantCode As String, ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal EquipmentId As String, ByVal TestStage As String, ByVal TestStartTime As String, ByVal TestEndTime As String, ByVal TestResult As Boolean, ByVal userState As Object)
            If (Me.UploadRfEquTestTimeOperationCompleted Is Nothing) Then
                Me.UploadRfEquTestTimeOperationCompleted = AddressOf Me.OnUploadRfEquTestTimeOperationCompleted
            End If
            Me.InvokeAsync("UploadRfEquTestTime", New Object() {PlantCode, UnitSerialNumber, StageCode, EquipmentId, TestStage, TestStartTime, TestEndTime, TestResult}, Me.UploadRfEquTestTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRfEquTestTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRfEquTestTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRfEquTestTimeCompleted(Me, New UploadRfEquTestTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAutoStickLabelPN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAutoStickLabelPN(ByVal UnitSerialNumber As String, ByVal StageCode As String, <System.Xml.Serialization.XmlArrayItemAttribute("AutoStickLabelPN")> ByRef AutoStickLabelPNs() As clsAutoStickLabelPN) As String
            Dim results() As Object = Me.Invoke("GetAutoStickLabelPN", New Object() {UnitSerialNumber, StageCode, AutoStickLabelPNs})
            AutoStickLabelPNs = CType(results(1),clsAutoStickLabelPN())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAutoStickLabelPNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal AutoStickLabelPNs() As clsAutoStickLabelPN)
            Me.GetAutoStickLabelPNAsync(UnitSerialNumber, StageCode, AutoStickLabelPNs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAutoStickLabelPNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal AutoStickLabelPNs() As clsAutoStickLabelPN, ByVal userState As Object)
            If (Me.GetAutoStickLabelPNOperationCompleted Is Nothing) Then
                Me.GetAutoStickLabelPNOperationCompleted = AddressOf Me.OnGetAutoStickLabelPNOperationCompleted
            End If
            Me.InvokeAsync("GetAutoStickLabelPN", New Object() {UnitSerialNumber, StageCode, AutoStickLabelPNs}, Me.GetAutoStickLabelPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAutoStickLabelPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAutoStickLabelPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAutoStickLabelPNCompleted(Me, New GetAutoStickLabelPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RosaSwPoNackRuleCheck", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RosaSwPoNackRuleCheck(ByVal CustomerPO As String, ByVal CustomerPOLine As String, ByVal UsingInType As String, ByRef Message As String) As Integer
            Dim results() As Object = Me.Invoke("RosaSwPoNackRuleCheck", New Object() {CustomerPO, CustomerPOLine, UsingInType, Message})
            Message = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RosaSwPoNackRuleCheckAsync(ByVal CustomerPO As String, ByVal CustomerPOLine As String, ByVal UsingInType As String, ByVal Message As String)
            Me.RosaSwPoNackRuleCheckAsync(CustomerPO, CustomerPOLine, UsingInType, Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RosaSwPoNackRuleCheckAsync(ByVal CustomerPO As String, ByVal CustomerPOLine As String, ByVal UsingInType As String, ByVal Message As String, ByVal userState As Object)
            If (Me.RosaSwPoNackRuleCheckOperationCompleted Is Nothing) Then
                Me.RosaSwPoNackRuleCheckOperationCompleted = AddressOf Me.OnRosaSwPoNackRuleCheckOperationCompleted
            End If
            Me.InvokeAsync("RosaSwPoNackRuleCheck", New Object() {CustomerPO, CustomerPOLine, UsingInType, Message}, Me.RosaSwPoNackRuleCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnRosaSwPoNackRuleCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.RosaSwPoNackRuleCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RosaSwPoNackRuleCheckCompleted(Me, New RosaSwPoNackRuleCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateEDI860Signal", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEDI860Signal(ByVal WOMSCHANGENO As String, ByVal WOMSNO As String, ByVal PLANT As String, ByVal CUSTOMERPO As String, ByVal TIEGROUP As String, ByVal SIGNAL As String, ByRef MESSAGE As String, ByVal CUSTOMERSO As String) As String
            Dim results() As Object = Me.Invoke("UpdateEDI860Signal", New Object() {WOMSCHANGENO, WOMSNO, PLANT, CUSTOMERPO, TIEGROUP, SIGNAL, MESSAGE, CUSTOMERSO})
            MESSAGE = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEDI860SignalAsync(ByVal WOMSCHANGENO As String, ByVal WOMSNO As String, ByVal PLANT As String, ByVal CUSTOMERPO As String, ByVal TIEGROUP As String, ByVal SIGNAL As String, ByVal MESSAGE As String, ByVal CUSTOMERSO As String)
            Me.UpdateEDI860SignalAsync(WOMSCHANGENO, WOMSNO, PLANT, CUSTOMERPO, TIEGROUP, SIGNAL, MESSAGE, CUSTOMERSO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEDI860SignalAsync(ByVal WOMSCHANGENO As String, ByVal WOMSNO As String, ByVal PLANT As String, ByVal CUSTOMERPO As String, ByVal TIEGROUP As String, ByVal SIGNAL As String, ByVal MESSAGE As String, ByVal CUSTOMERSO As String, ByVal userState As Object)
            If (Me.UpdateEDI860SignalOperationCompleted Is Nothing) Then
                Me.UpdateEDI860SignalOperationCompleted = AddressOf Me.OnUpdateEDI860SignalOperationCompleted
            End If
            Me.InvokeAsync("UpdateEDI860Signal", New Object() {WOMSCHANGENO, WOMSNO, PLANT, CUSTOMERPO, TIEGROUP, SIGNAL, MESSAGE, CUSTOMERSO}, Me.UpdateEDI860SignalOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEDI860SignalOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEDI860SignalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEDI860SignalCompleted(Me, New UpdateEDI860SignalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnById", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnById(ByVal ID As String, ByVal StageCode As String, ByVal IDType As Integer, ByRef UnitSerialNumber As String) As String
            Dim results() As Object = Me.Invoke("GetUsnById", New Object() {ID, StageCode, IDType, UnitSerialNumber})
            UnitSerialNumber = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnByIdAsync(ByVal ID As String, ByVal StageCode As String, ByVal IDType As Integer, ByVal UnitSerialNumber As String)
            Me.GetUsnByIdAsync(ID, StageCode, IDType, UnitSerialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnByIdAsync(ByVal ID As String, ByVal StageCode As String, ByVal IDType As Integer, ByVal UnitSerialNumber As String, ByVal userState As Object)
            If (Me.GetUsnByIdOperationCompleted Is Nothing) Then
                Me.GetUsnByIdOperationCompleted = AddressOf Me.OnGetUsnByIdOperationCompleted
            End If
            Me.InvokeAsync("GetUsnById", New Object() {ID, StageCode, IDType, UnitSerialNumber}, Me.GetUsnByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnByIdCompleted(Me, New GetUsnByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadPcbLot", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadPcbLot(ByRef UnitSerialNumber As String, ByVal StageCode As String, ByVal Barcode As String, ByVal LotNo As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("UploadPcbLot", New Object() {UnitSerialNumber, StageCode, Barcode, LotNo, UserID})
            UnitSerialNumber = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadPcbLotAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Barcode As String, ByVal LotNo As String, ByVal UserID As String)
            Me.UploadPcbLotAsync(UnitSerialNumber, StageCode, Barcode, LotNo, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadPcbLotAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Barcode As String, ByVal LotNo As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.UploadPcbLotOperationCompleted Is Nothing) Then
                Me.UploadPcbLotOperationCompleted = AddressOf Me.OnUploadPcbLotOperationCompleted
            End If
            Me.InvokeAsync("UploadPcbLot", New Object() {UnitSerialNumber, StageCode, Barcode, LotNo, UserID}, Me.UploadPcbLotOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadPcbLotOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadPcbLotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadPcbLotCompleted(Me, New UploadPcbLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadEngravingResult", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadEngravingResult(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal UserID As String, ByVal EngravingResult As String) As String
            Dim results() As Object = Me.Invoke("UploadEngravingResult", New Object() {UnitSerialNumber, StageCode, UserID, EngravingResult})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadEngravingResultAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal UserID As String, ByVal EngravingResult As String)
            Me.UploadEngravingResultAsync(UnitSerialNumber, StageCode, UserID, EngravingResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadEngravingResultAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal UserID As String, ByVal EngravingResult As String, ByVal userState As Object)
            If (Me.UploadEngravingResultOperationCompleted Is Nothing) Then
                Me.UploadEngravingResultOperationCompleted = AddressOf Me.OnUploadEngravingResultOperationCompleted
            End If
            Me.InvokeAsync("UploadEngravingResult", New Object() {UnitSerialNumber, StageCode, UserID, EngravingResult}, Me.UploadEngravingResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadEngravingResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadEngravingResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadEngravingResultCompleted(Me, New UploadEngravingResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadAstroMoInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadAstroMoInfo(ByVal MO As String, ByVal StageCode As String, <System.Xml.Serialization.XmlArrayItemAttribute("InfoNameValue")> ByVal InfoNameValues() As clsInfoNameValue) As String
            Dim results() As Object = Me.Invoke("UploadAstroMoInfo", New Object() {MO, StageCode, InfoNameValues})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadAstroMoInfoAsync(ByVal MO As String, ByVal StageCode As String, ByVal InfoNameValues() As clsInfoNameValue)
            Me.UploadAstroMoInfoAsync(MO, StageCode, InfoNameValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadAstroMoInfoAsync(ByVal MO As String, ByVal StageCode As String, ByVal InfoNameValues() As clsInfoNameValue, ByVal userState As Object)
            If (Me.UploadAstroMoInfoOperationCompleted Is Nothing) Then
                Me.UploadAstroMoInfoOperationCompleted = AddressOf Me.OnUploadAstroMoInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadAstroMoInfo", New Object() {MO, StageCode, InfoNameValues}, Me.UploadAstroMoInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadAstroMoInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadAstroMoInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadAstroMoInfoCompleted(Me, New UploadAstroMoInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUpnInfoFromView", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUpnInfoFromView(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal UpnInfoType As String, <System.Xml.Serialization.XmlArrayItemAttribute("InfoNameValue")> ByRef InfoNameValues() As clsInfoNameValue) As String
            Dim results() As Object = Me.Invoke("GetUpnInfoFromView", New Object() {UnitPartNumber, StageCode, UpnInfoType, InfoNameValues})
            InfoNameValues = CType(results(1),clsInfoNameValue())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUpnInfoFromViewAsync(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal UpnInfoType As String, ByVal InfoNameValues() As clsInfoNameValue)
            Me.GetUpnInfoFromViewAsync(UnitPartNumber, StageCode, UpnInfoType, InfoNameValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUpnInfoFromViewAsync(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal UpnInfoType As String, ByVal InfoNameValues() As clsInfoNameValue, ByVal userState As Object)
            If (Me.GetUpnInfoFromViewOperationCompleted Is Nothing) Then
                Me.GetUpnInfoFromViewOperationCompleted = AddressOf Me.OnGetUpnInfoFromViewOperationCompleted
            End If
            Me.InvokeAsync("GetUpnInfoFromView", New Object() {UnitPartNumber, StageCode, UpnInfoType, InfoNameValues}, Me.GetUpnInfoFromViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUpnInfoFromViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUpnInfoFromViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUpnInfoFromViewCompleted(Me, New GetUpnInfoFromViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetKeyInfoFromView", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetKeyInfoFromView(ByVal Key As String, ByVal StageCode As String, ByVal KeyInfoType As String, <System.Xml.Serialization.XmlArrayItemAttribute("InfoNameValue")> ByRef InfoNameValues() As clsInfoNameValue) As String
            Dim results() As Object = Me.Invoke("GetKeyInfoFromView", New Object() {Key, StageCode, KeyInfoType, InfoNameValues})
            InfoNameValues = CType(results(1),clsInfoNameValue())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetKeyInfoFromViewAsync(ByVal Key As String, ByVal StageCode As String, ByVal KeyInfoType As String, ByVal InfoNameValues() As clsInfoNameValue)
            Me.GetKeyInfoFromViewAsync(Key, StageCode, KeyInfoType, InfoNameValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetKeyInfoFromViewAsync(ByVal Key As String, ByVal StageCode As String, ByVal KeyInfoType As String, ByVal InfoNameValues() As clsInfoNameValue, ByVal userState As Object)
            If (Me.GetKeyInfoFromViewOperationCompleted Is Nothing) Then
                Me.GetKeyInfoFromViewOperationCompleted = AddressOf Me.OnGetKeyInfoFromViewOperationCompleted
            End If
            Me.InvokeAsync("GetKeyInfoFromView", New Object() {Key, StageCode, KeyInfoType, InfoNameValues}, Me.GetKeyInfoFromViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetKeyInfoFromViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetKeyInfoFromViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetKeyInfoFromViewCompleted(Me, New GetKeyInfoFromViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRuninRackStatus", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRuninRackStatus(ByVal MAC As String, ByVal StageCode As String, ByVal RuninRackID As String) As String
            Dim results() As Object = Me.Invoke("UploadRuninRackStatus", New Object() {MAC, StageCode, RuninRackID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRuninRackStatusAsync(ByVal MAC As String, ByVal StageCode As String, ByVal RuninRackID As String)
            Me.UploadRuninRackStatusAsync(MAC, StageCode, RuninRackID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRuninRackStatusAsync(ByVal MAC As String, ByVal StageCode As String, ByVal RuninRackID As String, ByVal userState As Object)
            If (Me.UploadRuninRackStatusOperationCompleted Is Nothing) Then
                Me.UploadRuninRackStatusOperationCompleted = AddressOf Me.OnUploadRuninRackStatusOperationCompleted
            End If
            Me.InvokeAsync("UploadRuninRackStatus", New Object() {MAC, StageCode, RuninRackID}, Me.UploadRuninRackStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRuninRackStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRuninRackStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRuninRackStatusCompleted(Me, New UploadRuninRackStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateAndroidKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllocateAndroidKey(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ActionType As String, ByVal ReturnField As String, ByRef ResultValue As String) As String
            Dim results() As Object = Me.Invoke("AllocateAndroidKey", New Object() {UnitSerialNumber, StageCode, Workstation, ActionType, ReturnField, ResultValue})
            ResultValue = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllocateAndroidKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ActionType As String, ByVal ReturnField As String, ByVal ResultValue As String)
            Me.AllocateAndroidKeyAsync(UnitSerialNumber, StageCode, Workstation, ActionType, ReturnField, ResultValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllocateAndroidKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ActionType As String, ByVal ReturnField As String, ByVal ResultValue As String, ByVal userState As Object)
            If (Me.AllocateAndroidKeyOperationCompleted Is Nothing) Then
                Me.AllocateAndroidKeyOperationCompleted = AddressOf Me.OnAllocateAndroidKeyOperationCompleted
            End If
            Me.InvokeAsync("AllocateAndroidKey", New Object() {UnitSerialNumber, StageCode, Workstation, ActionType, ReturnField, ResultValue}, Me.AllocateAndroidKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllocateAndroidKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllocateAndroidKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllocateAndroidKeyCompleted(Me, New AllocateAndroidKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckEngravingBoradBarcLotNo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckEngravingBoradBarcLotNo(ByVal StageCode As String, ByVal Barcode As String, ByVal LotNo As String) As String
            Dim results() As Object = Me.Invoke("CheckEngravingBoradBarcLotNo", New Object() {StageCode, Barcode, LotNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckEngravingBoradBarcLotNoAsync(ByVal StageCode As String, ByVal Barcode As String, ByVal LotNo As String)
            Me.CheckEngravingBoradBarcLotNoAsync(StageCode, Barcode, LotNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckEngravingBoradBarcLotNoAsync(ByVal StageCode As String, ByVal Barcode As String, ByVal LotNo As String, ByVal userState As Object)
            If (Me.CheckEngravingBoradBarcLotNoOperationCompleted Is Nothing) Then
                Me.CheckEngravingBoradBarcLotNoOperationCompleted = AddressOf Me.OnCheckEngravingBoradBarcLotNoOperationCompleted
            End If
            Me.InvokeAsync("CheckEngravingBoradBarcLotNo", New Object() {StageCode, Barcode, LotNo}, Me.CheckEngravingBoradBarcLotNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckEngravingBoradBarcLotNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckEngravingBoradBarcLotNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckEngravingBoradBarcLotNoCompleted(Me, New CheckEngravingBoradBarcLotNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AllocateAwaitingUnitSnList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllocateAwaitingUnitSnList(ByVal MO As String, ByVal StageCode As String, ByVal MachineID As String, ByRef UnitSerialNumberList As String) As String
            Dim results() As Object = Me.Invoke("AllocateAwaitingUnitSnList", New Object() {MO, StageCode, MachineID, UnitSerialNumberList})
            UnitSerialNumberList = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllocateAwaitingUnitSnListAsync(ByVal MO As String, ByVal StageCode As String, ByVal MachineID As String, ByVal UnitSerialNumberList As String)
            Me.AllocateAwaitingUnitSnListAsync(MO, StageCode, MachineID, UnitSerialNumberList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllocateAwaitingUnitSnListAsync(ByVal MO As String, ByVal StageCode As String, ByVal MachineID As String, ByVal UnitSerialNumberList As String, ByVal userState As Object)
            If (Me.AllocateAwaitingUnitSnListOperationCompleted Is Nothing) Then
                Me.AllocateAwaitingUnitSnListOperationCompleted = AddressOf Me.OnAllocateAwaitingUnitSnListOperationCompleted
            End If
            Me.InvokeAsync("AllocateAwaitingUnitSnList", New Object() {MO, StageCode, MachineID, UnitSerialNumberList}, Me.AllocateAwaitingUnitSnListOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllocateAwaitingUnitSnListOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllocateAwaitingUnitSnListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllocateAwaitingUnitSnListCompleted(Me, New AllocateAwaitingUnitSnListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadCompleteEngravingUnitSn", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadCompleteEngravingUnitSn(ByVal UnitSerialNumberList As String, ByVal StageCode As String, ByVal MachineID As String) As String
            Dim results() As Object = Me.Invoke("UploadCompleteEngravingUnitSn", New Object() {UnitSerialNumberList, StageCode, MachineID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadCompleteEngravingUnitSnAsync(ByVal UnitSerialNumberList As String, ByVal StageCode As String, ByVal MachineID As String)
            Me.UploadCompleteEngravingUnitSnAsync(UnitSerialNumberList, StageCode, MachineID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadCompleteEngravingUnitSnAsync(ByVal UnitSerialNumberList As String, ByVal StageCode As String, ByVal MachineID As String, ByVal userState As Object)
            If (Me.UploadCompleteEngravingUnitSnOperationCompleted Is Nothing) Then
                Me.UploadCompleteEngravingUnitSnOperationCompleted = AddressOf Me.OnUploadCompleteEngravingUnitSnOperationCompleted
            End If
            Me.InvokeAsync("UploadCompleteEngravingUnitSn", New Object() {UnitSerialNumberList, StageCode, MachineID}, Me.UploadCompleteEngravingUnitSnOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadCompleteEngravingUnitSnOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadCompleteEngravingUnitSnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadCompleteEngravingUnitSnCompleted(Me, New UploadCompleteEngravingUnitSnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMoAndBoardInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMoAndBoardInfo(ByVal SheetNo As String, ByRef ClassMOAndBoardInfo As clsMOAndBoardInfo) As String
            Dim results() As Object = Me.Invoke("GetMoAndBoardInfo", New Object() {SheetNo, ClassMOAndBoardInfo})
            ClassMOAndBoardInfo = CType(results(1),clsMOAndBoardInfo)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMoAndBoardInfoAsync(ByVal SheetNo As String, ByVal ClassMOAndBoardInfo As clsMOAndBoardInfo)
            Me.GetMoAndBoardInfoAsync(SheetNo, ClassMOAndBoardInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMoAndBoardInfoAsync(ByVal SheetNo As String, ByVal ClassMOAndBoardInfo As clsMOAndBoardInfo, ByVal userState As Object)
            If (Me.GetMoAndBoardInfoOperationCompleted Is Nothing) Then
                Me.GetMoAndBoardInfoOperationCompleted = AddressOf Me.OnGetMoAndBoardInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMoAndBoardInfo", New Object() {SheetNo, ClassMOAndBoardInfo}, Me.GetMoAndBoardInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMoAndBoardInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMoAndBoardInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMoAndBoardInfoCompleted(Me, New GetMoAndBoardInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/Get2SLabelInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get2SLabelInfo(ByVal SheetNo As String, <System.Xml.Serialization.XmlElementAttribute("2DBarcode")> ByVal Item2DBarcode As String, ByRef Class2SLabelInfo As cls2SLabelInfo) As String
            Dim results() As Object = Me.Invoke("Get2SLabelInfo", New Object() {SheetNo, Item2DBarcode, Class2SLabelInfo})
            Class2SLabelInfo = CType(results(1),cls2SLabelInfo)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get2SLabelInfoAsync(ByVal SheetNo As String, ByVal Item2DBarcode As String, ByVal Class2SLabelInfo As cls2SLabelInfo)
            Me.Get2SLabelInfoAsync(SheetNo, Item2DBarcode, Class2SLabelInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get2SLabelInfoAsync(ByVal SheetNo As String, ByVal Item2DBarcode As String, ByVal Class2SLabelInfo As cls2SLabelInfo, ByVal userState As Object)
            If (Me.Get2SLabelInfoOperationCompleted Is Nothing) Then
                Me.Get2SLabelInfoOperationCompleted = AddressOf Me.OnGet2SLabelInfoOperationCompleted
            End If
            Me.InvokeAsync("Get2SLabelInfo", New Object() {SheetNo, Item2DBarcode, Class2SLabelInfo}, Me.Get2SLabelInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet2SLabelInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get2SLabelInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get2SLabelInfoCompleted(Me, New Get2SLabelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/Upload2SLabelInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Upload2SLabelInfo(ByVal SheetNo As String, <System.Xml.Serialization.XmlElementAttribute("2DBarcode")> ByVal Item2DBarcode As String, ByVal Brand As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("Upload2SLabelInfo", New Object() {SheetNo, Item2DBarcode, Brand, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Upload2SLabelInfoAsync(ByVal SheetNo As String, ByVal Item2DBarcode As String, ByVal Brand As String, ByVal UserID As String)
            Me.Upload2SLabelInfoAsync(SheetNo, Item2DBarcode, Brand, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Upload2SLabelInfoAsync(ByVal SheetNo As String, ByVal Item2DBarcode As String, ByVal Brand As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.Upload2SLabelInfoOperationCompleted Is Nothing) Then
                Me.Upload2SLabelInfoOperationCompleted = AddressOf Me.OnUpload2SLabelInfoOperationCompleted
            End If
            Me.InvokeAsync("Upload2SLabelInfo", New Object() {SheetNo, Item2DBarcode, Brand, UserID}, Me.Upload2SLabelInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpload2SLabelInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Upload2SLabelInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Upload2SLabelInfoCompleted(Me, New Upload2SLabelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnInformationList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnInformationList(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef InfoNameValues() As clsInfoNameValue) As String
            Dim results() As Object = Me.Invoke("GetUsnInformationList", New Object() {UnitSerialNumber, StageCode, InfoNameValues})
            InfoNameValues = CType(results(1),clsInfoNameValue())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnInformationListAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoNameValues() As clsInfoNameValue)
            Me.GetUsnInformationListAsync(UnitSerialNumber, StageCode, InfoNameValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnInformationListAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoNameValues() As clsInfoNameValue, ByVal userState As Object)
            If (Me.GetUsnInformationListOperationCompleted Is Nothing) Then
                Me.GetUsnInformationListOperationCompleted = AddressOf Me.OnGetUsnInformationListOperationCompleted
            End If
            Me.InvokeAsync("GetUsnInformationList", New Object() {UnitSerialNumber, StageCode, InfoNameValues}, Me.GetUsnInformationListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnInformationListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnInformationListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnInformationListCompleted(Me, New GetUsnInformationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTvDacDataList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTvDacDataList(ByVal UnitSerialNumber As String, ByVal StageCode As String, <System.Xml.Serialization.XmlArrayItemAttribute("TvDacDataItem")> ByRef TvDacDataArray() As clsTvDacData) As String
            Dim results() As Object = Me.Invoke("GetTvDacDataList", New Object() {UnitSerialNumber, StageCode, TvDacDataArray})
            TvDacDataArray = CType(results(1),clsTvDacData())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTvDacDataListAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TvDacDataArray() As clsTvDacData)
            Me.GetTvDacDataListAsync(UnitSerialNumber, StageCode, TvDacDataArray, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTvDacDataListAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TvDacDataArray() As clsTvDacData, ByVal userState As Object)
            If (Me.GetTvDacDataListOperationCompleted Is Nothing) Then
                Me.GetTvDacDataListOperationCompleted = AddressOf Me.OnGetTvDacDataListOperationCompleted
            End If
            Me.InvokeAsync("GetTvDacDataList", New Object() {UnitSerialNumber, StageCode, TvDacDataArray}, Me.GetTvDacDataListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTvDacDataListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTvDacDataListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTvDacDataListCompleted(Me, New GetTvDacDataListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/SwapUSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SwapUSN(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ViceUnitSN As String) As String
            Dim results() As Object = Me.Invoke("SwapUSN", New Object() {UnitSerialNumber, StageCode, ViceUnitSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SwapUSNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ViceUnitSN As String)
            Me.SwapUSNAsync(UnitSerialNumber, StageCode, ViceUnitSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SwapUSNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ViceUnitSN As String, ByVal userState As Object)
            If (Me.SwapUSNOperationCompleted Is Nothing) Then
                Me.SwapUSNOperationCompleted = AddressOf Me.OnSwapUSNOperationCompleted
            End If
            Me.InvokeAsync("SwapUSN", New Object() {UnitSerialNumber, StageCode, ViceUnitSN}, Me.SwapUSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnSwapUSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.SwapUSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SwapUSNCompleted(Me, New SwapUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEllaRackLoction", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEllaRackLoction(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByRef InfoNameValues() As clsInfoNameValue) As String
            Dim results() As Object = Me.Invoke("GetEllaRackLoction", New Object() {UnitSerialNumber, Line, StageCode, InfoNameValues})
            InfoNameValues = CType(results(1),clsInfoNameValue())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEllaRackLoctionAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal InfoNameValues() As clsInfoNameValue)
            Me.GetEllaRackLoctionAsync(UnitSerialNumber, Line, StageCode, InfoNameValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEllaRackLoctionAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal InfoNameValues() As clsInfoNameValue, ByVal userState As Object)
            If (Me.GetEllaRackLoctionOperationCompleted Is Nothing) Then
                Me.GetEllaRackLoctionOperationCompleted = AddressOf Me.OnGetEllaRackLoctionOperationCompleted
            End If
            Me.InvokeAsync("GetEllaRackLoction", New Object() {UnitSerialNumber, Line, StageCode, InfoNameValues}, Me.GetEllaRackLoctionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEllaRackLoctionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEllaRackLoctionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEllaRackLoctionCompleted(Me, New GetEllaRackLoctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadOCRInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadOCRInfo(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal CustomerPN As String, ByVal LotNo As String, ByVal VendorCode As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("UploadOCRInfo", New Object() {UnitSerialNumber, StageCode, CustomerPN, LotNo, VendorCode, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadOCRInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal CustomerPN As String, ByVal LotNo As String, ByVal VendorCode As String, ByVal UserID As String)
            Me.UploadOCRInfoAsync(UnitSerialNumber, StageCode, CustomerPN, LotNo, VendorCode, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadOCRInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal CustomerPN As String, ByVal LotNo As String, ByVal VendorCode As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.UploadOCRInfoOperationCompleted Is Nothing) Then
                Me.UploadOCRInfoOperationCompleted = AddressOf Me.OnUploadOCRInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadOCRInfo", New Object() {UnitSerialNumber, StageCode, CustomerPN, LotNo, VendorCode, UserID}, Me.UploadOCRInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadOCRInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadOCRInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadOCRInfoCompleted(Me, New UploadOCRInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetBomPnDescription", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBomPnDescription(ByVal TopPN As String, ByVal Level As String) As clsBomPnDescription()
            Dim results() As Object = Me.Invoke("GetBomPnDescription", New Object() {TopPN, Level})
            Return CType(results(0),clsBomPnDescription())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBomPnDescriptionAsync(ByVal TopPN As String, ByVal Level As String)
            Me.GetBomPnDescriptionAsync(TopPN, Level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBomPnDescriptionAsync(ByVal TopPN As String, ByVal Level As String, ByVal userState As Object)
            If (Me.GetBomPnDescriptionOperationCompleted Is Nothing) Then
                Me.GetBomPnDescriptionOperationCompleted = AddressOf Me.OnGetBomPnDescriptionOperationCompleted
            End If
            Me.InvokeAsync("GetBomPnDescription", New Object() {TopPN, Level}, Me.GetBomPnDescriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBomPnDescriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBomPnDescriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBomPnDescriptionCompleted(Me, New GetBomPnDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadBomTransferUPN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadBomTransferUPN(ByVal UnitPartNumber As String) As String
            Dim results() As Object = Me.Invoke("UploadBomTransferUPN", New Object() {UnitPartNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadBomTransferUPNAsync(ByVal UnitPartNumber As String)
            Me.UploadBomTransferUPNAsync(UnitPartNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadBomTransferUPNAsync(ByVal UnitPartNumber As String, ByVal userState As Object)
            If (Me.UploadBomTransferUPNOperationCompleted Is Nothing) Then
                Me.UploadBomTransferUPNOperationCompleted = AddressOf Me.OnUploadBomTransferUPNOperationCompleted
            End If
            Me.InvokeAsync("UploadBomTransferUPN", New Object() {UnitPartNumber}, Me.UploadBomTransferUPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadBomTransferUPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadBomTransferUPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadBomTransferUPNCompleted(Me, New UploadBomTransferUPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RecordLogMessage", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecordLogMessage(ByVal ProcessID As String, ByVal FileName As String, ByVal DocumentNumber As String, ByVal Status As String) As String
            Dim results() As Object = Me.Invoke("RecordLogMessage", New Object() {ProcessID, FileName, DocumentNumber, Status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecordLogMessageAsync(ByVal ProcessID As String, ByVal FileName As String, ByVal DocumentNumber As String, ByVal Status As String)
            Me.RecordLogMessageAsync(ProcessID, FileName, DocumentNumber, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecordLogMessageAsync(ByVal ProcessID As String, ByVal FileName As String, ByVal DocumentNumber As String, ByVal Status As String, ByVal userState As Object)
            If (Me.RecordLogMessageOperationCompleted Is Nothing) Then
                Me.RecordLogMessageOperationCompleted = AddressOf Me.OnRecordLogMessageOperationCompleted
            End If
            Me.InvokeAsync("RecordLogMessage", New Object() {ProcessID, FileName, DocumentNumber, Status}, Me.RecordLogMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecordLogMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecordLogMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecordLogMessageCompleted(Me, New RecordLogMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RecordESOPInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecordESOPInfo(ByVal ProcessID As String, ByVal FileName As String, ByVal DocumentNumber As String, ByVal Model As String, ByVal Stage As String, <System.Xml.Serialization.XmlElementAttribute("MappingRelation")> ByVal MappingRelation() As String) As String
            Dim results() As Object = Me.Invoke("RecordESOPInfo", New Object() {ProcessID, FileName, DocumentNumber, Model, Stage, MappingRelation})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecordESOPInfoAsync(ByVal ProcessID As String, ByVal FileName As String, ByVal DocumentNumber As String, ByVal Model As String, ByVal Stage As String, ByVal MappingRelation() As String)
            Me.RecordESOPInfoAsync(ProcessID, FileName, DocumentNumber, Model, Stage, MappingRelation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecordESOPInfoAsync(ByVal ProcessID As String, ByVal FileName As String, ByVal DocumentNumber As String, ByVal Model As String, ByVal Stage As String, ByVal MappingRelation() As String, ByVal userState As Object)
            If (Me.RecordESOPInfoOperationCompleted Is Nothing) Then
                Me.RecordESOPInfoOperationCompleted = AddressOf Me.OnRecordESOPInfoOperationCompleted
            End If
            Me.InvokeAsync("RecordESOPInfo", New Object() {ProcessID, FileName, DocumentNumber, Model, Stage, MappingRelation}, Me.RecordESOPInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecordESOPInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecordESOPInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecordESOPInfoCompleted(Me, New RecordESOPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/LinkUsnWorkingPalletId", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LinkUsnWorkingPalletId(ByVal UnitSerialNumber As String, ByVal WorkingPalletID As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("LinkUsnWorkingPalletId", New Object() {UnitSerialNumber, WorkingPalletID, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LinkUsnWorkingPalletIdAsync(ByVal UnitSerialNumber As String, ByVal WorkingPalletID As String, ByVal StageCode As String)
            Me.LinkUsnWorkingPalletIdAsync(UnitSerialNumber, WorkingPalletID, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LinkUsnWorkingPalletIdAsync(ByVal UnitSerialNumber As String, ByVal WorkingPalletID As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.LinkUsnWorkingPalletIdOperationCompleted Is Nothing) Then
                Me.LinkUsnWorkingPalletIdOperationCompleted = AddressOf Me.OnLinkUsnWorkingPalletIdOperationCompleted
            End If
            Me.InvokeAsync("LinkUsnWorkingPalletId", New Object() {UnitSerialNumber, WorkingPalletID, StageCode}, Me.LinkUsnWorkingPalletIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnLinkUsnWorkingPalletIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.LinkUsnWorkingPalletIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LinkUsnWorkingPalletIdCompleted(Me, New LinkUsnWorkingPalletIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetLinkUSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLinkUSN(ByVal UnitSerialNumber As String, ByRef ResultMessage As String) As String()
            Dim results() As Object = Me.Invoke("GetLinkUSN", New Object() {UnitSerialNumber, ResultMessage})
            ResultMessage = CType(results(1),String)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLinkUSNAsync(ByVal UnitSerialNumber As String, ByVal ResultMessage As String)
            Me.GetLinkUSNAsync(UnitSerialNumber, ResultMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLinkUSNAsync(ByVal UnitSerialNumber As String, ByVal ResultMessage As String, ByVal userState As Object)
            If (Me.GetLinkUSNOperationCompleted Is Nothing) Then
                Me.GetLinkUSNOperationCompleted = AddressOf Me.OnGetLinkUSNOperationCompleted
            End If
            Me.InvokeAsync("GetLinkUSN", New Object() {UnitSerialNumber, ResultMessage}, Me.GetLinkUSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLinkUSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLinkUSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLinkUSNCompleted(Me, New GetLinkUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/BarcodeValidationWithGivenCategory", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BarcodeValidationWithGivenCategory(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentSerialNumber As String, ByVal CheckUsedCategory As String, ByVal Line As String, ByVal Workstation As String, ByVal UserID As String, ByVal ValidateCategory As String) As String
            Dim results() As Object = Me.Invoke("BarcodeValidationWithGivenCategory", New Object() {UnitSerialNumber, StageCode, ComponentSerialNumber, CheckUsedCategory, Line, Workstation, UserID, ValidateCategory})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BarcodeValidationWithGivenCategoryAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentSerialNumber As String, ByVal CheckUsedCategory As String, ByVal Line As String, ByVal Workstation As String, ByVal UserID As String, ByVal ValidateCategory As String)
            Me.BarcodeValidationWithGivenCategoryAsync(UnitSerialNumber, StageCode, ComponentSerialNumber, CheckUsedCategory, Line, Workstation, UserID, ValidateCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BarcodeValidationWithGivenCategoryAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentSerialNumber As String, ByVal CheckUsedCategory As String, ByVal Line As String, ByVal Workstation As String, ByVal UserID As String, ByVal ValidateCategory As String, ByVal userState As Object)
            If (Me.BarcodeValidationWithGivenCategoryOperationCompleted Is Nothing) Then
                Me.BarcodeValidationWithGivenCategoryOperationCompleted = AddressOf Me.OnBarcodeValidationWithGivenCategoryOperationCompleted
            End If
            Me.InvokeAsync("BarcodeValidationWithGivenCategory", New Object() {UnitSerialNumber, StageCode, ComponentSerialNumber, CheckUsedCategory, Line, Workstation, UserID, ValidateCategory}, Me.BarcodeValidationWithGivenCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnBarcodeValidationWithGivenCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.BarcodeValidationWithGivenCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BarcodeValidationWithGivenCategoryCompleted(Me, New BarcodeValidationWithGivenCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/SetMoOnLine", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetMoOnLine(ByVal MO As String, ByVal Line As String, ByVal UserID As String, ByVal CheckDipCpnFlag As Boolean, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("SetMoOnLine", New Object() {MO, Line, UserID, CheckDipCpnFlag, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetMoOnLineAsync(ByVal MO As String, ByVal Line As String, ByVal UserID As String, ByVal CheckDipCpnFlag As Boolean, ByVal StageCode As String)
            Me.SetMoOnLineAsync(MO, Line, UserID, CheckDipCpnFlag, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMoOnLineAsync(ByVal MO As String, ByVal Line As String, ByVal UserID As String, ByVal CheckDipCpnFlag As Boolean, ByVal StageCode As String, ByVal userState As Object)
            If (Me.SetMoOnLineOperationCompleted Is Nothing) Then
                Me.SetMoOnLineOperationCompleted = AddressOf Me.OnSetMoOnLineOperationCompleted
            End If
            Me.InvokeAsync("SetMoOnLine", New Object() {MO, Line, UserID, CheckDipCpnFlag, StageCode}, Me.SetMoOnLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMoOnLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMoOnLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMoOnLineCompleted(Me, New SetMoOnLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/LinkWorkingPalletCSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LinkWorkingPalletCSN(ByVal MO As String, ByVal WorkingPalletID As String, ByVal ComponentSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("LinkWorkingPalletCSN", New Object() {MO, WorkingPalletID, ComponentSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LinkWorkingPalletCSNAsync(ByVal MO As String, ByVal WorkingPalletID As String, ByVal ComponentSerialNumber As String, ByVal StageCode As String)
            Me.LinkWorkingPalletCSNAsync(MO, WorkingPalletID, ComponentSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LinkWorkingPalletCSNAsync(ByVal MO As String, ByVal WorkingPalletID As String, ByVal ComponentSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.LinkWorkingPalletCSNOperationCompleted Is Nothing) Then
                Me.LinkWorkingPalletCSNOperationCompleted = AddressOf Me.OnLinkWorkingPalletCSNOperationCompleted
            End If
            Me.InvokeAsync("LinkWorkingPalletCSN", New Object() {MO, WorkingPalletID, ComponentSerialNumber, StageCode}, Me.LinkWorkingPalletCSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnLinkWorkingPalletCSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.LinkWorkingPalletCSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LinkWorkingPalletCSNCompleted(Me, New LinkWorkingPalletCSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/SwapPalletIDUSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SwapPalletIDUSN(ByVal WorkingPalletID As String, ByVal UnitSerialNumber As String, ByVal UserID As String, ByVal WorkStation As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("SwapPalletIDUSN", New Object() {WorkingPalletID, UnitSerialNumber, UserID, WorkStation, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SwapPalletIDUSNAsync(ByVal WorkingPalletID As String, ByVal UnitSerialNumber As String, ByVal UserID As String, ByVal WorkStation As String, ByVal StageCode As String)
            Me.SwapPalletIDUSNAsync(WorkingPalletID, UnitSerialNumber, UserID, WorkStation, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SwapPalletIDUSNAsync(ByVal WorkingPalletID As String, ByVal UnitSerialNumber As String, ByVal UserID As String, ByVal WorkStation As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.SwapPalletIDUSNOperationCompleted Is Nothing) Then
                Me.SwapPalletIDUSNOperationCompleted = AddressOf Me.OnSwapPalletIDUSNOperationCompleted
            End If
            Me.InvokeAsync("SwapPalletIDUSN", New Object() {WorkingPalletID, UnitSerialNumber, UserID, WorkStation, StageCode}, Me.SwapPalletIDUSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnSwapPalletIDUSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.SwapPalletIDUSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SwapPalletIDUSNCompleted(Me, New SwapPalletIDUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/SwapWorkingPallet", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SwapWorkingPallet(ByVal WorkingPalletID1 As String, ByVal WorkingPalletID2 As String, ByVal StageCode As String, ByVal UserID As String, ByVal WorkStation As String, ByVal CheckMOFlag As Boolean) As String
            Dim results() As Object = Me.Invoke("SwapWorkingPallet", New Object() {WorkingPalletID1, WorkingPalletID2, StageCode, UserID, WorkStation, CheckMOFlag})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SwapWorkingPalletAsync(ByVal WorkingPalletID1 As String, ByVal WorkingPalletID2 As String, ByVal StageCode As String, ByVal UserID As String, ByVal WorkStation As String, ByVal CheckMOFlag As Boolean)
            Me.SwapWorkingPalletAsync(WorkingPalletID1, WorkingPalletID2, StageCode, UserID, WorkStation, CheckMOFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SwapWorkingPalletAsync(ByVal WorkingPalletID1 As String, ByVal WorkingPalletID2 As String, ByVal StageCode As String, ByVal UserID As String, ByVal WorkStation As String, ByVal CheckMOFlag As Boolean, ByVal userState As Object)
            If (Me.SwapWorkingPalletOperationCompleted Is Nothing) Then
                Me.SwapWorkingPalletOperationCompleted = AddressOf Me.OnSwapWorkingPalletOperationCompleted
            End If
            Me.InvokeAsync("SwapWorkingPallet", New Object() {WorkingPalletID1, WorkingPalletID2, StageCode, UserID, WorkStation, CheckMOFlag}, Me.SwapWorkingPalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnSwapWorkingPalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.SwapWorkingPalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SwapWorkingPalletCompleted(Me, New SwapWorkingPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UnlinkWorkingPallet", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnlinkWorkingPallet(ByVal WorkingPalletID As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("UnlinkWorkingPallet", New Object() {WorkingPalletID, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnlinkWorkingPalletAsync(ByVal WorkingPalletID As String, ByVal StageCode As String)
            Me.UnlinkWorkingPalletAsync(WorkingPalletID, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnlinkWorkingPalletAsync(ByVal WorkingPalletID As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.UnlinkWorkingPalletOperationCompleted Is Nothing) Then
                Me.UnlinkWorkingPalletOperationCompleted = AddressOf Me.OnUnlinkWorkingPalletOperationCompleted
            End If
            Me.InvokeAsync("UnlinkWorkingPallet", New Object() {WorkingPalletID, StageCode}, Me.UnlinkWorkingPalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnlinkWorkingPalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnlinkWorkingPalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnlinkWorkingPalletCompleted(Me, New UnlinkWorkingPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/RequestLabelPrint", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequestLabelPrint(ByVal UnitSerialNumber As String, ByVal LabelType As Integer, ByVal LabelCount As Integer, ByVal CartonLevel As Integer, ByVal StageCode As String, ByVal PrintWorkStation As String) As String
            Dim results() As Object = Me.Invoke("RequestLabelPrint", New Object() {UnitSerialNumber, LabelType, LabelCount, CartonLevel, StageCode, PrintWorkStation})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequestLabelPrintAsync(ByVal UnitSerialNumber As String, ByVal LabelType As Integer, ByVal LabelCount As Integer, ByVal CartonLevel As Integer, ByVal StageCode As String, ByVal PrintWorkStation As String)
            Me.RequestLabelPrintAsync(UnitSerialNumber, LabelType, LabelCount, CartonLevel, StageCode, PrintWorkStation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestLabelPrintAsync(ByVal UnitSerialNumber As String, ByVal LabelType As Integer, ByVal LabelCount As Integer, ByVal CartonLevel As Integer, ByVal StageCode As String, ByVal PrintWorkStation As String, ByVal userState As Object)
            If (Me.RequestLabelPrintOperationCompleted Is Nothing) Then
                Me.RequestLabelPrintOperationCompleted = AddressOf Me.OnRequestLabelPrintOperationCompleted
            End If
            Me.InvokeAsync("RequestLabelPrint", New Object() {UnitSerialNumber, LabelType, LabelCount, CartonLevel, StageCode, PrintWorkStation}, Me.RequestLabelPrintOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequestLabelPrintOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequestLabelPrintCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequestLabelPrintCompleted(Me, New RequestLabelPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/IsCPNComplete", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsCPNComplete(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal SequenceControl As Boolean) As String
            Dim results() As Object = Me.Invoke("IsCPNComplete", New Object() {UnitSerialNumber, StageCode, SequenceControl})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsCPNCompleteAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal SequenceControl As Boolean)
            Me.IsCPNCompleteAsync(UnitSerialNumber, StageCode, SequenceControl, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsCPNCompleteAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal SequenceControl As Boolean, ByVal userState As Object)
            If (Me.IsCPNCompleteOperationCompleted Is Nothing) Then
                Me.IsCPNCompleteOperationCompleted = AddressOf Me.OnIsCPNCompleteOperationCompleted
            End If
            Me.InvokeAsync("IsCPNComplete", New Object() {UnitSerialNumber, StageCode, SequenceControl}, Me.IsCPNCompleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsCPNCompleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsCPNCompleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsCPNCompleteCompleted(Me, New IsCPNCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/AssignUserGroupCode", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignUserGroupCode(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("AssignUserGroupCode", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignUserGroupCodeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.AssignUserGroupCodeAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignUserGroupCodeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.AssignUserGroupCodeOperationCompleted Is Nothing) Then
                Me.AssignUserGroupCodeOperationCompleted = AddressOf Me.OnAssignUserGroupCodeOperationCompleted
            End If
            Me.InvokeAsync("AssignUserGroupCode", New Object() {UnitSerialNumber, StageCode}, Me.AssignUserGroupCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignUserGroupCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignUserGroupCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignUserGroupCodeCompleted(Me, New AssignUserGroupCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAndProcessKtlOutEvent", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAndProcessKtlOutEvent(ByVal IP As String, <System.Xml.Serialization.XmlElementAttribute("ReturnKtlOutEvent")> ByRef ReturnKtlOutEvent() As clsKtlOutEvent) As String
            Dim results() As Object = Me.Invoke("GetAndProcessKtlOutEvent", New Object() {IP, ReturnKtlOutEvent})
            ReturnKtlOutEvent = CType(results(1),clsKtlOutEvent())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAndProcessKtlOutEventAsync(ByVal IP As String, ByVal ReturnKtlOutEvent() As clsKtlOutEvent)
            Me.GetAndProcessKtlOutEventAsync(IP, ReturnKtlOutEvent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAndProcessKtlOutEventAsync(ByVal IP As String, ByVal ReturnKtlOutEvent() As clsKtlOutEvent, ByVal userState As Object)
            If (Me.GetAndProcessKtlOutEventOperationCompleted Is Nothing) Then
                Me.GetAndProcessKtlOutEventOperationCompleted = AddressOf Me.OnGetAndProcessKtlOutEventOperationCompleted
            End If
            Me.InvokeAsync("GetAndProcessKtlOutEvent", New Object() {IP, ReturnKtlOutEvent}, Me.GetAndProcessKtlOutEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAndProcessKtlOutEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAndProcessKtlOutEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAndProcessKtlOutEventCompleted(Me, New GetAndProcessKtlOutEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetDynamicData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDynamicData(ByVal DynQueryID As String, ByVal CriteriaName As String, ByVal CriteriaValue As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDynamicData", New Object() {DynQueryID, CriteriaName, CriteriaValue})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDynamicDataAsync(ByVal DynQueryID As String, ByVal CriteriaName As String, ByVal CriteriaValue As String)
            Me.GetDynamicDataAsync(DynQueryID, CriteriaName, CriteriaValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDynamicDataAsync(ByVal DynQueryID As String, ByVal CriteriaName As String, ByVal CriteriaValue As String, ByVal userState As Object)
            If (Me.GetDynamicDataOperationCompleted Is Nothing) Then
                Me.GetDynamicDataOperationCompleted = AddressOf Me.OnGetDynamicDataOperationCompleted
            End If
            Me.InvokeAsync("GetDynamicData", New Object() {DynQueryID, CriteriaName, CriteriaValue}, Me.GetDynamicDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDynamicDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDynamicDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDynamicDataCompleted(Me, New GetDynamicDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckRoute", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckRoute(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("CheckRoute", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckRouteAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.CheckRouteAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckRouteAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.CheckRouteOperationCompleted Is Nothing) Then
                Me.CheckRouteOperationCompleted = AddressOf Me.OnCheckRouteOperationCompleted
            End If
            Me.InvokeAsync("CheckRoute", New Object() {UnitSerialNumber, StageCode}, Me.CheckRouteOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckRouteOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckRouteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckRouteCompleted(Me, New CheckRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/Complete", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Complete(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, <System.Xml.Serialization.XmlArrayItemAttribute("TrnData")> ByVal TrnDatas() As String) As String
            Dim results() As Object = Me.Invoke("Complete", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompleteAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnDatas() As String)
            Me.CompleteAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompleteAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnDatas() As String, ByVal userState As Object)
            If (Me.CompleteOperationCompleted Is Nothing) Then
                Me.CompleteOperationCompleted = AddressOf Me.OnCompleteOperationCompleted
            End If
            Me.InvokeAsync("Complete", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas}, Me.CompleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompleteCompleted(Me, New CompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CompleteWithSingleTrnData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompleteWithSingleTrnData(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnData As String) As String
            Dim results() As Object = Me.Invoke("CompleteWithSingleTrnData", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompleteWithSingleTrnDataAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnData As String)
            Me.CompleteWithSingleTrnDataAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompleteWithSingleTrnDataAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnData As String, ByVal userState As Object)
            If (Me.CompleteWithSingleTrnDataOperationCompleted Is Nothing) Then
                Me.CompleteWithSingleTrnDataOperationCompleted = AddressOf Me.OnCompleteWithSingleTrnDataOperationCompleted
            End If
            Me.InvokeAsync("CompleteWithSingleTrnData", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnData}, Me.CompleteWithSingleTrnDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompleteWithSingleTrnDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteWithSingleTrnDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompleteWithSingleTrnDataCompleted(Me, New CompleteWithSingleTrnDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CompleteWithDefectRemark", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompleteWithDefectRemark(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, <System.Xml.Serialization.XmlArrayItemAttribute("TrnData")> ByVal TrnDatas() As String, ByVal DefectRmark As String) As String
            Dim results() As Object = Me.Invoke("CompleteWithDefectRemark", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, DefectRmark})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompleteWithDefectRemarkAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnDatas() As String, ByVal DefectRmark As String)
            Me.CompleteWithDefectRemarkAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, DefectRmark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompleteWithDefectRemarkAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnDatas() As String, ByVal DefectRmark As String, ByVal userState As Object)
            If (Me.CompleteWithDefectRemarkOperationCompleted Is Nothing) Then
                Me.CompleteWithDefectRemarkOperationCompleted = AddressOf Me.OnCompleteWithDefectRemarkOperationCompleted
            End If
            Me.InvokeAsync("CompleteWithDefectRemark", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, DefectRmark}, Me.CompleteWithDefectRemarkOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompleteWithDefectRemarkOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteWithDefectRemarkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompleteWithDefectRemarkCompleted(Me, New CompleteWithDefectRemarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CompleteWithErrorDescription", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompleteWithErrorDescription(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, <System.Xml.Serialization.XmlArrayItemAttribute("TrnData")> ByVal TrnDatas() As String, ByVal ErrorDescription As String) As String
            Dim results() As Object = Me.Invoke("CompleteWithErrorDescription", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, ErrorDescription})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompleteWithErrorDescriptionAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnDatas() As String, ByVal ErrorDescription As String)
            Me.CompleteWithErrorDescriptionAsync(UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, ErrorDescription, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompleteWithErrorDescriptionAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal StationName As String, ByVal EmployeeID As String, ByVal Pass As Boolean, ByVal TrnDatas() As String, ByVal ErrorDescription As String, ByVal userState As Object)
            If (Me.CompleteWithErrorDescriptionOperationCompleted Is Nothing) Then
                Me.CompleteWithErrorDescriptionOperationCompleted = AddressOf Me.OnCompleteWithErrorDescriptionOperationCompleted
            End If
            Me.InvokeAsync("CompleteWithErrorDescription", New Object() {UnitSerialNumber, Line, StageCode, StationName, EmployeeID, Pass, TrnDatas, ErrorDescription}, Me.CompleteWithErrorDescriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompleteWithErrorDescriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteWithErrorDescriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompleteWithErrorDescriptionCompleted(Me, New CompleteWithErrorDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVADC", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVADC(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Type1 As Integer, ByVal Type2 As Integer, ByVal ValueR As Integer, ByVal ValueG As Integer, ByVal ValueB As Integer) As String
            Dim results() As Object = Me.Invoke("UploadTVADC", New Object() {SerialNo, Line, StageCode, Workstation, Type1, Type2, ValueR, ValueG, ValueB})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVADCAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Type1 As Integer, ByVal Type2 As Integer, ByVal ValueR As Integer, ByVal ValueG As Integer, ByVal ValueB As Integer)
            Me.UploadTVADCAsync(SerialNo, Line, StageCode, Workstation, Type1, Type2, ValueR, ValueG, ValueB, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVADCAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Type1 As Integer, ByVal Type2 As Integer, ByVal ValueR As Integer, ByVal ValueG As Integer, ByVal ValueB As Integer, ByVal userState As Object)
            If (Me.UploadTVADCOperationCompleted Is Nothing) Then
                Me.UploadTVADCOperationCompleted = AddressOf Me.OnUploadTVADCOperationCompleted
            End If
            Me.InvokeAsync("UploadTVADC", New Object() {SerialNo, Line, StageCode, Workstation, Type1, Type2, ValueR, ValueG, ValueB}, Me.UploadTVADCOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVADCOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVADCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVADCCompleted(Me, New UploadTVADCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVDAC", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVDAC(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal RCut As Integer, ByVal GCut As Integer, ByVal BCut As Integer, ByVal RGain As Integer, ByVal GGain As Integer, ByVal BGain As Integer) As String
            Dim results() As Object = Me.Invoke("UploadTVDAC", New Object() {SerialNo, Line, StageCode, Workstation, ColorType, RCut, GCut, BCut, RGain, GGain, BGain})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVDACAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal RCut As Integer, ByVal GCut As Integer, ByVal BCut As Integer, ByVal RGain As Integer, ByVal GGain As Integer, ByVal BGain As Integer)
            Me.UploadTVDACAsync(SerialNo, Line, StageCode, Workstation, ColorType, RCut, GCut, BCut, RGain, GGain, BGain, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVDACAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal RCut As Integer, ByVal GCut As Integer, ByVal BCut As Integer, ByVal RGain As Integer, ByVal GGain As Integer, ByVal BGain As Integer, ByVal userState As Object)
            If (Me.UploadTVDACOperationCompleted Is Nothing) Then
                Me.UploadTVDACOperationCompleted = AddressOf Me.OnUploadTVDACOperationCompleted
            End If
            Me.InvokeAsync("UploadTVDAC", New Object() {SerialNo, Line, StageCode, Workstation, ColorType, RCut, GCut, BCut, RGain, GGain, BGain}, Me.UploadTVDACOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVDACOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVDACCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVDACCompleted(Me, New UploadTVDACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVQC", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVQC(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal) As String
            Dim results() As Object = Me.Invoke("UploadTVQC", New Object() {SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVQCAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal)
            Me.UploadTVQCAsync(SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVQCAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal, ByVal userState As Object)
            If (Me.UploadTVQCOperationCompleted Is Nothing) Then
                Me.UploadTVQCOperationCompleted = AddressOf Me.OnUploadTVQCOperationCompleted
            End If
            Me.InvokeAsync("UploadTVQC", New Object() {SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue}, Me.UploadTVQCOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVQCOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVQCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVQCCompleted(Me, New UploadTVQCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVQCwithWhiteBalanceFlag", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVQCwithWhiteBalanceFlag(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal, ByVal IsWhiteBalance As Boolean) As String
            Dim results() As Object = Me.Invoke("UploadTVQCwithWhiteBalanceFlag", New Object() {SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVQCwithWhiteBalanceFlagAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal, ByVal IsWhiteBalance As Boolean)
            Me.UploadTVQCwithWhiteBalanceFlagAsync(SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVQCwithWhiteBalanceFlagAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal, ByVal IsWhiteBalance As Boolean, ByVal userState As Object)
            If (Me.UploadTVQCwithWhiteBalanceFlagOperationCompleted Is Nothing) Then
                Me.UploadTVQCwithWhiteBalanceFlagOperationCompleted = AddressOf Me.OnUploadTVQCwithWhiteBalanceFlagOperationCompleted
            End If
            Me.InvokeAsync("UploadTVQCwithWhiteBalanceFlag", New Object() {SerialNo, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance}, Me.UploadTVQCwithWhiteBalanceFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVQCwithWhiteBalanceFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVQCwithWhiteBalanceFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVQCwithWhiteBalanceFlagCompleted(Me, New UploadTVQCwithWhiteBalanceFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorWhiteBalance", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadMonitorWhiteBalance(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal, ByVal IsWhiteBalance As Boolean, ByVal Dark As Decimal, ByVal Contrast As Integer) As String
            Dim results() As Object = Me.Invoke("UploadMonitorWhiteBalance", New Object() {UnitSerialNumber, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance, Dark, Contrast})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorWhiteBalanceAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal, ByVal IsWhiteBalance As Boolean, ByVal Dark As Decimal, ByVal Contrast As Integer)
            Me.UploadMonitorWhiteBalanceAsync(UnitSerialNumber, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance, Dark, Contrast, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorWhiteBalanceAsync(ByVal UnitSerialNumber As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal ColorType As Integer, ByVal IRE As Integer, ByVal XCoordinate As Integer, ByVal YCoordinate As Integer, ByVal LuminanceValue As Decimal, ByVal IsWhiteBalance As Boolean, ByVal Dark As Decimal, ByVal Contrast As Integer, ByVal userState As Object)
            If (Me.UploadMonitorWhiteBalanceOperationCompleted Is Nothing) Then
                Me.UploadMonitorWhiteBalanceOperationCompleted = AddressOf Me.OnUploadMonitorWhiteBalanceOperationCompleted
            End If
            Me.InvokeAsync("UploadMonitorWhiteBalance", New Object() {UnitSerialNumber, Line, StageCode, Workstation, ColorType, IRE, XCoordinate, YCoordinate, LuminanceValue, IsWhiteBalance, Dark, Contrast}, Me.UploadMonitorWhiteBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadMonitorWhiteBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadMonitorWhiteBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadMonitorWhiteBalanceCompleted(Me, New UploadMonitorWhiteBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVPowerRange", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVPowerRange(ByVal OPID As String, ByVal SerialNo As String, ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal Type As Integer, ByVal SubType As Integer, ByVal TestItem As String, ByVal Voltage As String, ByVal Current As String, ByVal PowerWatt As String, ByVal PowerFactor As String, ByVal Result As String, ByVal TestItemIndex As Integer) As String
            Dim results() As Object = Me.Invoke("UploadTVPowerRange", New Object() {OPID, SerialNo, Line, Stage, Workstation, Type, SubType, TestItem, Voltage, Current, PowerWatt, PowerFactor, Result, TestItemIndex})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVPowerRangeAsync(ByVal OPID As String, ByVal SerialNo As String, ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal Type As Integer, ByVal SubType As Integer, ByVal TestItem As String, ByVal Voltage As String, ByVal Current As String, ByVal PowerWatt As String, ByVal PowerFactor As String, ByVal Result As String, ByVal TestItemIndex As Integer)
            Me.UploadTVPowerRangeAsync(OPID, SerialNo, Line, Stage, Workstation, Type, SubType, TestItem, Voltage, Current, PowerWatt, PowerFactor, Result, TestItemIndex, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVPowerRangeAsync(ByVal OPID As String, ByVal SerialNo As String, ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal Type As Integer, ByVal SubType As Integer, ByVal TestItem As String, ByVal Voltage As String, ByVal Current As String, ByVal PowerWatt As String, ByVal PowerFactor As String, ByVal Result As String, ByVal TestItemIndex As Integer, ByVal userState As Object)
            If (Me.UploadTVPowerRangeOperationCompleted Is Nothing) Then
                Me.UploadTVPowerRangeOperationCompleted = AddressOf Me.OnUploadTVPowerRangeOperationCompleted
            End If
            Me.InvokeAsync("UploadTVPowerRange", New Object() {OPID, SerialNo, Line, Stage, Workstation, Type, SubType, TestItem, Voltage, Current, PowerWatt, PowerFactor, Result, TestItemIndex}, Me.UploadTVPowerRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVPowerRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVPowerRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVPowerRangeCompleted(Me, New UploadTVPowerRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVHDCPKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVHDCPKey(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal HDCPKeys() As clsHDCPKey) As String
            Dim results() As Object = Me.Invoke("UploadTVHDCPKey", New Object() {SerialNo, Line, StageCode, Workstation, HDCPKeys})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVHDCPKeyAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal HDCPKeys() As clsHDCPKey)
            Me.UploadTVHDCPKeyAsync(SerialNo, Line, StageCode, Workstation, HDCPKeys, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVHDCPKeyAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal HDCPKeys() As clsHDCPKey, ByVal userState As Object)
            If (Me.UploadTVHDCPKeyOperationCompleted Is Nothing) Then
                Me.UploadTVHDCPKeyOperationCompleted = AddressOf Me.OnUploadTVHDCPKeyOperationCompleted
            End If
            Me.InvokeAsync("UploadTVHDCPKey", New Object() {SerialNo, Line, StageCode, Workstation, HDCPKeys}, Me.UploadTVHDCPKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVHDCPKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVHDCPKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVHDCPKeyCompleted(Me, New UploadTVHDCPKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetHDCPKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHDCPKey(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef HDCPKey As String) As String
            Dim results() As Object = Me.Invoke("GetHDCPKey", New Object() {UnitSerialNumber, StageCode, HDCPKey})
            HDCPKey = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHDCPKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal HDCPKey As String)
            Me.GetHDCPKeyAsync(UnitSerialNumber, StageCode, HDCPKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHDCPKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal HDCPKey As String, ByVal userState As Object)
            If (Me.GetHDCPKeyOperationCompleted Is Nothing) Then
                Me.GetHDCPKeyOperationCompleted = AddressOf Me.OnGetHDCPKeyOperationCompleted
            End If
            Me.InvokeAsync("GetHDCPKey", New Object() {UnitSerialNumber, StageCode, HDCPKey}, Me.GetHDCPKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHDCPKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHDCPKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHDCPKeyCompleted(Me, New GetHDCPKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTVCIPlusKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTVCIPlusKey(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal CIPlusKeys() As clsCIPlusKey) As String
            Dim results() As Object = Me.Invoke("UploadTVCIPlusKey", New Object() {SerialNo, Line, StageCode, Workstation, CIPlusKeys})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTVCIPlusKeyAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal CIPlusKeys() As clsCIPlusKey)
            Me.UploadTVCIPlusKeyAsync(SerialNo, Line, StageCode, Workstation, CIPlusKeys, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTVCIPlusKeyAsync(ByVal SerialNo As String, ByVal Line As String, ByVal StageCode As String, ByVal Workstation As String, ByVal CIPlusKeys() As clsCIPlusKey, ByVal userState As Object)
            If (Me.UploadTVCIPlusKeyOperationCompleted Is Nothing) Then
                Me.UploadTVCIPlusKeyOperationCompleted = AddressOf Me.OnUploadTVCIPlusKeyOperationCompleted
            End If
            Me.InvokeAsync("UploadTVCIPlusKey", New Object() {SerialNo, Line, StageCode, Workstation, CIPlusKeys}, Me.UploadTVCIPlusKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTVCIPlusKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTVCIPlusKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTVCIPlusKeyCompleted(Me, New UploadTVCIPlusKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCIPlusKey", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCIPlusKey(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef CIPlusKey As String) As String
            Dim results() As Object = Me.Invoke("GetCIPlusKey", New Object() {UnitSerialNumber, StageCode, CIPlusKey})
            CIPlusKey = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCIPlusKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal CIPlusKey As String)
            Me.GetCIPlusKeyAsync(UnitSerialNumber, StageCode, CIPlusKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCIPlusKeyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal CIPlusKey As String, ByVal userState As Object)
            If (Me.GetCIPlusKeyOperationCompleted Is Nothing) Then
                Me.GetCIPlusKeyOperationCompleted = AddressOf Me.OnGetCIPlusKeyOperationCompleted
            End If
            Me.InvokeAsync("GetCIPlusKey", New Object() {UnitSerialNumber, StageCode, CIPlusKey}, Me.GetCIPlusKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCIPlusKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCIPlusKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCIPlusKeyCompleted(Me, New GetCIPlusKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNItem", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNItem(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal Sequence As Integer) As String
            Dim results() As Object = Me.Invoke("GetUSNItem", New Object() {UnitSerialNumber, StageCode, Category, Sequence})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal Sequence As Integer)
            Me.GetUSNItemAsync(UnitSerialNumber, StageCode, Category, Sequence, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal Sequence As Integer, ByVal userState As Object)
            If (Me.GetUSNItemOperationCompleted Is Nothing) Then
                Me.GetUSNItemOperationCompleted = AddressOf Me.OnGetUSNItemOperationCompleted
            End If
            Me.InvokeAsync("GetUSNItem", New Object() {UnitSerialNumber, StageCode, Category, Sequence}, Me.GetUSNItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNItemCompleted(Me, New GetUSNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNItem", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadUSNItem(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal ComponentSerialNumber As String, ByVal Sequence As Integer, ByVal CheckUsed As Integer) As String
            Dim results() As Object = Me.Invoke("UploadUSNItem", New Object() {UnitSerialNumber, StageCode, Category, ComponentSerialNumber, Sequence, CheckUsed})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadUSNItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal ComponentSerialNumber As String, ByVal Sequence As Integer, ByVal CheckUsed As Integer)
            Me.UploadUSNItemAsync(UnitSerialNumber, StageCode, Category, ComponentSerialNumber, Sequence, CheckUsed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadUSNItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal ComponentSerialNumber As String, ByVal Sequence As Integer, ByVal CheckUsed As Integer, ByVal userState As Object)
            If (Me.UploadUSNItemOperationCompleted Is Nothing) Then
                Me.UploadUSNItemOperationCompleted = AddressOf Me.OnUploadUSNItemOperationCompleted
            End If
            Me.InvokeAsync("UploadUSNItem", New Object() {UnitSerialNumber, StageCode, Category, ComponentSerialNumber, Sequence, CheckUsed}, Me.UploadUSNItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadUSNItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadUSNItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadUSNItemCompleted(Me, New UploadUSNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNItemWithBarcodeValidation", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadUSNItemWithBarcodeValidation(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentSerialNumber As String, ByVal [Assembly] As Boolean, ByVal CheckUsedCategory As String, ByVal Line As String, ByVal Workstation As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("UploadUSNItemWithBarcodeValidation", New Object() {UnitSerialNumber, StageCode, ComponentSerialNumber, [Assembly], CheckUsedCategory, Line, Workstation, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadUSNItemWithBarcodeValidationAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentSerialNumber As String, ByVal [Assembly] As Boolean, ByVal CheckUsedCategory As String, ByVal Line As String, ByVal Workstation As String, ByVal UserID As String)
            Me.UploadUSNItemWithBarcodeValidationAsync(UnitSerialNumber, StageCode, ComponentSerialNumber, [Assembly], CheckUsedCategory, Line, Workstation, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadUSNItemWithBarcodeValidationAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal ComponentSerialNumber As String, ByVal [Assembly] As Boolean, ByVal CheckUsedCategory As String, ByVal Line As String, ByVal Workstation As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.UploadUSNItemWithBarcodeValidationOperationCompleted Is Nothing) Then
                Me.UploadUSNItemWithBarcodeValidationOperationCompleted = AddressOf Me.OnUploadUSNItemWithBarcodeValidationOperationCompleted
            End If
            Me.InvokeAsync("UploadUSNItemWithBarcodeValidation", New Object() {UnitSerialNumber, StageCode, ComponentSerialNumber, [Assembly], CheckUsedCategory, Line, Workstation, UserID}, Me.UploadUSNItemWithBarcodeValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadUSNItemWithBarcodeValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadUSNItemWithBarcodeValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadUSNItemWithBarcodeValidationCompleted(Me, New UploadUSNItemWithBarcodeValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnID(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDType As Integer, ByVal Sequence As Integer) As String
            Dim results() As Object = Me.Invoke("GetUsnID", New Object() {UnitSerialNumber, StageCode, IDType, Sequence})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnIDAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDType As Integer, ByVal Sequence As Integer)
            Me.GetUsnIDAsync(UnitSerialNumber, StageCode, IDType, Sequence, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnIDAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal IDType As Integer, ByVal Sequence As Integer, ByVal userState As Object)
            If (Me.GetUsnIDOperationCompleted Is Nothing) Then
                Me.GetUsnIDOperationCompleted = AddressOf Me.OnGetUsnIDOperationCompleted
            End If
            Me.InvokeAsync("GetUsnID", New Object() {UnitSerialNumber, StageCode, IDType, Sequence}, Me.GetUsnIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnIDCompleted(Me, New GetUsnIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnIdWithoutCombine", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnIdWithoutCombine(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String) As String()
            Dim results() As Object = Me.Invoke("GetUsnIdWithoutCombine", New Object() {UnitSerialNumber, StageCode, Category})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnIdWithoutCombineAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String)
            Me.GetUsnIdWithoutCombineAsync(UnitSerialNumber, StageCode, Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnIdWithoutCombineAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal userState As Object)
            If (Me.GetUsnIdWithoutCombineOperationCompleted Is Nothing) Then
                Me.GetUsnIdWithoutCombineOperationCompleted = AddressOf Me.OnGetUsnIdWithoutCombineOperationCompleted
            End If
            Me.InvokeAsync("GetUsnIdWithoutCombine", New Object() {UnitSerialNumber, StageCode, Category}, Me.GetUsnIdWithoutCombineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnIdWithoutCombineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnIdWithoutCombineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnIdWithoutCombineCompleted(Me, New GetUsnIdWithoutCombineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetHDCPFileName", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHDCPFileName(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetHDCPFileName", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHDCPFileNameAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetHDCPFileNameAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHDCPFileNameAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetHDCPFileNameOperationCompleted Is Nothing) Then
                Me.GetHDCPFileNameOperationCompleted = AddressOf Me.OnGetHDCPFileNameOperationCompleted
            End If
            Me.InvokeAsync("GetHDCPFileName", New Object() {UnitSerialNumber, StageCode}, Me.GetHDCPFileNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHDCPFileNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHDCPFileNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHDCPFileNameCompleted(Me, New GetHDCPFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadFixtureID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFixtureID(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("UploadFixtureID", New Object() {UnitSerialNumber, StageCode, FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFixtureIDAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal FixtureID As String)
            Me.UploadFixtureIDAsync(UnitSerialNumber, StageCode, FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFixtureIDAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal FixtureID As String, ByVal userState As Object)
            If (Me.UploadFixtureIDOperationCompleted Is Nothing) Then
                Me.UploadFixtureIDOperationCompleted = AddressOf Me.OnUploadFixtureIDOperationCompleted
            End If
            Me.InvokeAsync("UploadFixtureID", New Object() {UnitSerialNumber, StageCode, FixtureID}, Me.UploadFixtureIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFixtureIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFixtureIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFixtureIDCompleted(Me, New UploadFixtureIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadVolTage", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadVolTage(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TestData As String, ByVal TestResult As String) As String
            Dim results() As Object = Me.Invoke("UploadVolTage", New Object() {UnitSerialNumber, StageCode, TestData, TestResult})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadVolTageAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TestData As String, ByVal TestResult As String)
            Me.UploadVolTageAsync(UnitSerialNumber, StageCode, TestData, TestResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadVolTageAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TestData As String, ByVal TestResult As String, ByVal userState As Object)
            If (Me.UploadVolTageOperationCompleted Is Nothing) Then
                Me.UploadVolTageOperationCompleted = AddressOf Me.OnUploadVolTageOperationCompleted
            End If
            Me.InvokeAsync("UploadVolTage", New Object() {UnitSerialNumber, StageCode, TestData, TestResult}, Me.UploadVolTageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadVolTageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadVolTageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadVolTageCompleted(Me, New UploadVolTageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTPSKeyValue", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTPSKeyValue(ByVal SerialNo As String, ByVal Stage As String, ByVal TestType As String, ByVal Key As String, ByVal KeyVal As String) As String
            Dim results() As Object = Me.Invoke("UploadTPSKeyValue", New Object() {SerialNo, Stage, TestType, Key, KeyVal})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTPSKeyValueAsync(ByVal SerialNo As String, ByVal Stage As String, ByVal TestType As String, ByVal Key As String, ByVal KeyVal As String)
            Me.UploadTPSKeyValueAsync(SerialNo, Stage, TestType, Key, KeyVal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTPSKeyValueAsync(ByVal SerialNo As String, ByVal Stage As String, ByVal TestType As String, ByVal Key As String, ByVal KeyVal As String, ByVal userState As Object)
            If (Me.UploadTPSKeyValueOperationCompleted Is Nothing) Then
                Me.UploadTPSKeyValueOperationCompleted = AddressOf Me.OnUploadTPSKeyValueOperationCompleted
            End If
            Me.InvokeAsync("UploadTPSKeyValue", New Object() {SerialNo, Stage, TestType, Key, KeyVal}, Me.UploadTPSKeyValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTPSKeyValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTPSKeyValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTPSKeyValueCompleted(Me, New UploadTPSKeyValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTPSLog", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTPSLog(ByVal SerialNo As String, ByVal Stage As String, ByVal ErrorID As String, ByVal ErrorMsg As String, ByVal TesterID As String, ByVal StationID As String, ByVal Model As String, ByVal SWConfigRev As String, ByVal TestSWConfigRev As String, ByVal TestHostConfig As String, ByVal TestHostSWConfigVer As String, ByVal FWVer As String, ByVal CPUID As String, ByVal FROMSize As String) As String
            Dim results() As Object = Me.Invoke("UploadTPSLog", New Object() {SerialNo, Stage, ErrorID, ErrorMsg, TesterID, StationID, Model, SWConfigRev, TestSWConfigRev, TestHostConfig, TestHostSWConfigVer, FWVer, CPUID, FROMSize})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTPSLogAsync(ByVal SerialNo As String, ByVal Stage As String, ByVal ErrorID As String, ByVal ErrorMsg As String, ByVal TesterID As String, ByVal StationID As String, ByVal Model As String, ByVal SWConfigRev As String, ByVal TestSWConfigRev As String, ByVal TestHostConfig As String, ByVal TestHostSWConfigVer As String, ByVal FWVer As String, ByVal CPUID As String, ByVal FROMSize As String)
            Me.UploadTPSLogAsync(SerialNo, Stage, ErrorID, ErrorMsg, TesterID, StationID, Model, SWConfigRev, TestSWConfigRev, TestHostConfig, TestHostSWConfigVer, FWVer, CPUID, FROMSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTPSLogAsync(ByVal SerialNo As String, ByVal Stage As String, ByVal ErrorID As String, ByVal ErrorMsg As String, ByVal TesterID As String, ByVal StationID As String, ByVal Model As String, ByVal SWConfigRev As String, ByVal TestSWConfigRev As String, ByVal TestHostConfig As String, ByVal TestHostSWConfigVer As String, ByVal FWVer As String, ByVal CPUID As String, ByVal FROMSize As String, ByVal userState As Object)
            If (Me.UploadTPSLogOperationCompleted Is Nothing) Then
                Me.UploadTPSLogOperationCompleted = AddressOf Me.OnUploadTPSLogOperationCompleted
            End If
            Me.InvokeAsync("UploadTPSLog", New Object() {SerialNo, Stage, ErrorID, ErrorMsg, TesterID, StationID, Model, SWConfigRev, TestSWConfigRev, TestHostConfig, TestHostSWConfigVer, FWVer, CPUID, FROMSize}, Me.UploadTPSLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTPSLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTPSLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTPSLogCompleted(Me, New UploadTPSLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTPSRetest", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTPSRetest(ByVal SerialNo As String, ByVal Stage As String, ByVal TestType As String, ByVal Item As String) As String
            Dim results() As Object = Me.Invoke("UploadTPSRetest", New Object() {SerialNo, Stage, TestType, Item})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTPSRetestAsync(ByVal SerialNo As String, ByVal Stage As String, ByVal TestType As String, ByVal Item As String)
            Me.UploadTPSRetestAsync(SerialNo, Stage, TestType, Item, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTPSRetestAsync(ByVal SerialNo As String, ByVal Stage As String, ByVal TestType As String, ByVal Item As String, ByVal userState As Object)
            If (Me.UploadTPSRetestOperationCompleted Is Nothing) Then
                Me.UploadTPSRetestOperationCompleted = AddressOf Me.OnUploadTPSRetestOperationCompleted
            End If
            Me.InvokeAsync("UploadTPSRetest", New Object() {SerialNo, Stage, TestType, Item}, Me.UploadTPSRetestOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTPSRetestOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTPSRetestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTPSRetestCompleted(Me, New UploadTPSRetestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckOPID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckOPID(ByVal OperationID As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckOPID", New Object() {OperationID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckOPIDAsync(ByVal OperationID As String)
            Me.CheckOPIDAsync(OperationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckOPIDAsync(ByVal OperationID As String, ByVal userState As Object)
            If (Me.CheckOPIDOperationCompleted Is Nothing) Then
                Me.CheckOPIDOperationCompleted = AddressOf Me.OnCheckOPIDOperationCompleted
            End If
            Me.InvokeAsync("CheckOPID", New Object() {OperationID}, Me.CheckOPIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckOPIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckOPIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckOPIDCompleted(Me, New CheckOPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUsnGenealogy", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsnGenealogy(ByVal UnitSerialNumber As String, ByVal StageCode As String) As clsMO
            Dim results() As Object = Me.Invoke("GetUsnGenealogy", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),clsMO)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsnGenealogyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetUsnGenealogyAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsnGenealogyAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetUsnGenealogyOperationCompleted Is Nothing) Then
                Me.GetUsnGenealogyOperationCompleted = AddressOf Me.OnGetUsnGenealogyOperationCompleted
            End If
            Me.InvokeAsync("GetUsnGenealogy", New Object() {UnitSerialNumber, StageCode}, Me.GetUsnGenealogyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsnGenealogyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsnGenealogyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsnGenealogyCompleted(Me, New GetUsnGenealogyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEDIDFilename", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEDIDFilename(ByVal ProductCode As String, ByVal PortType As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetEDIDFilename", New Object() {ProductCode, PortType, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEDIDFilenameAsync(ByVal ProductCode As String, ByVal PortType As String, ByVal StageCode As String)
            Me.GetEDIDFilenameAsync(ProductCode, PortType, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEDIDFilenameAsync(ByVal ProductCode As String, ByVal PortType As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetEDIDFilenameOperationCompleted Is Nothing) Then
                Me.GetEDIDFilenameOperationCompleted = AddressOf Me.OnGetEDIDFilenameOperationCompleted
            End If
            Me.InvokeAsync("GetEDIDFilename", New Object() {ProductCode, PortType, StageCode}, Me.GetEDIDFilenameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEDIDFilenameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEDIDFilenameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEDIDFilenameCompleted(Me, New GetEDIDFilenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadEDIDResult", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadEDIDResult(ByVal UnitSerialNumber As String, ByVal OPID As String, ByVal StageCode As String, ByVal Line As String, ByVal Workstation As String, ByVal PortType As String, ByVal Pass As Boolean, ByVal EverWrite As Boolean, ByVal Checksum As String, ByVal Version As String) As String
            Dim results() As Object = Me.Invoke("UploadEDIDResult", New Object() {UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadEDIDResultAsync(ByVal UnitSerialNumber As String, ByVal OPID As String, ByVal StageCode As String, ByVal Line As String, ByVal Workstation As String, ByVal PortType As String, ByVal Pass As Boolean, ByVal EverWrite As Boolean, ByVal Checksum As String, ByVal Version As String)
            Me.UploadEDIDResultAsync(UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadEDIDResultAsync(ByVal UnitSerialNumber As String, ByVal OPID As String, ByVal StageCode As String, ByVal Line As String, ByVal Workstation As String, ByVal PortType As String, ByVal Pass As Boolean, ByVal EverWrite As Boolean, ByVal Checksum As String, ByVal Version As String, ByVal userState As Object)
            If (Me.UploadEDIDResultOperationCompleted Is Nothing) Then
                Me.UploadEDIDResultOperationCompleted = AddressOf Me.OnUploadEDIDResultOperationCompleted
            End If
            Me.InvokeAsync("UploadEDIDResult", New Object() {UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version}, Me.UploadEDIDResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadEDIDResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadEDIDResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadEDIDResultCompleted(Me, New UploadEDIDResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorEDID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadMonitorEDID(ByVal UnitSerialNumber As String, ByVal OPID As String, ByVal StageCode As String, ByVal Line As String, ByVal Workstation As String, ByVal PortType As String, ByVal Pass As Boolean, ByVal EverWrite As Boolean, ByVal Checksum As String, ByVal Version As String, ByVal EDID As String) As String
            Dim results() As Object = Me.Invoke("UploadMonitorEDID", New Object() {UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version, EDID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorEDIDAsync(ByVal UnitSerialNumber As String, ByVal OPID As String, ByVal StageCode As String, ByVal Line As String, ByVal Workstation As String, ByVal PortType As String, ByVal Pass As Boolean, ByVal EverWrite As Boolean, ByVal Checksum As String, ByVal Version As String, ByVal EDID As String)
            Me.UploadMonitorEDIDAsync(UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version, EDID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorEDIDAsync(ByVal UnitSerialNumber As String, ByVal OPID As String, ByVal StageCode As String, ByVal Line As String, ByVal Workstation As String, ByVal PortType As String, ByVal Pass As Boolean, ByVal EverWrite As Boolean, ByVal Checksum As String, ByVal Version As String, ByVal EDID As String, ByVal userState As Object)
            If (Me.UploadMonitorEDIDOperationCompleted Is Nothing) Then
                Me.UploadMonitorEDIDOperationCompleted = AddressOf Me.OnUploadMonitorEDIDOperationCompleted
            End If
            Me.InvokeAsync("UploadMonitorEDID", New Object() {UnitSerialNumber, OPID, StageCode, Line, Workstation, PortType, Pass, EverWrite, Checksum, Version, EDID}, Me.UploadMonitorEDIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadMonitorEDIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadMonitorEDIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadMonitorEDIDCompleted(Me, New UploadMonitorEDIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestLog", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTestLog(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Line As String, ByVal OPID As String, ByVal Pass As Boolean, ByVal ErrorCode As String, ByVal Remark As String) As String
            Dim results() As Object = Me.Invoke("UploadTestLog", New Object() {UnitSerialNumber, StageCode, Workstation, Line, OPID, Pass, ErrorCode, Remark})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTestLogAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Line As String, ByVal OPID As String, ByVal Pass As Boolean, ByVal ErrorCode As String, ByVal Remark As String)
            Me.UploadTestLogAsync(UnitSerialNumber, StageCode, Workstation, Line, OPID, Pass, ErrorCode, Remark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTestLogAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Workstation As String, ByVal Line As String, ByVal OPID As String, ByVal Pass As Boolean, ByVal ErrorCode As String, ByVal Remark As String, ByVal userState As Object)
            If (Me.UploadTestLogOperationCompleted Is Nothing) Then
                Me.UploadTestLogOperationCompleted = AddressOf Me.OnUploadTestLogOperationCompleted
            End If
            Me.InvokeAsync("UploadTestLog", New Object() {UnitSerialNumber, StageCode, Workstation, Line, OPID, Pass, ErrorCode, Remark}, Me.UploadTestLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTestLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTestLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTestLogCompleted(Me, New UploadTestLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadRuninRackUnitStartDate", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRuninRackUnitStartDate(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("UploadRuninRackUnitStartDate", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRuninRackUnitStartDateAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.UploadRuninRackUnitStartDateAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRuninRackUnitStartDateAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.UploadRuninRackUnitStartDateOperationCompleted Is Nothing) Then
                Me.UploadRuninRackUnitStartDateOperationCompleted = AddressOf Me.OnUploadRuninRackUnitStartDateOperationCompleted
            End If
            Me.InvokeAsync("UploadRuninRackUnitStartDate", New Object() {UnitSerialNumber, StageCode}, Me.UploadRuninRackUnitStartDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRuninRackUnitStartDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRuninRackUnitStartDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRuninRackUnitStartDateCompleted(Me, New UploadRuninRackUnitStartDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckTestFixture", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckTestFixture(ByVal FixtureGroupID As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("CheckTestFixture", New Object() {FixtureGroupID, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckTestFixtureAsync(ByVal FixtureGroupID As String, ByVal StageCode As String)
            Me.CheckTestFixtureAsync(FixtureGroupID, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckTestFixtureAsync(ByVal FixtureGroupID As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.CheckTestFixtureOperationCompleted Is Nothing) Then
                Me.CheckTestFixtureOperationCompleted = AddressOf Me.OnCheckTestFixtureOperationCompleted
            End If
            Me.InvokeAsync("CheckTestFixture", New Object() {FixtureGroupID, StageCode}, Me.CheckTestFixtureOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckTestFixtureOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckTestFixtureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckTestFixtureCompleted(Me, New CheckTestFixtureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadUSNInfo(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String) As String
            Dim results() As Object = Me.Invoke("UploadUSNInfo", New Object() {UnitSerialNumber, StageCode, InfoName, InfoValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadUSNInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String)
            Me.UploadUSNInfoAsync(UnitSerialNumber, StageCode, InfoName, InfoValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadUSNInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal userState As Object)
            If (Me.UploadUSNInfoOperationCompleted Is Nothing) Then
                Me.UploadUSNInfoOperationCompleted = AddressOf Me.OnUploadUSNInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadUSNInfo", New Object() {UnitSerialNumber, StageCode, InfoName, InfoValue}, Me.UploadUSNInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadUSNInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadUSNInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadUSNInfoCompleted(Me, New UploadUSNInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadUSNInfoWithUniqueCheckFlag", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadUSNInfoWithUniqueCheckFlag(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal UniqueCheck As Boolean) As String
            Dim results() As Object = Me.Invoke("UploadUSNInfoWithUniqueCheckFlag", New Object() {UnitSerialNumber, StageCode, InfoName, InfoValue, UniqueCheck})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadUSNInfoWithUniqueCheckFlagAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal UniqueCheck As Boolean)
            Me.UploadUSNInfoWithUniqueCheckFlagAsync(UnitSerialNumber, StageCode, InfoName, InfoValue, UniqueCheck, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadUSNInfoWithUniqueCheckFlagAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal UniqueCheck As Boolean, ByVal userState As Object)
            If (Me.UploadUSNInfoWithUniqueCheckFlagOperationCompleted Is Nothing) Then
                Me.UploadUSNInfoWithUniqueCheckFlagOperationCompleted = AddressOf Me.OnUploadUSNInfoWithUniqueCheckFlagOperationCompleted
            End If
            Me.InvokeAsync("UploadUSNInfoWithUniqueCheckFlag", New Object() {UnitSerialNumber, StageCode, InfoName, InfoValue, UniqueCheck}, Me.UploadUSNInfoWithUniqueCheckFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadUSNInfoWithUniqueCheckFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadUSNInfoWithUniqueCheckFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadUSNInfoWithUniqueCheckFlagCompleted(Me, New UploadUSNInfoWithUniqueCheckFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMOInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMOInfo(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String) As String
            Dim results() As Object = Me.Invoke("GetMOInfo", New Object() {UnitSerialNumber, StageCode, InfoName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMOInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String)
            Me.GetMOInfoAsync(UnitSerialNumber, StageCode, InfoName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMOInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal userState As Object)
            If (Me.GetMOInfoOperationCompleted Is Nothing) Then
                Me.GetMOInfoOperationCompleted = AddressOf Me.OnGetMOInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMOInfo", New Object() {UnitSerialNumber, StageCode, InfoName}, Me.GetMOInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMOInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMOInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMOInfoCompleted(Me, New GetMOInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTransactionTime", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransactionTime(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetTransactionTime", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransactionTimeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetTransactionTimeAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransactionTimeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetTransactionTimeOperationCompleted Is Nothing) Then
                Me.GetTransactionTimeOperationCompleted = AddressOf Me.OnGetTransactionTimeOperationCompleted
            End If
            Me.InvokeAsync("GetTransactionTime", New Object() {UnitSerialNumber, StageCode}, Me.GetTransactionTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransactionTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransactionTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransactionTimeCompleted(Me, New GetTransactionTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/SetReflowStage", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetReflowStage(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal UserID As String) As String
            Dim results() As Object = Me.Invoke("SetReflowStage", New Object() {UnitSerialNumber, StageCode, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetReflowStageAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal UserID As String)
            Me.SetReflowStageAsync(UnitSerialNumber, StageCode, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetReflowStageAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.SetReflowStageOperationCompleted Is Nothing) Then
                Me.SetReflowStageOperationCompleted = AddressOf Me.OnSetReflowStageOperationCompleted
            End If
            Me.InvokeAsync("SetReflowStage", New Object() {UnitSerialNumber, StageCode, UserID}, Me.SetReflowStageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetReflowStageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetReflowStageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetReflowStageCompleted(Me, New SetReflowStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSetCA210OffsetTable", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSetCA210OffsetTable(ByVal Type As Integer, ByVal Model As String, ByVal ProbeSN As String, ByVal StageCode As String, ByVal CA210OffsetCheckFlag As clsCA210OffsetCheckFlag) As clsCA210OffsetResult()
            Dim results() As Object = Me.Invoke("GetSetCA210OffsetTable", New Object() {Type, Model, ProbeSN, StageCode, CA210OffsetCheckFlag})
            Return CType(results(0),clsCA210OffsetResult())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSetCA210OffsetTableAsync(ByVal Type As Integer, ByVal Model As String, ByVal ProbeSN As String, ByVal StageCode As String, ByVal CA210OffsetCheckFlag As clsCA210OffsetCheckFlag)
            Me.GetSetCA210OffsetTableAsync(Type, Model, ProbeSN, StageCode, CA210OffsetCheckFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSetCA210OffsetTableAsync(ByVal Type As Integer, ByVal Model As String, ByVal ProbeSN As String, ByVal StageCode As String, ByVal CA210OffsetCheckFlag As clsCA210OffsetCheckFlag, ByVal userState As Object)
            If (Me.GetSetCA210OffsetTableOperationCompleted Is Nothing) Then
                Me.GetSetCA210OffsetTableOperationCompleted = AddressOf Me.OnGetSetCA210OffsetTableOperationCompleted
            End If
            Me.InvokeAsync("GetSetCA210OffsetTable", New Object() {Type, Model, ProbeSN, StageCode, CA210OffsetCheckFlag}, Me.GetSetCA210OffsetTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSetCA210OffsetTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSetCA210OffsetTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSetCA210OffsetTableCompleted(Me, New GetSetCA210OffsetTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTestSuiteInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTestSuiteInfo(ByVal UnitSerialNumber As String, ByVal StageCode As String) As clsGetTestSuiteInfoResult
            Dim results() As Object = Me.Invoke("GetTestSuiteInfo", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),clsGetTestSuiteInfoResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTestSuiteInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetTestSuiteInfoAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTestSuiteInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetTestSuiteInfoOperationCompleted Is Nothing) Then
                Me.GetTestSuiteInfoOperationCompleted = AddressOf Me.OnGetTestSuiteInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTestSuiteInfo", New Object() {UnitSerialNumber, StageCode}, Me.GetTestSuiteInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTestSuiteInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTestSuiteInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTestSuiteInfoCompleted(Me, New GetTestSuiteInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTestSuiteInfoWithDataSearchType", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTestSuiteInfoWithDataSearchType(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataSerachType As String) As clsGetTestSuiteInfoResult
            Dim results() As Object = Me.Invoke("GetTestSuiteInfoWithDataSearchType", New Object() {UnitSerialNumber, StageCode, DataSerachType})
            Return CType(results(0),clsGetTestSuiteInfoResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTestSuiteInfoWithDataSearchTypeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataSerachType As String)
            Me.GetTestSuiteInfoWithDataSearchTypeAsync(UnitSerialNumber, StageCode, DataSerachType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTestSuiteInfoWithDataSearchTypeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataSerachType As String, ByVal userState As Object)
            If (Me.GetTestSuiteInfoWithDataSearchTypeOperationCompleted Is Nothing) Then
                Me.GetTestSuiteInfoWithDataSearchTypeOperationCompleted = AddressOf Me.OnGetTestSuiteInfoWithDataSearchTypeOperationCompleted
            End If
            Me.InvokeAsync("GetTestSuiteInfoWithDataSearchType", New Object() {UnitSerialNumber, StageCode, DataSerachType}, Me.GetTestSuiteInfoWithDataSearchTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTestSuiteInfoWithDataSearchTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTestSuiteInfoWithDataSearchTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTestSuiteInfoWithDataSearchTypeCompleted(Me, New GetTestSuiteInfoWithDataSearchTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNInfo(ByVal UnitSerialNumber As String, ByVal StageCode As String) As clsGetUSNInfoResult
            Dim results() As Object = Me.Invoke("GetUSNInfo", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),clsGetUSNInfoResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetUSNInfoAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNInfoAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetUSNInfoOperationCompleted Is Nothing) Then
                Me.GetUSNInfoOperationCompleted = AddressOf Me.OnGetUSNInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUSNInfo", New Object() {UnitSerialNumber, StageCode}, Me.GetUSNInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNInfoCompleted(Me, New GetUSNInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMOItem", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMOItem(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String) As clsMOItem()
            Dim results() As Object = Me.Invoke("GetMOItem", New Object() {UnitSerialNumber, StageCode, Category})
            Return CType(results(0),clsMOItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMOItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String)
            Me.GetMOItemAsync(UnitSerialNumber, StageCode, Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMOItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Category As String, ByVal userState As Object)
            If (Me.GetMOItemOperationCompleted Is Nothing) Then
                Me.GetMOItemOperationCompleted = AddressOf Me.OnGetMOItemOperationCompleted
            End If
            Me.InvokeAsync("GetMOItem", New Object() {UnitSerialNumber, StageCode, Category}, Me.GetMOItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMOItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMOItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMOItemCompleted(Me, New GetMOItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorLpByUsn", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadMonitorLpByUsn(ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal UnitSerialNumber As String, ByVal V5 As String, ByVal V12 As String, ByVal V22 As String, ByVal SEMIFASN As String) As String
            Dim results() As Object = Me.Invoke("UploadMonitorLpByUsn", New Object() {Line, Stage, Workstation, UnitSerialNumber, V5, V12, V22, SEMIFASN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorLpByUsnAsync(ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal UnitSerialNumber As String, ByVal V5 As String, ByVal V12 As String, ByVal V22 As String, ByVal SEMIFASN As String)
            Me.UploadMonitorLpByUsnAsync(Line, Stage, Workstation, UnitSerialNumber, V5, V12, V22, SEMIFASN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorLpByUsnAsync(ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal UnitSerialNumber As String, ByVal V5 As String, ByVal V12 As String, ByVal V22 As String, ByVal SEMIFASN As String, ByVal userState As Object)
            If (Me.UploadMonitorLpByUsnOperationCompleted Is Nothing) Then
                Me.UploadMonitorLpByUsnOperationCompleted = AddressOf Me.OnUploadMonitorLpByUsnOperationCompleted
            End If
            Me.InvokeAsync("UploadMonitorLpByUsn", New Object() {Line, Stage, Workstation, UnitSerialNumber, V5, V12, V22, SEMIFASN}, Me.UploadMonitorLpByUsnOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadMonitorLpByUsnOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadMonitorLpByUsnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadMonitorLpByUsnCompleted(Me, New UploadMonitorLpByUsnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadMonitorLP", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadMonitorLP(ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal ManufactureOrder As String, ByVal V5 As String, ByVal V12 As String, ByVal V22 As String, ByVal SEMIFASN As String) As String
            Dim results() As Object = Me.Invoke("UploadMonitorLP", New Object() {Line, Stage, Workstation, ManufactureOrder, V5, V12, V22, SEMIFASN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorLPAsync(ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal ManufactureOrder As String, ByVal V5 As String, ByVal V12 As String, ByVal V22 As String, ByVal SEMIFASN As String)
            Me.UploadMonitorLPAsync(Line, Stage, Workstation, ManufactureOrder, V5, V12, V22, SEMIFASN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadMonitorLPAsync(ByVal Line As String, ByVal Stage As String, ByVal Workstation As String, ByVal ManufactureOrder As String, ByVal V5 As String, ByVal V12 As String, ByVal V22 As String, ByVal SEMIFASN As String, ByVal userState As Object)
            If (Me.UploadMonitorLPOperationCompleted Is Nothing) Then
                Me.UploadMonitorLPOperationCompleted = AddressOf Me.OnUploadMonitorLPOperationCompleted
            End If
            Me.InvokeAsync("UploadMonitorLP", New Object() {Line, Stage, Workstation, ManufactureOrder, V5, V12, V22, SEMIFASN}, Me.UploadMonitorLPOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadMonitorLPOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadMonitorLPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadMonitorLPCompleted(Me, New UploadMonitorLPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckErrorCode", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckErrorCode(ByVal ErrorCode As String, ByVal StageCode As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckErrorCode", New Object() {ErrorCode, StageCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckErrorCodeAsync(ByVal ErrorCode As String, ByVal StageCode As String)
            Me.CheckErrorCodeAsync(ErrorCode, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckErrorCodeAsync(ByVal ErrorCode As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.CheckErrorCodeOperationCompleted Is Nothing) Then
                Me.CheckErrorCodeOperationCompleted = AddressOf Me.OnCheckErrorCodeOperationCompleted
            End If
            Me.InvokeAsync("CheckErrorCode", New Object() {ErrorCode, StageCode}, Me.CheckErrorCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckErrorCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckErrorCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckErrorCodeCompleted(Me, New CheckErrorCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetRIRackPositionByUSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRIRackPositionByUSN(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef RIRackPosition As String) As String
            Dim results() As Object = Me.Invoke("GetRIRackPositionByUSN", New Object() {UnitSerialNumber, StageCode, RIRackPosition})
            RIRackPosition = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRIRackPositionByUSNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal RIRackPosition As String)
            Me.GetRIRackPositionByUSNAsync(UnitSerialNumber, StageCode, RIRackPosition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRIRackPositionByUSNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal RIRackPosition As String, ByVal userState As Object)
            If (Me.GetRIRackPositionByUSNOperationCompleted Is Nothing) Then
                Me.GetRIRackPositionByUSNOperationCompleted = AddressOf Me.OnGetRIRackPositionByUSNOperationCompleted
            End If
            Me.InvokeAsync("GetRIRackPositionByUSN", New Object() {UnitSerialNumber, StageCode, RIRackPosition}, Me.GetRIRackPositionByUSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRIRackPositionByUSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRIRackPositionByUSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRIRackPositionByUSNCompleted(Me, New GetRIRackPositionByUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByRIRackPosition", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNByRIRackPosition(ByVal RIRackPosition As String, ByVal StageCode As String, ByRef UnitSerialNumber As String) As String
            Dim results() As Object = Me.Invoke("GetUSNByRIRackPosition", New Object() {RIRackPosition, StageCode, UnitSerialNumber})
            UnitSerialNumber = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNByRIRackPositionAsync(ByVal RIRackPosition As String, ByVal StageCode As String, ByVal UnitSerialNumber As String)
            Me.GetUSNByRIRackPositionAsync(RIRackPosition, StageCode, UnitSerialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNByRIRackPositionAsync(ByVal RIRackPosition As String, ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal userState As Object)
            If (Me.GetUSNByRIRackPositionOperationCompleted Is Nothing) Then
                Me.GetUSNByRIRackPositionOperationCompleted = AddressOf Me.OnGetUSNByRIRackPositionOperationCompleted
            End If
            Me.InvokeAsync("GetUSNByRIRackPosition", New Object() {RIRackPosition, StageCode, UnitSerialNumber}, Me.GetUSNByRIRackPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNByRIRackPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNByRIRackPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNByRIRackPositionCompleted(Me, New GetUSNByRIRackPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadDownTime", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDownTime(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TestTime As Integer, ByVal Result As Boolean, ByVal DownTimeCode As String) As String
            Dim results() As Object = Me.Invoke("UploadDownTime", New Object() {UnitSerialNumber, StageCode, TestTime, Result, DownTimeCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDownTimeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TestTime As Integer, ByVal Result As Boolean, ByVal DownTimeCode As String)
            Me.UploadDownTimeAsync(UnitSerialNumber, StageCode, TestTime, Result, DownTimeCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDownTimeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TestTime As Integer, ByVal Result As Boolean, ByVal DownTimeCode As String, ByVal userState As Object)
            If (Me.UploadDownTimeOperationCompleted Is Nothing) Then
                Me.UploadDownTimeOperationCompleted = AddressOf Me.OnUploadDownTimeOperationCompleted
            End If
            Me.InvokeAsync("UploadDownTime", New Object() {UnitSerialNumber, StageCode, TestTime, Result, DownTimeCode}, Me.UploadDownTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDownTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDownTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDownTimeCompleted(Me, New UploadDownTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNInformation", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNInformation(ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal InfoName As String, ByRef InfoValue As String) As String
            Dim results() As Object = Me.Invoke("GetUSNInformation", New Object() {StageCode, UnitSerialNumber, InfoName, InfoValue})
            InfoValue = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNInformationAsync(ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal InfoName As String, ByVal InfoValue As String)
            Me.GetUSNInformationAsync(StageCode, UnitSerialNumber, InfoName, InfoValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNInformationAsync(ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal userState As Object)
            If (Me.GetUSNInformationOperationCompleted Is Nothing) Then
                Me.GetUSNInformationOperationCompleted = AddressOf Me.OnGetUSNInformationOperationCompleted
            End If
            Me.InvokeAsync("GetUSNInformation", New Object() {StageCode, UnitSerialNumber, InfoName, InfoValue}, Me.GetUSNInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNInformationCompleted(Me, New GetUSNInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByUSNInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNByUSNInfo(ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByRef UnitSerialNumber As String) As String
            Dim results() As Object = Me.Invoke("GetUSNByUSNInfo", New Object() {StageCode, InfoName, InfoValue, UnitSerialNumber})
            UnitSerialNumber = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNByUSNInfoAsync(ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal UnitSerialNumber As String)
            Me.GetUSNByUSNInfoAsync(StageCode, InfoName, InfoValue, UnitSerialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNByUSNInfoAsync(ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal UnitSerialNumber As String, ByVal userState As Object)
            If (Me.GetUSNByUSNInfoOperationCompleted Is Nothing) Then
                Me.GetUSNByUSNInfoOperationCompleted = AddressOf Me.OnGetUSNByUSNInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUSNByUSNInfo", New Object() {StageCode, InfoName, InfoValue, UnitSerialNumber}, Me.GetUSNByUSNInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNByUSNInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNByUSNInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNByUSNInfoCompleted(Me, New GetUSNByUSNInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMessage", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMessage(ByVal MessageID As String, ByVal Language As String, <System.Xml.Serialization.XmlElementAttribute("Parameter")> ByVal Parameter() As String) As clsMessage
            Dim results() As Object = Me.Invoke("GetMessage", New Object() {MessageID, Language, Parameter})
            Return CType(results(0),clsMessage)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMessageAsync(ByVal MessageID As String, ByVal Language As String, ByVal Parameter() As String)
            Me.GetMessageAsync(MessageID, Language, Parameter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMessageAsync(ByVal MessageID As String, ByVal Language As String, ByVal Parameter() As String, ByVal userState As Object)
            If (Me.GetMessageOperationCompleted Is Nothing) Then
                Me.GetMessageOperationCompleted = AddressOf Me.OnGetMessageOperationCompleted
            End If
            Me.InvokeAsync("GetMessage", New Object() {MessageID, Language, Parameter}, Me.GetMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMessageCompleted(Me, New GetMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSPCConfig", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSPCConfig(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal clsSPCConfig As clsSPCConfig) As clsSPCConfig
            Dim results() As Object = Me.Invoke("GetSPCConfig", New Object() {UnitSerialNumber, StageCode, clsSPCConfig})
            Return CType(results(0),clsSPCConfig)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSPCConfigAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal clsSPCConfig As clsSPCConfig)
            Me.GetSPCConfigAsync(UnitSerialNumber, StageCode, clsSPCConfig, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSPCConfigAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal clsSPCConfig As clsSPCConfig, ByVal userState As Object)
            If (Me.GetSPCConfigOperationCompleted Is Nothing) Then
                Me.GetSPCConfigOperationCompleted = AddressOf Me.OnGetSPCConfigOperationCompleted
            End If
            Me.InvokeAsync("GetSPCConfig", New Object() {UnitSerialNumber, StageCode, clsSPCConfig}, Me.GetSPCConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSPCConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSPCConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSPCConfigCompleted(Me, New GetSPCConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUPNInformation", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUPNInformation(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByRef InfoValue As String) As String
            Dim results() As Object = Me.Invoke("GetUPNInformation", New Object() {UnitSerialNumber, StageCode, InfoName, InfoValue})
            InfoValue = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUPNInformationAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String)
            Me.GetUPNInformationAsync(UnitSerialNumber, StageCode, InfoName, InfoValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUPNInformationAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal InfoName As String, ByVal InfoValue As String, ByVal userState As Object)
            If (Me.GetUPNInformationOperationCompleted Is Nothing) Then
                Me.GetUPNInformationOperationCompleted = AddressOf Me.OnGetUPNInformationOperationCompleted
            End If
            Me.InvokeAsync("GetUPNInformation", New Object() {UnitSerialNumber, StageCode, InfoName, InfoValue}, Me.GetUPNInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUPNInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUPNInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUPNInformationCompleted(Me, New GetUPNInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetPanelParameter", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPanelParameter(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef PanelParameter As String) As String
            Dim results() As Object = Me.Invoke("GetPanelParameter", New Object() {UnitSerialNumber, StageCode, PanelParameter})
            PanelParameter = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPanelParameterAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal PanelParameter As String)
            Me.GetPanelParameterAsync(UnitSerialNumber, StageCode, PanelParameter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPanelParameterAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal PanelParameter As String, ByVal userState As Object)
            If (Me.GetPanelParameterOperationCompleted Is Nothing) Then
                Me.GetPanelParameterOperationCompleted = AddressOf Me.OnGetPanelParameterOperationCompleted
            End If
            Me.InvokeAsync("GetPanelParameter", New Object() {UnitSerialNumber, StageCode, PanelParameter}, Me.GetPanelParameterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPanelParameterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPanelParameterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPanelParameterCompleted(Me, New GetPanelParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetPanelParameterWithDataSearchType"& _ 
            "", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPanelParameterWithDataSearchType(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataSerachType As String, ByRef PanelParameter As String) As String
            Dim results() As Object = Me.Invoke("GetPanelParameterWithDataSearchType", New Object() {UnitSerialNumber, StageCode, DataSerachType, PanelParameter})
            PanelParameter = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPanelParameterWithDataSearchTypeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataSerachType As String, ByVal PanelParameter As String)
            Me.GetPanelParameterWithDataSearchTypeAsync(UnitSerialNumber, StageCode, DataSerachType, PanelParameter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPanelParameterWithDataSearchTypeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal DataSerachType As String, ByVal PanelParameter As String, ByVal userState As Object)
            If (Me.GetPanelParameterWithDataSearchTypeOperationCompleted Is Nothing) Then
                Me.GetPanelParameterWithDataSearchTypeOperationCompleted = AddressOf Me.OnGetPanelParameterWithDataSearchTypeOperationCompleted
            End If
            Me.InvokeAsync("GetPanelParameterWithDataSearchType", New Object() {UnitSerialNumber, StageCode, DataSerachType, PanelParameter}, Me.GetPanelParameterWithDataSearchTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPanelParameterWithDataSearchTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPanelParameterWithDataSearchTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPanelParameterWithDataSearchTypeCompleted(Me, New GetPanelParameterWithDataSearchTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUUTData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUUTData(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal RequestData As clsRequestData, ByVal RequestDataType As Integer) As clsRequestData
            Dim results() As Object = Me.Invoke("GetUUTData", New Object() {UnitSerialNumber, StageCode, RequestData, RequestDataType})
            Return CType(results(0),clsRequestData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUUTDataAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal RequestData As clsRequestData, ByVal RequestDataType As Integer)
            Me.GetUUTDataAsync(UnitSerialNumber, StageCode, RequestData, RequestDataType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUUTDataAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal RequestData As clsRequestData, ByVal RequestDataType As Integer, ByVal userState As Object)
            If (Me.GetUUTDataOperationCompleted Is Nothing) Then
                Me.GetUUTDataOperationCompleted = AddressOf Me.OnGetUUTDataOperationCompleted
            End If
            Me.InvokeAsync("GetUUTData", New Object() {UnitSerialNumber, StageCode, RequestData, RequestDataType}, Me.GetUUTDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUUTDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUUTDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUUTDataCompleted(Me, New GetUUTDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByCSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNByCSN(ByVal ComponentSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetUSNByCSN", New Object() {ComponentSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNByCSNAsync(ByVal ComponentSerialNumber As String, ByVal StageCode As String)
            Me.GetUSNByCSNAsync(ComponentSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNByCSNAsync(ByVal ComponentSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetUSNByCSNOperationCompleted Is Nothing) Then
                Me.GetUSNByCSNOperationCompleted = AddressOf Me.OnGetUSNByCSNOperationCompleted
            End If
            Me.InvokeAsync("GetUSNByCSN", New Object() {ComponentSerialNumber, StageCode}, Me.GetUSNByCSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNByCSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNByCSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNByCSNCompleted(Me, New GetUSNByCSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadCertifyPO", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadCertifyPO(ByVal StageCode As String, ByVal PO As String, ByVal TieGroup As String, ByVal ImageID As String, ByVal SDRCheckSum As String, ByVal UploadType As String) As String
            Dim results() As Object = Me.Invoke("UploadCertifyPO", New Object() {StageCode, PO, TieGroup, ImageID, SDRCheckSum, UploadType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadCertifyPOAsync(ByVal StageCode As String, ByVal PO As String, ByVal TieGroup As String, ByVal ImageID As String, ByVal SDRCheckSum As String, ByVal UploadType As String)
            Me.UploadCertifyPOAsync(StageCode, PO, TieGroup, ImageID, SDRCheckSum, UploadType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadCertifyPOAsync(ByVal StageCode As String, ByVal PO As String, ByVal TieGroup As String, ByVal ImageID As String, ByVal SDRCheckSum As String, ByVal UploadType As String, ByVal userState As Object)
            If (Me.UploadCertifyPOOperationCompleted Is Nothing) Then
                Me.UploadCertifyPOOperationCompleted = AddressOf Me.OnUploadCertifyPOOperationCompleted
            End If
            Me.InvokeAsync("UploadCertifyPO", New Object() {StageCode, PO, TieGroup, ImageID, SDRCheckSum, UploadType}, Me.UploadCertifyPOOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadCertifyPOOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadCertifyPOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadCertifyPOCompleted(Me, New UploadCertifyPOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSWCPNForUPN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSWCPNForUPN(ByVal UnitPartNumber As String, ByVal StageCode As String, <System.Xml.Serialization.XmlArrayItemAttribute("SWCPNItem")> ByRef SWCPNs() As clsSWCPN) As String
            Dim results() As Object = Me.Invoke("GetSWCPNForUPN", New Object() {UnitPartNumber, StageCode, SWCPNs})
            SWCPNs = CType(results(1),clsSWCPN())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSWCPNForUPNAsync(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal SWCPNs() As clsSWCPN)
            Me.GetSWCPNForUPNAsync(UnitPartNumber, StageCode, SWCPNs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSWCPNForUPNAsync(ByVal UnitPartNumber As String, ByVal StageCode As String, ByVal SWCPNs() As clsSWCPN, ByVal userState As Object)
            If (Me.GetSWCPNForUPNOperationCompleted Is Nothing) Then
                Me.GetSWCPNForUPNOperationCompleted = AddressOf Me.OnGetSWCPNForUPNOperationCompleted
            End If
            Me.InvokeAsync("GetSWCPNForUPN", New Object() {UnitPartNumber, StageCode, SWCPNs}, Me.GetSWCPNForUPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSWCPNForUPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSWCPNForUPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSWCPNForUPNCompleted(Me, New GetSWCPNForUPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNInfoByMAC", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNInfoByMAC(ByVal MAC As String, ByVal StageCode As String, ByRef ModelFamily As String, ByRef Model As String, ByRef UnitPartNumber As String, ByRef MO As String, ByRef UnitSerialNumber As String, <System.Xml.Serialization.XmlElementAttribute("AllMAC")> ByRef AllMAC() As String, ByRef ImagePartNumber As String, ByRef CheckRouteResult As String) As String
            Dim results() As Object = Me.Invoke("GetUSNInfoByMAC", New Object() {MAC, StageCode, ModelFamily, Model, UnitPartNumber, MO, UnitSerialNumber, AllMAC, ImagePartNumber, CheckRouteResult})
            ModelFamily = CType(results(1),String)
            Model = CType(results(2),String)
            UnitPartNumber = CType(results(3),String)
            MO = CType(results(4),String)
            UnitSerialNumber = CType(results(5),String)
            AllMAC = CType(results(6),String())
            ImagePartNumber = CType(results(7),String)
            CheckRouteResult = CType(results(8),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNInfoByMACAsync(ByVal MAC As String, ByVal StageCode As String, ByVal ModelFamily As String, ByVal Model As String, ByVal UnitPartNumber As String, ByVal MO As String, ByVal UnitSerialNumber As String, ByVal AllMAC() As String, ByVal ImagePartNumber As String, ByVal CheckRouteResult As String)
            Me.GetUSNInfoByMACAsync(MAC, StageCode, ModelFamily, Model, UnitPartNumber, MO, UnitSerialNumber, AllMAC, ImagePartNumber, CheckRouteResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNInfoByMACAsync(ByVal MAC As String, ByVal StageCode As String, ByVal ModelFamily As String, ByVal Model As String, ByVal UnitPartNumber As String, ByVal MO As String, ByVal UnitSerialNumber As String, ByVal AllMAC() As String, ByVal ImagePartNumber As String, ByVal CheckRouteResult As String, ByVal userState As Object)
            If (Me.GetUSNInfoByMACOperationCompleted Is Nothing) Then
                Me.GetUSNInfoByMACOperationCompleted = AddressOf Me.OnGetUSNInfoByMACOperationCompleted
            End If
            Me.InvokeAsync("GetUSNInfoByMAC", New Object() {MAC, StageCode, ModelFamily, Model, UnitPartNumber, MO, UnitSerialNumber, AllMAC, ImagePartNumber, CheckRouteResult}, Me.GetUSNInfoByMACOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNInfoByMACOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNInfoByMACCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNInfoByMACCompleted(Me, New GetUSNInfoByMACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateSyncStatus", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSyncStatus(ByVal SINumber As String) As String
            Dim results() As Object = Me.Invoke("UpdateSyncStatus", New Object() {SINumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSyncStatusAsync(ByVal SINumber As String)
            Me.UpdateSyncStatusAsync(SINumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSyncStatusAsync(ByVal SINumber As String, ByVal userState As Object)
            If (Me.UpdateSyncStatusOperationCompleted Is Nothing) Then
                Me.UpdateSyncStatusOperationCompleted = AddressOf Me.OnUpdateSyncStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateSyncStatus", New Object() {SINumber}, Me.UpdateSyncStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSyncStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSyncStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSyncStatusCompleted(Me, New UpdateSyncStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetEarliestSIList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEarliestSIList(ByVal NeedRecordQty As String, ByVal OverThanDays As String) As String
            Dim results() As Object = Me.Invoke("GetEarliestSIList", New Object() {NeedRecordQty, OverThanDays})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEarliestSIListAsync(ByVal NeedRecordQty As String, ByVal OverThanDays As String)
            Me.GetEarliestSIListAsync(NeedRecordQty, OverThanDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEarliestSIListAsync(ByVal NeedRecordQty As String, ByVal OverThanDays As String, ByVal userState As Object)
            If (Me.GetEarliestSIListOperationCompleted Is Nothing) Then
                Me.GetEarliestSIListOperationCompleted = AddressOf Me.OnGetEarliestSIListOperationCompleted
            End If
            Me.InvokeAsync("GetEarliestSIList", New Object() {NeedRecordQty, OverThanDays}, Me.GetEarliestSIListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEarliestSIListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEarliestSIListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEarliestSIListCompleted(Me, New GetEarliestSIListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UpdateDeleteSIInfo", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDeleteSIInfo(ByVal SINumber As String) As String
            Dim results() As Object = Me.Invoke("UpdateDeleteSIInfo", New Object() {SINumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDeleteSIInfoAsync(ByVal SINumber As String)
            Me.UpdateDeleteSIInfoAsync(SINumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDeleteSIInfoAsync(ByVal SINumber As String, ByVal userState As Object)
            If (Me.UpdateDeleteSIInfoOperationCompleted Is Nothing) Then
                Me.UpdateDeleteSIInfoOperationCompleted = AddressOf Me.OnUpdateDeleteSIInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateDeleteSIInfo", New Object() {SINumber}, Me.UpdateDeleteSIInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDeleteSIInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDeleteSIInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDeleteSIInfoCompleted(Me, New UpdateDeleteSIInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetAvailableGradeList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAvailableGradeList(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetAvailableGradeList", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAvailableGradeListAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetAvailableGradeListAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAvailableGradeListAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetAvailableGradeListOperationCompleted Is Nothing) Then
                Me.GetAvailableGradeListOperationCompleted = AddressOf Me.OnGetAvailableGradeListOperationCompleted
            End If
            Me.InvokeAsync("GetAvailableGradeList", New Object() {UnitSerialNumber, StageCode}, Me.GetAvailableGradeListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAvailableGradeListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAvailableGradeListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAvailableGradeListCompleted(Me, New GetAvailableGradeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetLastGrade", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastGrade(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetLastGrade", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLastGradeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.GetLastGradeAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLastGradeAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetLastGradeOperationCompleted Is Nothing) Then
                Me.GetLastGradeOperationCompleted = AddressOf Me.OnGetLastGradeOperationCompleted
            End If
            Me.InvokeAsync("GetLastGrade", New Object() {UnitSerialNumber, StageCode}, Me.GetLastGradeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLastGradeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLastGradeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLastGradeCompleted(Me, New GetLastGradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/CheckSampling", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckSampling(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("CheckSampling", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckSamplingAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.CheckSamplingAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckSamplingAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.CheckSamplingOperationCompleted Is Nothing) Then
                Me.CheckSamplingOperationCompleted = AddressOf Me.OnCheckSamplingOperationCompleted
            End If
            Me.InvokeAsync("CheckSampling", New Object() {UnitSerialNumber, StageCode}, Me.CheckSamplingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckSamplingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckSamplingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckSamplingCompleted(Me, New CheckSamplingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetSkuBomData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSkuBomData(ByVal SkuPartNumber As String, ByVal Category As String, <System.Xml.Serialization.XmlArrayItemAttribute("SkuBomDatas")> ByRef SkuBomData() As clsSkuBomData) As String
            Dim results() As Object = Me.Invoke("GetSkuBomData", New Object() {SkuPartNumber, Category, SkuBomData})
            SkuBomData = CType(results(1),clsSkuBomData())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSkuBomDataAsync(ByVal SkuPartNumber As String, ByVal Category As String, ByVal SkuBomData() As clsSkuBomData)
            Me.GetSkuBomDataAsync(SkuPartNumber, Category, SkuBomData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSkuBomDataAsync(ByVal SkuPartNumber As String, ByVal Category As String, ByVal SkuBomData() As clsSkuBomData, ByVal userState As Object)
            If (Me.GetSkuBomDataOperationCompleted Is Nothing) Then
                Me.GetSkuBomDataOperationCompleted = AddressOf Me.OnGetSkuBomDataOperationCompleted
            End If
            Me.InvokeAsync("GetSkuBomData", New Object() {SkuPartNumber, Category, SkuBomData}, Me.GetSkuBomDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSkuBomDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSkuBomDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSkuBomDataCompleted(Me, New GetSkuBomDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetCurrentDBSysdate", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentDBSysdate(ByVal StageCode As String, ByVal DateTimeFormat As String) As String
            Dim results() As Object = Me.Invoke("GetCurrentDBSysdate", New Object() {StageCode, DateTimeFormat})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentDBSysdateAsync(ByVal StageCode As String, ByVal DateTimeFormat As String)
            Me.GetCurrentDBSysdateAsync(StageCode, DateTimeFormat, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentDBSysdateAsync(ByVal StageCode As String, ByVal DateTimeFormat As String, ByVal userState As Object)
            If (Me.GetCurrentDBSysdateOperationCompleted Is Nothing) Then
                Me.GetCurrentDBSysdateOperationCompleted = AddressOf Me.OnGetCurrentDBSysdateOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentDBSysdate", New Object() {StageCode, DateTimeFormat}, Me.GetCurrentDBSysdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentDBSysdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentDBSysdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentDBSysdateCompleted(Me, New GetCurrentDBSysdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetUSNByRIPalletID", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSNByRIPalletID(ByVal RIPalletID As String, ByVal StageCode As String, ByRef UnitSerialNumber As String) As String
            Dim results() As Object = Me.Invoke("GetUSNByRIPalletID", New Object() {RIPalletID, StageCode, UnitSerialNumber})
            UnitSerialNumber = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSNByRIPalletIDAsync(ByVal RIPalletID As String, ByVal StageCode As String, ByVal UnitSerialNumber As String)
            Me.GetUSNByRIPalletIDAsync(RIPalletID, StageCode, UnitSerialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSNByRIPalletIDAsync(ByVal RIPalletID As String, ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal userState As Object)
            If (Me.GetUSNByRIPalletIDOperationCompleted Is Nothing) Then
                Me.GetUSNByRIPalletIDOperationCompleted = AddressOf Me.OnGetUSNByRIPalletIDOperationCompleted
            End If
            Me.InvokeAsync("GetUSNByRIPalletID", New Object() {RIPalletID, StageCode, UnitSerialNumber}, Me.GetUSNByRIPalletIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSNByRIPalletIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSNByRIPalletIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSNByRIPalletIDCompleted(Me, New GetUSNByRIPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/BreakUpUSNRIPalletByUSN", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BreakUpUSNRIPalletByUSN(ByVal UnitSerialNumber As String, ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("BreakUpUSNRIPalletByUSN", New Object() {UnitSerialNumber, StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BreakUpUSNRIPalletByUSNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String)
            Me.BreakUpUSNRIPalletByUSNAsync(UnitSerialNumber, StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BreakUpUSNRIPalletByUSNAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal userState As Object)
            If (Me.BreakUpUSNRIPalletByUSNOperationCompleted Is Nothing) Then
                Me.BreakUpUSNRIPalletByUSNOperationCompleted = AddressOf Me.OnBreakUpUSNRIPalletByUSNOperationCompleted
            End If
            Me.InvokeAsync("BreakUpUSNRIPalletByUSN", New Object() {UnitSerialNumber, StageCode}, Me.BreakUpUSNRIPalletByUSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnBreakUpUSNRIPalletByUSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.BreakUpUSNRIPalletByUSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BreakUpUSNRIPalletByUSNCompleted(Me, New BreakUpUSNRIPalletByUSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMO53PNItem", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMO53PNItem(ByVal UnitSerialNumber As String, ByVal StageCode As String, <System.Xml.Serialization.XmlElementAttribute("53PNDesc")> ByRef Item53PNDesc As String) As String
            Dim results() As Object = Me.Invoke("GetMO53PNItem", New Object() {UnitSerialNumber, StageCode, Item53PNDesc})
            Item53PNDesc = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMO53PNItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Item53PNDesc As String)
            Me.GetMO53PNItemAsync(UnitSerialNumber, StageCode, Item53PNDesc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMO53PNItemAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal Item53PNDesc As String, ByVal userState As Object)
            If (Me.GetMO53PNItemOperationCompleted Is Nothing) Then
                Me.GetMO53PNItemOperationCompleted = AddressOf Me.OnGetMO53PNItemOperationCompleted
            End If
            Me.InvokeAsync("GetMO53PNItem", New Object() {UnitSerialNumber, StageCode, Item53PNDesc}, Me.GetMO53PNItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMO53PNItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMO53PNItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMO53PNItemCompleted(Me, New GetMO53PNItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetTEModelName", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTEModelName(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByRef TEModelName As String) As String
            Dim results() As Object = Me.Invoke("GetTEModelName", New Object() {UnitSerialNumber, StageCode, TEModelName})
            TEModelName = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTEModelNameAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TEModelName As String)
            Me.GetTEModelNameAsync(UnitSerialNumber, StageCode, TEModelName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTEModelNameAsync(ByVal UnitSerialNumber As String, ByVal StageCode As String, ByVal TEModelName As String, ByVal userState As Object)
            If (Me.GetTEModelNameOperationCompleted Is Nothing) Then
                Me.GetTEModelNameOperationCompleted = AddressOf Me.OnGetTEModelNameOperationCompleted
            End If
            Me.InvokeAsync("GetTEModelName", New Object() {UnitSerialNumber, StageCode, TEModelName}, Me.GetTEModelNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTEModelNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTEModelNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTEModelNameCompleted(Me, New GetTEModelNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetMFGTypeByStage", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMFGTypeByStage(ByVal StageCode As String) As String
            Dim results() As Object = Me.Invoke("GetMFGTypeByStage", New Object() {StageCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMFGTypeByStageAsync(ByVal StageCode As String)
            Me.GetMFGTypeByStageAsync(StageCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMFGTypeByStageAsync(ByVal StageCode As String, ByVal userState As Object)
            If (Me.GetMFGTypeByStageOperationCompleted Is Nothing) Then
                Me.GetMFGTypeByStageOperationCompleted = AddressOf Me.OnGetMFGTypeByStageOperationCompleted
            End If
            Me.InvokeAsync("GetMFGTypeByStage", New Object() {StageCode}, Me.GetMFGTypeByStageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMFGTypeByStageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMFGTypeByStageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMFGTypeByStageCompleted(Me, New GetMFGTypeByStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestEquipments", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTestEquipments(ByVal StageCode As String, <System.Xml.Serialization.XmlElementAttribute("TestEquipments")> ByVal TestEquipments() As String, ByVal Model As String) As String
            Dim results() As Object = Me.Invoke("UploadTestEquipments", New Object() {StageCode, TestEquipments, Model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTestEquipmentsAsync(ByVal StageCode As String, ByVal TestEquipments() As String, ByVal Model As String)
            Me.UploadTestEquipmentsAsync(StageCode, TestEquipments, Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTestEquipmentsAsync(ByVal StageCode As String, ByVal TestEquipments() As String, ByVal Model As String, ByVal userState As Object)
            If (Me.UploadTestEquipmentsOperationCompleted Is Nothing) Then
                Me.UploadTestEquipmentsOperationCompleted = AddressOf Me.OnUploadTestEquipmentsOperationCompleted
            End If
            Me.InvokeAsync("UploadTestEquipments", New Object() {StageCode, TestEquipments, Model}, Me.UploadTestEquipmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTestEquipmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTestEquipmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTestEquipmentsCompleted(Me, New UploadTestEquipmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestData", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTestData(ByVal StageCode As String, <System.Xml.Serialization.XmlElementAttribute("TestData")> ByVal TestData() As clsTestData) As String
            Dim results() As Object = Me.Invoke("UploadTestData", New Object() {StageCode, TestData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTestDataAsync(ByVal StageCode As String, ByVal TestData() As clsTestData)
            Me.UploadTestDataAsync(StageCode, TestData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTestDataAsync(ByVal StageCode As String, ByVal TestData() As clsTestData, ByVal userState As Object)
            If (Me.UploadTestDataOperationCompleted Is Nothing) Then
                Me.UploadTestDataOperationCompleted = AddressOf Me.OnUploadTestDataOperationCompleted
            End If
            Me.InvokeAsync("UploadTestData", New Object() {StageCode, TestData}, Me.UploadTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTestDataCompleted(Me, New UploadTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestEquipmentsWithString", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTestEquipmentsWithString(ByVal StageCode As String, ByVal TestEquipments As String, ByVal Model As String) As String
            Dim results() As Object = Me.Invoke("UploadTestEquipmentsWithString", New Object() {StageCode, TestEquipments, Model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTestEquipmentsWithStringAsync(ByVal StageCode As String, ByVal TestEquipments As String, ByVal Model As String)
            Me.UploadTestEquipmentsWithStringAsync(StageCode, TestEquipments, Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTestEquipmentsWithStringAsync(ByVal StageCode As String, ByVal TestEquipments As String, ByVal Model As String, ByVal userState As Object)
            If (Me.UploadTestEquipmentsWithStringOperationCompleted Is Nothing) Then
                Me.UploadTestEquipmentsWithStringOperationCompleted = AddressOf Me.OnUploadTestEquipmentsWithStringOperationCompleted
            End If
            Me.InvokeAsync("UploadTestEquipmentsWithString", New Object() {StageCode, TestEquipments, Model}, Me.UploadTestEquipmentsWithStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTestEquipmentsWithStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTestEquipmentsWithStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTestEquipmentsWithStringCompleted(Me, New UploadTestEquipmentsWithStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadTestDataWithString", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTestDataWithString(ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal TestDataType As String, ByVal TestData As String) As String
            Dim results() As Object = Me.Invoke("UploadTestDataWithString", New Object() {StageCode, UnitSerialNumber, TestDataType, TestData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTestDataWithStringAsync(ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal TestDataType As String, ByVal TestData As String)
            Me.UploadTestDataWithStringAsync(StageCode, UnitSerialNumber, TestDataType, TestData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTestDataWithStringAsync(ByVal StageCode As String, ByVal UnitSerialNumber As String, ByVal TestDataType As String, ByVal TestData As String, ByVal userState As Object)
            If (Me.UploadTestDataWithStringOperationCompleted Is Nothing) Then
                Me.UploadTestDataWithStringOperationCompleted = AddressOf Me.OnUploadTestDataWithStringOperationCompleted
            End If
            Me.InvokeAsync("UploadTestDataWithString", New Object() {StageCode, UnitSerialNumber, TestDataType, TestData}, Me.UploadTestDataWithStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTestDataWithStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTestDataWithStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTestDataWithStringCompleted(Me, New UploadTestDataWithStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/UploadFGCode", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFGCode(ByVal ProductCode As String, ByVal Status As String) As String
            Dim results() As Object = Me.Invoke("UploadFGCode", New Object() {ProductCode, Status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFGCodeAsync(ByVal ProductCode As String, ByVal Status As String)
            Me.UploadFGCodeAsync(ProductCode, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFGCodeAsync(ByVal ProductCode As String, ByVal Status As String, ByVal userState As Object)
            If (Me.UploadFGCodeOperationCompleted Is Nothing) Then
                Me.UploadFGCodeOperationCompleted = AddressOf Me.OnUploadFGCodeOperationCompleted
            End If
            Me.InvokeAsync("UploadFGCode", New Object() {ProductCode, Status}, Me.UploadFGCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFGCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFGCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFGCodeCompleted(Me, New UploadFGCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Tester.WebService/WebService/GetPreparedMOList", RequestNamespace:="http://localhost/Tester.WebService/WebService", ResponseNamespace:="http://localhost/Tester.WebService/WebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreparedMOList(ByVal StageCode As String, ByRef GetResult As String) As clsPreparedMO()
            Dim results() As Object = Me.Invoke("GetPreparedMOList", New Object() {StageCode, GetResult})
            GetResult = CType(results(1),String)
            Return CType(results(0),clsPreparedMO())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreparedMOListAsync(ByVal StageCode As String, ByVal GetResult As String)
            Me.GetPreparedMOListAsync(StageCode, GetResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreparedMOListAsync(ByVal StageCode As String, ByVal GetResult As String, ByVal userState As Object)
            If (Me.GetPreparedMOListOperationCompleted Is Nothing) Then
                Me.GetPreparedMOListOperationCompleted = AddressOf Me.OnGetPreparedMOListOperationCompleted
            End If
            Me.InvokeAsync("GetPreparedMOList", New Object() {StageCode, GetResult}, Me.GetPreparedMOListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreparedMOListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreparedMOListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreparedMOListCompleted(Me, New GetPreparedMOListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsWSInfo
        
        Private assemblyTitleField As String
        
        Private assemblyDescriptionField As String
        
        Private assemblyCompanyField As String
        
        Private assemblyProductField As String
        
        Private assemblyCopyrightField As String
        
        Private assemblyTrademarkField As String
        
        Private assemblyVersionField As String
        
        Private cLSCompliantField As String
        
        Private debuggableField As String
        
        Private guidField As String
        
        '''<remarks/>
        Public Property AssemblyTitle() As String
            Get
                Return Me.assemblyTitleField
            End Get
            Set
                Me.assemblyTitleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AssemblyDescription() As String
            Get
                Return Me.assemblyDescriptionField
            End Get
            Set
                Me.assemblyDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AssemblyCompany() As String
            Get
                Return Me.assemblyCompanyField
            End Get
            Set
                Me.assemblyCompanyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AssemblyProduct() As String
            Get
                Return Me.assemblyProductField
            End Get
            Set
                Me.assemblyProductField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AssemblyCopyright() As String
            Get
                Return Me.assemblyCopyrightField
            End Get
            Set
                Me.assemblyCopyrightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AssemblyTrademark() As String
            Get
                Return Me.assemblyTrademarkField
            End Get
            Set
                Me.assemblyTrademarkField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AssemblyVersion() As String
            Get
                Return Me.assemblyVersionField
            End Get
            Set
                Me.assemblyVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLSCompliant() As String
            Get
                Return Me.cLSCompliantField
            End Get
            Set
                Me.cLSCompliantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Debuggable() As String
            Get
                Return Me.debuggableField
            End Get
            Set
                Me.debuggableField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Guid() As String
            Get
                Return Me.guidField
            End Get
            Set
                Me.guidField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsPreparedMO
        
        Private moField As String
        
        Private minSeqField As Short
        
        Private maxSeqField As Short
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MinSeq() As Short
            Get
                Return Me.minSeqField
            End Get
            Set
                Me.minSeqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MaxSeq() As Short
            Get
                Return Me.maxSeqField
            End Get
            Set
                Me.maxSeqField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsTestData
        
        Private uSNField As String
        
        Private dataTypeField As TestDataType
        
        Private patternField As String
        
        Private patternSeqField As Integer
        
        Private valueField As Double
        
        '''<remarks/>
        Public Property USN() As String
            Get
                Return Me.uSNField
            End Get
            Set
                Me.uSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DataType() As TestDataType
            Get
                Return Me.dataTypeField
            End Get
            Set
                Me.dataTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Pattern() As String
            Get
                Return Me.patternField
            End Get
            Set
                Me.patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PatternSeq() As Integer
            Get
                Return Me.patternSeqField
            End Get
            Set
                Me.patternSeqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As Double
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Public Enum TestDataType
        
        '''<remarks/>
        ReservedType0
        
        '''<remarks/>
        sRGB
        
        '''<remarks/>
        AdobeRGB
        
        '''<remarks/>
        GrayTracking
        
        '''<remarks/>
        Gamma
        
        '''<remarks/>
        Color
        
        '''<remarks/>
        Brightness
        
        '''<remarks/>
        sRGB_X
        
        '''<remarks/>
        sRGB_Y
        
        '''<remarks/>
        Adobe_X
        
        '''<remarks/>
        Adobe_Y
        
        '''<remarks/>
        NativeRGB
        
        '''<remarks/>
        ReservedType1
        
        '''<remarks/>
        ReservedType2
        
        '''<remarks/>
        ReservedType3
        
        '''<remarks/>
        ReservedType4
        
        '''<remarks/>
        ReservedType5
        
        '''<remarks/>
        ReservedType6
        
        '''<remarks/>
        ReservedType7
        
        '''<remarks/>
        ReservedType8
        
        '''<remarks/>
        ReservedType9
        
        '''<remarks/>
        ReservedType10
        
        '''<remarks/>
        ReservedType11
        
        '''<remarks/>
        ReservedType12
        
        '''<remarks/>
        ReservedType13
        
        '''<remarks/>
        ReservedType14
        
        '''<remarks/>
        ReservedType15
        
        '''<remarks/>
        ReservedType16
        
        '''<remarks/>
        ReservedType17
        
        '''<remarks/>
        ReservedType18
        
        '''<remarks/>
        ReservedType19
        
        '''<remarks/>
        ReservedType20
        
        '''<remarks/>
        ReservedType21
        
        '''<remarks/>
        ReservedType22
        
        '''<remarks/>
        ReservedType23
        
        '''<remarks/>
        ReservedType24
        
        '''<remarks/>
        ReservedType25
        
        '''<remarks/>
        ReservedType26
        
        '''<remarks/>
        ReservedType27
        
        '''<remarks/>
        ReservedType28
        
        '''<remarks/>
        ReservedType29
        
        '''<remarks/>
        ReservedType30
        
        '''<remarks/>
        ReservedType31
        
        '''<remarks/>
        ReservedType32
        
        '''<remarks/>
        ReservedType33
        
        '''<remarks/>
        ReservedType34
        
        '''<remarks/>
        ReservedType35
        
        '''<remarks/>
        ReservedType36
        
        '''<remarks/>
        ReservedType37
        
        '''<remarks/>
        ReservedType38
        
        '''<remarks/>
        ReservedType39
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsSkuBomData
        
        Private skuPNField As String
        
        Private categoryField As String
        
        Private cPNField As String
        
        Private descriptionField As String
        
        '''<remarks/>
        Public Property SkuPN() As String
            Get
                Return Me.skuPNField
            End Get
            Set
                Me.skuPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Category() As String
            Get
                Return Me.categoryField
            End Get
            Set
                Me.categoryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsSWCPN
        
        Private cPNField As String
        
        Private descriptionField As String
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsRequestItem
        
        Private itemField As String
        
        Private valueField As String
        
        '''<remarks/>
        Public Property Item() As String
            Get
                Return Me.itemField
            End Get
            Set
                Me.itemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsRequestData
        
        Private moField As String
        
        Private modelField As String
        
        Private uPNField As String
        
        Private modelFamilyField As String
        
        Private poField As String
        
        Private resultField As String
        
        Private requestItemField() As clsRequestItem
        
        Private customerUPNField As String
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UPN() As String
            Get
                Return Me.uPNField
            End Get
            Set
                Me.uPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModelFamily() As String
            Get
                Return Me.modelFamilyField
            End Get
            Set
                Me.modelFamilyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PO() As String
            Get
                Return Me.poField
            End Get
            Set
                Me.poField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RequestItem() As clsRequestItem()
            Get
                Return Me.requestItemField
            End Get
            Set
                Me.requestItemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerUPN() As String
            Get
                Return Me.customerUPNField
            End Get
            Set
                Me.customerUPNField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsSPCConfigItem
        
        Private sPCTypeField As String
        
        Private sPCItemField As String
        
        Private sPCSUBITEMField As String
        
        Private upperLimitField As String
        
        Private lowerLimitField As String
        
        Private enableField As Integer
        
        '''<remarks/>
        Public Property SPCType() As String
            Get
                Return Me.sPCTypeField
            End Get
            Set
                Me.sPCTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SPCItem() As String
            Get
                Return Me.sPCItemField
            End Get
            Set
                Me.sPCItemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SPCSUBITEM() As String
            Get
                Return Me.sPCSUBITEMField
            End Get
            Set
                Me.sPCSUBITEMField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UpperLimit() As String
            Get
                Return Me.upperLimitField
            End Get
            Set
                Me.upperLimitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LowerLimit() As String
            Get
                Return Me.lowerLimitField
            End Get
            Set
                Me.lowerLimitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Enable() As Integer
            Get
                Return Me.enableField
            End Get
            Set
                Me.enableField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsSPCConfig
        
        Private moField As String
        
        Private modelField As String
        
        Private uPNField As String
        
        Private modelFamilyField As String
        
        Private sPCConfigItemsField() As clsSPCConfigItem
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UPN() As String
            Get
                Return Me.uPNField
            End Get
            Set
                Me.uPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModelFamily() As String
            Get
                Return Me.modelFamilyField
            End Get
            Set
                Me.modelFamilyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SPCConfigItems() As clsSPCConfigItem()
            Get
                Return Me.sPCConfigItemsField
            End Get
            Set
                Me.sPCConfigItemsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsMessage
        
        Private idField As String
        
        Private messageField As String
        
        Private languageField As String
        
        Private moduleNameField As String
        
        Private typeField As String
        
        '''<remarks/>
        Public Property ID() As String
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Language() As String
            Get
                Return Me.languageField
            End Get
            Set
                Me.languageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModuleName() As String
            Get
                Return Me.moduleNameField
            End Get
            Set
                Me.moduleNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsGetUSNInfoResult
        
        Private resultField As String
        
        Private uSNField As String
        
        Private modelField As String
        
        Private productCodeField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USN() As String
            Get
                Return Me.uSNField
            End Get
            Set
                Me.uSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProductCode() As String
            Get
                Return Me.productCodeField
            End Get
            Set
                Me.productCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsGetTestSuiteInfoResult
        
        Private resultField As String
        
        Private uSNField As String
        
        Private stageCodeField As String
        
        Private modelField As String
        
        Private workStationField As String
        
        Private programVersionField As String
        
        Private flowVersionField As String
        
        Private fileNameField As String
        
        Private filePathField As String
        
        Private checkSumField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USN() As String
            Get
                Return Me.uSNField
            End Get
            Set
                Me.uSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StageCode() As String
            Get
                Return Me.stageCodeField
            End Get
            Set
                Me.stageCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WorkStation() As String
            Get
                Return Me.workStationField
            End Get
            Set
                Me.workStationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProgramVersion() As String
            Get
                Return Me.programVersionField
            End Get
            Set
                Me.programVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FlowVersion() As String
            Get
                Return Me.flowVersionField
            End Get
            Set
                Me.flowVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FileName() As String
            Get
                Return Me.fileNameField
            End Get
            Set
                Me.fileNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FilePath() As String
            Get
                Return Me.filePathField
            End Get
            Set
                Me.filePathField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckSum() As String
            Get
                Return Me.checkSumField
            End Get
            Set
                Me.checkSumField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsCA210OffsetResult
        
        Private resultField As String
        
        Private cA210SNField As String
        
        Private modelField As String
        
        Private probeSNField As String
        
        Private sourceField As String
        
        Private colorTemperatureField As String
        
        Private lineField As String
        
        Private workStationField As String
        
        Private targetGainAField As String
        
        Private targetGainBField As String
        
        Private targetGainLVField As String
        
        Private targetOffsetAField As String
        
        Private targetOffsetBField As String
        
        Private targetOffsetLVField As String
        
        Private target100IreAField As String
        
        Private target100IreBField As String
        
        Private target100IreLVField As String
        
        Private offsetGainAField As String
        
        Private offsetGainBField As String
        
        Private offsetGainLVField As String
        
        Private offsetOffsetAField As String
        
        Private offsetOffsetBField As String
        
        Private offsetOffsetLVField As String
        
        Private offset100IreAField As String
        
        Private offset100IreBField As String
        
        Private offset100IreLVField As String
        
        Private recordTimeField As String
        
        Private userIDField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CA210SN() As String
            Get
                Return Me.cA210SNField
            End Get
            Set
                Me.cA210SNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProbeSN() As String
            Get
                Return Me.probeSNField
            End Get
            Set
                Me.probeSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Source() As String
            Get
                Return Me.sourceField
            End Get
            Set
                Me.sourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ColorTemperature() As String
            Get
                Return Me.colorTemperatureField
            End Get
            Set
                Me.colorTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WorkStation() As String
            Get
                Return Me.workStationField
            End Get
            Set
                Me.workStationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetGainA() As String
            Get
                Return Me.targetGainAField
            End Get
            Set
                Me.targetGainAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetGainB() As String
            Get
                Return Me.targetGainBField
            End Get
            Set
                Me.targetGainBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetGainLV() As String
            Get
                Return Me.targetGainLVField
            End Get
            Set
                Me.targetGainLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetOffsetA() As String
            Get
                Return Me.targetOffsetAField
            End Get
            Set
                Me.targetOffsetAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetOffsetB() As String
            Get
                Return Me.targetOffsetBField
            End Get
            Set
                Me.targetOffsetBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetOffsetLV() As String
            Get
                Return Me.targetOffsetLVField
            End Get
            Set
                Me.targetOffsetLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Target100IreA() As String
            Get
                Return Me.target100IreAField
            End Get
            Set
                Me.target100IreAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Target100IreB() As String
            Get
                Return Me.target100IreBField
            End Get
            Set
                Me.target100IreBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Target100IreLV() As String
            Get
                Return Me.target100IreLVField
            End Get
            Set
                Me.target100IreLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetGainA() As String
            Get
                Return Me.offsetGainAField
            End Get
            Set
                Me.offsetGainAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetGainB() As String
            Get
                Return Me.offsetGainBField
            End Get
            Set
                Me.offsetGainBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetGainLV() As String
            Get
                Return Me.offsetGainLVField
            End Get
            Set
                Me.offsetGainLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetOffsetA() As String
            Get
                Return Me.offsetOffsetAField
            End Get
            Set
                Me.offsetOffsetAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetOffsetB() As String
            Get
                Return Me.offsetOffsetBField
            End Get
            Set
                Me.offsetOffsetBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetOffsetLV() As String
            Get
                Return Me.offsetOffsetLVField
            End Get
            Set
                Me.offsetOffsetLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset100IreA() As String
            Get
                Return Me.offset100IreAField
            End Get
            Set
                Me.offset100IreAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset100IreB() As String
            Get
                Return Me.offset100IreBField
            End Get
            Set
                Me.offset100IreBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset100IreLV() As String
            Get
                Return Me.offset100IreLVField
            End Get
            Set
                Me.offset100IreLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecordTime() As String
            Get
                Return Me.recordTimeField
            End Get
            Set
                Me.recordTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsCA210OffsetCheckFlag
        
        Private cA210SNField As String
        
        Private sourceField As String
        
        Private colorTemperatureField As String
        
        Private lineField As String
        
        Private workStationField As String
        
        Private targetGainAField As String
        
        Private targetGainBField As String
        
        Private targetGainLVField As String
        
        Private targetOffsetAField As String
        
        Private targetOffsetBField As String
        
        Private targetOffsetLVField As String
        
        Private target100IreAField As String
        
        Private target100IreBField As String
        
        Private target100IreLVField As String
        
        Private offsetGainAField As String
        
        Private offsetGainBField As String
        
        Private offsetGainLVField As String
        
        Private offsetOffsetAField As String
        
        Private offsetOffsetBField As String
        
        Private offsetOffsetLVField As String
        
        Private offset100IreAField As String
        
        Private offset100IreBField As String
        
        Private offset100IreLVField As String
        
        Private userIDField As String
        
        '''<remarks/>
        Public Property CA210SN() As String
            Get
                Return Me.cA210SNField
            End Get
            Set
                Me.cA210SNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Source() As String
            Get
                Return Me.sourceField
            End Get
            Set
                Me.sourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ColorTemperature() As String
            Get
                Return Me.colorTemperatureField
            End Get
            Set
                Me.colorTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WorkStation() As String
            Get
                Return Me.workStationField
            End Get
            Set
                Me.workStationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetGainA() As String
            Get
                Return Me.targetGainAField
            End Get
            Set
                Me.targetGainAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetGainB() As String
            Get
                Return Me.targetGainBField
            End Get
            Set
                Me.targetGainBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetGainLV() As String
            Get
                Return Me.targetGainLVField
            End Get
            Set
                Me.targetGainLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetOffsetA() As String
            Get
                Return Me.targetOffsetAField
            End Get
            Set
                Me.targetOffsetAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetOffsetB() As String
            Get
                Return Me.targetOffsetBField
            End Get
            Set
                Me.targetOffsetBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TargetOffsetLV() As String
            Get
                Return Me.targetOffsetLVField
            End Get
            Set
                Me.targetOffsetLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Target100IreA() As String
            Get
                Return Me.target100IreAField
            End Get
            Set
                Me.target100IreAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Target100IreB() As String
            Get
                Return Me.target100IreBField
            End Get
            Set
                Me.target100IreBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Target100IreLV() As String
            Get
                Return Me.target100IreLVField
            End Get
            Set
                Me.target100IreLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetGainA() As String
            Get
                Return Me.offsetGainAField
            End Get
            Set
                Me.offsetGainAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetGainB() As String
            Get
                Return Me.offsetGainBField
            End Get
            Set
                Me.offsetGainBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetGainLV() As String
            Get
                Return Me.offsetGainLVField
            End Get
            Set
                Me.offsetGainLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetOffsetA() As String
            Get
                Return Me.offsetOffsetAField
            End Get
            Set
                Me.offsetOffsetAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetOffsetB() As String
            Get
                Return Me.offsetOffsetBField
            End Get
            Set
                Me.offsetOffsetBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OffsetOffsetLV() As String
            Get
                Return Me.offsetOffsetLVField
            End Get
            Set
                Me.offsetOffsetLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset100IreA() As String
            Get
                Return Me.offset100IreAField
            End Get
            Set
                Me.offset100IreAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset100IreB() As String
            Get
                Return Me.offset100IreBField
            End Get
            Set
                Me.offset100IreBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset100IreLV() As String
            Get
                Return Me.offset100IreLVField
            End Get
            Set
                Me.offset100IreLVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsMO
        
        Private moField As String
        
        Private planDateField As String
        
        Private createDateField As String
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PlanDate() As String
            Get
                Return Me.planDateField
            End Get
            Set
                Me.planDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateDate() As String
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsCIPlusKey
        
        Private cIPlusKeyField As String
        
        Private stageCodeField As String
        
        Private codeTypeField As String
        
        Private codeField As String
        
        '''<remarks/>
        Public Property CIPlusKey() As String
            Get
                Return Me.cIPlusKeyField
            End Get
            Set
                Me.cIPlusKeyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StageCode() As String
            Get
                Return Me.stageCodeField
            End Get
            Set
                Me.stageCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CodeType() As String
            Get
                Return Me.codeTypeField
            End Get
            Set
                Me.codeTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Code() As String
            Get
                Return Me.codeField
            End Get
            Set
                Me.codeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsHDCPKey
        
        Private bKSVField As String
        
        Private stageCodeField As String
        
        Private codeTypeField As String
        
        Private codeField As String
        
        '''<remarks/>
        Public Property BKSV() As String
            Get
                Return Me.bKSVField
            End Get
            Set
                Me.bKSVField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StageCode() As String
            Get
                Return Me.stageCodeField
            End Get
            Set
                Me.stageCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CodeType() As String
            Get
                Return Me.codeTypeField
            End Get
            Set
                Me.codeTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Code() As String
            Get
                Return Me.codeField
            End Get
            Set
                Me.codeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsKtlOutEvent
        
        Private uSNField As String
        
        Private lineField As String
        
        Private workstationField As String
        
        Private locationField As String
        
        Private ipField As String
        
        Private portField As String
        
        Private hardwareNodeIdField As String
        
        Private commandField As String
        
        Private dataField As String
        
        '''<remarks/>
        Public Property USN() As String
            Get
                Return Me.uSNField
            End Get
            Set
                Me.uSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Workstation() As String
            Get
                Return Me.workstationField
            End Get
            Set
                Me.workstationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Location() As String
            Get
                Return Me.locationField
            End Get
            Set
                Me.locationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Ip() As String
            Get
                Return Me.ipField
            End Get
            Set
                Me.ipField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Port() As String
            Get
                Return Me.portField
            End Get
            Set
                Me.portField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HardwareNodeId() As String
            Get
                Return Me.hardwareNodeIdField
            End Get
            Set
                Me.hardwareNodeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Command() As String
            Get
                Return Me.commandField
            End Get
            Set
                Me.commandField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Data() As String
            Get
                Return Me.dataField
            End Get
            Set
                Me.dataField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsBomPnDescription
        
        Private parentPNField As String
        
        Private pnField As String
        
        Private descriptionField As String
        
        Private levelField As String
        
        '''<remarks/>
        Public Property ParentPN() As String
            Get
                Return Me.parentPNField
            End Get
            Set
                Me.parentPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PN() As String
            Get
                Return Me.pnField
            End Get
            Set
                Me.pnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Level() As String
            Get
                Return Me.levelField
            End Get
            Set
                Me.levelField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsTvDacData
        
        Private uSNField As String
        
        Private lineField As String
        
        Private stageCodeField As String
        
        Private workstationField As String
        
        Private colorTypeField As Integer
        
        Private rCutField As Integer
        
        Private gCutField As Integer
        
        Private bCutField As Integer
        
        Private rGainField As Integer
        
        Private gGainField As Integer
        
        Private bGainField As Integer
        
        '''<remarks/>
        Public Property USN() As String
            Get
                Return Me.uSNField
            End Get
            Set
                Me.uSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StageCode() As String
            Get
                Return Me.stageCodeField
            End Get
            Set
                Me.stageCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Workstation() As String
            Get
                Return Me.workstationField
            End Get
            Set
                Me.workstationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ColorType() As Integer
            Get
                Return Me.colorTypeField
            End Get
            Set
                Me.colorTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RCut() As Integer
            Get
                Return Me.rCutField
            End Get
            Set
                Me.rCutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GCut() As Integer
            Get
                Return Me.gCutField
            End Get
            Set
                Me.gCutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BCut() As Integer
            Get
                Return Me.bCutField
            End Get
            Set
                Me.bCutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RGain() As Integer
            Get
                Return Me.rGainField
            End Get
            Set
                Me.rGainField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GGain() As Integer
            Get
                Return Me.gGainField
            End Get
            Set
                Me.gGainField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BGain() As Integer
            Get
                Return Me.bGainField
            End Get
            Set
                Me.bGainField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class cls2SLabelInfo
        
        Private exist2SLabelField As Boolean
        
        Private s2SLabelField As String
        
        Private arrBrandField() As String
        
        Private partNumberField As String
        
        Private traceIDField As String
        
        Private packageQtyField As Integer
        
        '''<remarks/>
        Public Property Exist2SLabel() As Boolean
            Get
                Return Me.exist2SLabelField
            End Get
            Set
                Me.exist2SLabelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property s2SLabel() As String
            Get
                Return Me.s2SLabelField
            End Get
            Set
                Me.s2SLabelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property arrBrand() As String()
            Get
                Return Me.arrBrandField
            End Get
            Set
                Me.arrBrandField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PartNumber() As String
            Get
                Return Me.partNumberField
            End Get
            Set
                Me.partNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TraceID() As String
            Get
                Return Me.traceIDField
            End Get
            Set
                Me.traceIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PackageQty() As Integer
            Get
                Return Me.packageQtyField
            End Get
            Set
                Me.packageQtyField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsLog
        
        Private wOPKIDField As String
        
        Private stepSNField As Integer
        
        Private seqNoField As Integer
        
        Private typeField As Integer
        
        Private okField As String
        
        Private ngField As String
        
        Private errorCodeField As Integer
        
        Private descriptionField As String
        
        '''<remarks/>
        Public Property WOPKID() As String
            Get
                Return Me.wOPKIDField
            End Get
            Set
                Me.wOPKIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StepSN() As Integer
            Get
                Return Me.stepSNField
            End Get
            Set
                Me.stepSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SeqNo() As Integer
            Get
                Return Me.seqNoField
            End Get
            Set
                Me.seqNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As Integer
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OK() As String
            Get
                Return Me.okField
            End Get
            Set
                Me.okField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NG() As String
            Get
                Return Me.ngField
            End Get
            Set
                Me.ngField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorCode() As Integer
            Get
                Return Me.errorCodeField
            End Get
            Set
                Me.errorCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsStep
        
        Private wOPKIDField As String
        
        Private stepSNField As Integer
        
        Private fUNCField As Integer
        
        Private sideField As Integer
        
        Private sheetNoField As String
        
        Private feederField As String
        
        Private zoneField As String
        
        Private pKZoneField As String
        
        Private rLCNField As String
        
        Private qanaField As Integer
        
        Private doneField As Integer
        
        '''<remarks/>
        Public Property WOPKID() As String
            Get
                Return Me.wOPKIDField
            End Get
            Set
                Me.wOPKIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StepSN() As Integer
            Get
                Return Me.stepSNField
            End Get
            Set
                Me.stepSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FUNC() As Integer
            Get
                Return Me.fUNCField
            End Get
            Set
                Me.fUNCField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Side() As Integer
            Get
                Return Me.sideField
            End Get
            Set
                Me.sideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SheetNo() As String
            Get
                Return Me.sheetNoField
            End Get
            Set
                Me.sheetNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Feeder() As String
            Get
                Return Me.feederField
            End Get
            Set
                Me.feederField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zone() As String
            Get
                Return Me.zoneField
            End Get
            Set
                Me.zoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PKZone() As String
            Get
                Return Me.pKZoneField
            End Get
            Set
                Me.pKZoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RLCN() As String
            Get
                Return Me.rLCNField
            End Get
            Set
                Me.rLCNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Qana() As Integer
            Get
                Return Me.qanaField
            End Get
            Set
                Me.qanaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Done() As Integer
            Get
                Return Me.doneField
            End Get
            Set
                Me.doneField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsZone
        
        Private lineField As String
        
        Private mcnoField As Integer
        
        Private zoneField As String
        
        Private trayField As Integer
        
        Private sideField As Integer
        
        Private pKZoneField As String
        
        Private feederField As String
        
        Private qanaField As Integer
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mcno() As Integer
            Get
                Return Me.mcnoField
            End Get
            Set
                Me.mcnoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zone() As String
            Get
                Return Me.zoneField
            End Get
            Set
                Me.zoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tray() As Integer
            Get
                Return Me.trayField
            End Get
            Set
                Me.trayField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Side() As Integer
            Get
                Return Me.sideField
            End Get
            Set
                Me.sideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PKZone() As String
            Get
                Return Me.pKZoneField
            End Get
            Set
                Me.pKZoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Feeder() As String
            Get
                Return Me.feederField
            End Get
            Set
                Me.feederField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Qana() As Integer
            Get
                Return Me.qanaField
            End Get
            Set
                Me.qanaField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsFeeder
        
        Private feederField As String
        
        Private sheetNoField As String
        
        Private lastCountField As Integer
        
        Private repairCountField As Integer
        
        Private usedCountField As Integer
        
        Private failCountField As Integer
        
        Private rLCNField As String
        
        Private ngField As Integer
        
        '''<remarks/>
        Public Property Feeder() As String
            Get
                Return Me.feederField
            End Get
            Set
                Me.feederField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SheetNo() As String
            Get
                Return Me.sheetNoField
            End Get
            Set
                Me.sheetNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastCount() As Integer
            Get
                Return Me.lastCountField
            End Get
            Set
                Me.lastCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RepairCount() As Integer
            Get
                Return Me.repairCountField
            End Get
            Set
                Me.repairCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UsedCount() As Integer
            Get
                Return Me.usedCountField
            End Get
            Set
                Me.usedCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FailCount() As Integer
            Get
                Return Me.failCountField
            End Get
            Set
                Me.failCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RLCN() As String
            Get
                Return Me.rLCNField
            End Get
            Set
                Me.rLCNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NG() As Integer
            Get
                Return Me.ngField
            End Get
            Set
                Me.ngField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsRLC
        
        Private rLCNField As String
        
        Private itemField As String
        
        Private barcField As String
        
        Private lotNField As String
        
        Private brandField As String
        
        Private bodyMarkField As String
        
        Private qORIField As Integer
        
        Private rLC_SheetnoField As String
        
        Private rLCField As Integer
        
        Private qANAField As Integer
        
        Private polarityField As String
        
        Private checkLabelField As Boolean
        
        '''<remarks/>
        Public Property RLCN() As String
            Get
                Return Me.rLCNField
            End Get
            Set
                Me.rLCNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Item() As String
            Get
                Return Me.itemField
            End Get
            Set
                Me.itemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Barc() As String
            Get
                Return Me.barcField
            End Get
            Set
                Me.barcField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LotN() As String
            Get
                Return Me.lotNField
            End Get
            Set
                Me.lotNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Brand() As String
            Get
                Return Me.brandField
            End Get
            Set
                Me.brandField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BodyMark() As String
            Get
                Return Me.bodyMarkField
            End Get
            Set
                Me.bodyMarkField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QORI() As Integer
            Get
                Return Me.qORIField
            End Get
            Set
                Me.qORIField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RLC_Sheetno() As String
            Get
                Return Me.rLC_SheetnoField
            End Get
            Set
                Me.rLC_SheetnoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RLC() As Integer
            Get
                Return Me.rLCField
            End Get
            Set
                Me.rLCField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QANA() As Integer
            Get
                Return Me.qANAField
            End Get
            Set
                Me.qANAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Polarity() As String
            Get
                Return Me.polarityField
            End Get
            Set
                Me.polarityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckLabel() As Boolean
            Get
                Return Me.checkLabelField
            End Get
            Set
                Me.checkLabelField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsReel
        
        Private rLCsField As clsRLC
        
        Private feedersField As clsFeeder
        
        Private zonesField As clsZone
        
        Private sheetnoField As String
        
        Private wOPKIDField As String
        
        Private pickSNField As Integer
        
        Private putIn_QtyField As Integer
        
        Private tray_QtyField As Integer
        
        '''<remarks/>
        Public Property RLCs() As clsRLC
            Get
                Return Me.rLCsField
            End Get
            Set
                Me.rLCsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Feeders() As clsFeeder
            Get
                Return Me.feedersField
            End Get
            Set
                Me.feedersField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zones() As clsZone
            Get
                Return Me.zonesField
            End Get
            Set
                Me.zonesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Sheetno() As String
            Get
                Return Me.sheetnoField
            End Get
            Set
                Me.sheetnoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WOPKID() As String
            Get
                Return Me.wOPKIDField
            End Get
            Set
                Me.wOPKIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PickSN() As Integer
            Get
                Return Me.pickSNField
            End Get
            Set
                Me.pickSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PutIn_Qty() As Integer
            Get
                Return Me.putIn_QtyField
            End Get
            Set
                Me.putIn_QtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tray_Qty() As Integer
            Get
                Return Me.tray_QtyField
            End Get
            Set
                Me.tray_QtyField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsPKList
        
        Private zoneField As String
        
        Private itemField As String
        
        Private qtyPerField As Integer
        
        Private mZoneField As String
        
        Private feedField As String
        
        Private readyField As Boolean
        
        Private polarityField As String
        
        '''<remarks/>
        Public Property Zone() As String
            Get
                Return Me.zoneField
            End Get
            Set
                Me.zoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Item() As String
            Get
                Return Me.itemField
            End Get
            Set
                Me.itemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QtyPer() As Integer
            Get
                Return Me.qtyPerField
            End Get
            Set
                Me.qtyPerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MZone() As String
            Get
                Return Me.mZoneField
            End Get
            Set
                Me.mZoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Feed() As String
            Get
                Return Me.feedField
            End Get
            Set
                Me.feedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Ready() As Boolean
            Get
                Return Me.readyField
            End Get
            Set
                Me.readyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Polarity() As String
            Get
                Return Me.polarityField
            End Get
            Set
                Me.polarityField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsSheet
        
        Private sheetNoField As String
        
        Private wOPKIDField As String
        
        Private pICKSNField As Integer
        
        Private oP_ModeField As Integer
        
        Private moField As String
        
        Private locaField As String
        
        Private combineField As Integer
        
        Private sPNField As String
        
        Private lineField As String
        
        Private mcnoField As Integer
        
        Private faceField As Integer
        
        Private statField As Integer
        
        Private stepSNField As Integer
        
        Private zonesField As Integer
        
        '''<remarks/>
        Public Property SheetNo() As String
            Get
                Return Me.sheetNoField
            End Get
            Set
                Me.sheetNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WOPKID() As String
            Get
                Return Me.wOPKIDField
            End Get
            Set
                Me.wOPKIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PICKSN() As Integer
            Get
                Return Me.pICKSNField
            End Get
            Set
                Me.pICKSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OP_Mode() As Integer
            Get
                Return Me.oP_ModeField
            End Get
            Set
                Me.oP_ModeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Loca() As String
            Get
                Return Me.locaField
            End Get
            Set
                Me.locaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Combine() As Integer
            Get
                Return Me.combineField
            End Get
            Set
                Me.combineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SPN() As String
            Get
                Return Me.sPNField
            End Get
            Set
                Me.sPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mcno() As Integer
            Get
                Return Me.mcnoField
            End Get
            Set
                Me.mcnoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Face() As Integer
            Get
                Return Me.faceField
            End Get
            Set
                Me.faceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Stat() As Integer
            Get
                Return Me.statField
            End Get
            Set
                Me.statField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StepSN() As Integer
            Get
                Return Me.stepSNField
            End Get
            Set
                Me.stepSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zones() As Integer
            Get
                Return Me.zonesField
            End Get
            Set
                Me.zonesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsPKMC
        
        Private lineField As String
        
        Private mcnoField As Integer
        
        Private sideField As Integer
        
        Private cTRL_PortField As Integer
        
        Private cTRL_CodeField As Integer
        
        Private sheetNoField As String
        
        Private readyField As Integer
        
        Private verifyField As Integer
        
        Private activeField As Integer
        
        Private lastPOSField As Integer
        
        Private wOPKIDField As String
        
        Private pickSNField As Integer
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mcno() As Integer
            Get
                Return Me.mcnoField
            End Get
            Set
                Me.mcnoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Side() As Integer
            Get
                Return Me.sideField
            End Get
            Set
                Me.sideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CTRL_Port() As Integer
            Get
                Return Me.cTRL_PortField
            End Get
            Set
                Me.cTRL_PortField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CTRL_Code() As Integer
            Get
                Return Me.cTRL_CodeField
            End Get
            Set
                Me.cTRL_CodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SheetNo() As String
            Get
                Return Me.sheetNoField
            End Get
            Set
                Me.sheetNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Ready() As Integer
            Get
                Return Me.readyField
            End Get
            Set
                Me.readyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Verify() As Integer
            Get
                Return Me.verifyField
            End Get
            Set
                Me.verifyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Active() As Integer
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastPOS() As Integer
            Get
                Return Me.lastPOSField
            End Get
            Set
                Me.lastPOSField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WOPKID() As String
            Get
                Return Me.wOPKIDField
            End Get
            Set
                Me.wOPKIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PickSN() As Integer
            Get
                Return Me.pickSNField
            End Get
            Set
                Me.pickSNField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsMC
        
        Private lineField As String
        
        Private mcnoField As Integer
        
        Private typeField As Integer
        
        Private mCTypeField As Integer
        
        Private descriptionField As String
        
        Private zone_OFSField As Integer
        
        Private sheetNoField As String
        
        Private sideField As Integer
        
        Private oP_ModeField As Integer
        
        Private activeField As Integer
        
        Private wOPKIDField As String
        
        Private pickSNField As Integer
        
        '''<remarks/>
        Public Property Line() As String
            Get
                Return Me.lineField
            End Get
            Set
                Me.lineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mcno() As Integer
            Get
                Return Me.mcnoField
            End Get
            Set
                Me.mcnoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As Integer
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MCType() As Integer
            Get
                Return Me.mCTypeField
            End Get
            Set
                Me.mCTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zone_OFS() As Integer
            Get
                Return Me.zone_OFSField
            End Get
            Set
                Me.zone_OFSField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SheetNo() As String
            Get
                Return Me.sheetNoField
            End Get
            Set
                Me.sheetNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Side() As Integer
            Get
                Return Me.sideField
            End Get
            Set
                Me.sideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OP_Mode() As Integer
            Get
                Return Me.oP_ModeField
            End Get
            Set
                Me.oP_ModeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Active() As Integer
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WOPKID() As String
            Get
                Return Me.wOPKIDField
            End Get
            Set
                Me.wOPKIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PickSN() As Integer
            Get
                Return Me.pickSNField
            End Get
            Set
                Me.pickSNField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class clsPL
        
        Private mcField As clsMC
        
        Private pKMCsField() As clsPKMC
        
        Private sheetField As clsSheet
        
        Private pKListsField() As clsPKList
        
        Private reelField As clsReel
        
        Private pickingStepField As clsStep
        
        Private logField As clsLog
        
        Private sideField As Integer
        
        Private oP_ModeField As Integer
        
        Private funcField As Integer
        
        Private zoneField As String
        
        Private newStepField As Boolean
        
        Private logSNField As Integer
        
        Private oKBarcodeField As String
        
        Private inputBarcodeField As String
        
        Private pLEventField As String
        
        '''<remarks/>
        Public Property MC() As clsMC
            Get
                Return Me.mcField
            End Get
            Set
                Me.mcField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PKMCs() As clsPKMC()
            Get
                Return Me.pKMCsField
            End Get
            Set
                Me.pKMCsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Sheet() As clsSheet
            Get
                Return Me.sheetField
            End Get
            Set
                Me.sheetField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PKLists() As clsPKList()
            Get
                Return Me.pKListsField
            End Get
            Set
                Me.pKListsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Reel() As clsReel
            Get
                Return Me.reelField
            End Get
            Set
                Me.reelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PickingStep() As clsStep
            Get
                Return Me.pickingStepField
            End Get
            Set
                Me.pickingStepField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Log() As clsLog
            Get
                Return Me.logField
            End Get
            Set
                Me.logField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Side() As Integer
            Get
                Return Me.sideField
            End Get
            Set
                Me.sideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OP_Mode() As Integer
            Get
                Return Me.oP_ModeField
            End Get
            Set
                Me.oP_ModeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Func() As Integer
            Get
                Return Me.funcField
            End Get
            Set
                Me.funcField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zone() As String
            Get
                Return Me.zoneField
            End Get
            Set
                Me.zoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NewStep() As Boolean
            Get
                Return Me.newStepField
            End Get
            Set
                Me.newStepField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LogSN() As Integer
            Get
                Return Me.logSNField
            End Get
            Set
                Me.logSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OKBarcode() As String
            Get
                Return Me.oKBarcodeField
            End Get
            Set
                Me.oKBarcodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InputBarcode() As String
            Get
                Return Me.inputBarcodeField
            End Get
            Set
                Me.inputBarcodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PLEvent() As String
            Get
                Return Me.pLEventField
            End Get
            Set
                Me.pLEventField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsMOAndBoardInfo
        
        Private clsPLField As clsPL
        
        Private moField As String
        
        Private sPNField As String
        
        Private uPNField As String
        
        Private unitPerPCBField As String
        
        Private sheetNoField As String
        
        Private inputQtyField As Integer
        
        Private mOLotField As Integer
        
        '''<remarks/>
        Public Property clsPL() As clsPL
            Get
                Return Me.clsPLField
            End Get
            Set
                Me.clsPLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SPN() As String
            Get
                Return Me.sPNField
            End Get
            Set
                Me.sPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UPN() As String
            Get
                Return Me.uPNField
            End Get
            Set
                Me.uPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitPerPCB() As String
            Get
                Return Me.unitPerPCBField
            End Get
            Set
                Me.unitPerPCBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SheetNo() As String
            Get
                Return Me.sheetNoField
            End Get
            Set
                Me.sheetNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InputQty() As Integer
            Get
                Return Me.inputQtyField
            End Get
            Set
                Me.inputQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MOLot() As Integer
            Get
                Return Me.mOLotField
            End Get
            Set
                Me.mOLotField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsInfoNameValue
        
        Private infoNameField As String
        
        Private infoValueField As String
        
        '''<remarks/>
        Public Property InfoName() As String
            Get
                Return Me.infoNameField
            End Get
            Set
                Me.infoNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InfoValue() As String
            Get
                Return Me.infoValueField
            End Get
            Set
                Me.infoValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsAutoStickLabelPN
        
        Private resultField As String
        
        Private modelFamilyField As String
        
        Private cPNField As String
        
        Private cPNTypeField As String
        
        Private locationField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModelFamily() As String
            Get
                Return Me.modelFamilyField
            End Get
            Set
                Me.modelFamilyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPNType() As String
            Get
                Return Me.cPNTypeField
            End Get
            Set
                Me.cPNTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Location() As String
            Get
                Return Me.locationField
            End Get
            Set
                Me.locationField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsKeyValue
        
        Private resultField As String
        
        Private keyField As String
        
        Private valueField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Key() As String
            Get
                Return Me.keyField
            End Get
            Set
                Me.keyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsTVKeyItem
        
        Private keyTypeField As String
        
        Private keyValueField As String
        
        Private keyValue2Field As String
        
        '''<remarks/>
        Public Property KeyType() As String
            Get
                Return Me.keyTypeField
            End Get
            Set
                Me.keyTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property KeyValue() As String
            Get
                Return Me.keyValueField
            End Get
            Set
                Me.keyValueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property KeyValue2() As String
            Get
                Return Me.keyValue2Field
            End Get
            Set
                Me.keyValue2Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsTVKeyData
        
        Private tVKeyItemsField() As clsTVKeyItem
        
        '''<remarks/>
        Public Property TVKeyItems() As clsTVKeyItem()
            Get
                Return Me.tVKeyItemsField
            End Get
            Set
                Me.tVKeyItemsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsMOItem
        
        Private resultField As String
        
        Private cPNField As String
        
        Private categoryField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Category() As String
            Get
                Return Me.categoryField
            End Get
            Set
                Me.categoryField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsEngravingInfo
        
        Private resultField As String
        
        Private uSNField As String
        
        Private nextStageField As String
        
        Private uPNField As String
        
        Private snField As String
        
        Private moField As String
        
        Private createDateField As String
        
        Private cPNField As String
        
        Private wLANCPNField As String
        
        Private rATINGCPNField As String
        
        Private eNGRAVINGFLAGField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USN() As String
            Get
                Return Me.uSNField
            End Get
            Set
                Me.uSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NextStage() As String
            Get
                Return Me.nextStageField
            End Get
            Set
                Me.nextStageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UPN() As String
            Get
                Return Me.uPNField
            End Get
            Set
                Me.uPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN() As String
            Get
                Return Me.snField
            End Get
            Set
                Me.snField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateDate() As String
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WLANCPN() As String
            Get
                Return Me.wLANCPNField
            End Get
            Set
                Me.wLANCPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RATINGCPN() As String
            Get
                Return Me.rATINGCPNField
            End Get
            Set
                Me.rATINGCPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ENGRAVINGFLAG() As String
            Get
                Return Me.eNGRAVINGFLAGField
            End Get
            Set
                Me.eNGRAVINGFLAGField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsUSNIDValue
        
        Private uSNField As String
        
        Private iDValueField As String
        
        '''<remarks/>
        Public Property USN() As String
            Get
                Return Me.uSNField
            End Get
            Set
                Me.uSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IDValue() As String
            Get
                Return Me.iDValueField
            End Get
            Set
                Me.iDValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsMOIDValue
        
        Private moField As String
        
        Private uSNIDValueField() As clsUSNIDValue
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USNIDValue() As clsUSNIDValue()
            Get
                Return Me.uSNIDValueField
            End Get
            Set
                Me.uSNIDValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsJDMD3FileJobInfo
        
        Private resultField As String
        
        Private requestIDField As String
        
        Private plantField As String
        
        Private requestDateField As String
        
        Private statusField As String
        
        Private requestTypeField As String
        
        Private fileNameField As String
        
        Private localFilePathField As String
        
        Private errorMessageField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RequestID() As String
            Get
                Return Me.requestIDField
            End Get
            Set
                Me.requestIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Plant() As String
            Get
                Return Me.plantField
            End Get
            Set
                Me.plantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RequestDate() As String
            Get
                Return Me.requestDateField
            End Get
            Set
                Me.requestDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RequestType() As String
            Get
                Return Me.requestTypeField
            End Get
            Set
                Me.requestTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FileName() As String
            Get
                Return Me.fileNameField
            End Get
            Set
                Me.fileNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalFilePath() As String
            Get
                Return Me.localFilePathField
            End Get
            Set
                Me.localFilePathField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMessage() As String
            Get
                Return Me.errorMessageField
            End Get
            Set
                Me.errorMessageField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsUnitCfiHwInfo
        
        Private unitSerialNumberField As String
        
        Private soundCardField As String
        
        Private vIDMemoryField As String
        
        Private cDTypeField As String
        
        '''<remarks/>
        Public Property UnitSerialNumber() As String
            Get
                Return Me.unitSerialNumberField
            End Get
            Set
                Me.unitSerialNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SoundCard() As String
            Get
                Return Me.soundCardField
            End Get
            Set
                Me.soundCardField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VIDMemory() As String
            Get
                Return Me.vIDMemoryField
            End Get
            Set
                Me.vIDMemoryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CDType() As String
            Get
                Return Me.cDTypeField
            End Get
            Set
                Me.cDTypeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsUnitCfiData
        
        Private resultField As String
        
        Private unitSerialNumberField As String
        
        Private sINumberField As String
        
        Private isCFIField As String
        
        Private isK661HField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitSerialNumber() As String
            Get
                Return Me.unitSerialNumberField
            End Get
            Set
                Me.unitSerialNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SINumber() As String
            Get
                Return Me.sINumberField
            End Get
            Set
                Me.sINumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsCFI() As String
            Get
                Return Me.isCFIField
            End Get
            Set
                Me.isCFIField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsK661H() As String
            Get
                Return Me.isK661HField
            End Get
            Set
                Me.isK661HField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsSINumberInfo
        
        Private resultField As String
        
        Private sINumberField As String
        
        Private revisionField As String
        
        Private sISyncStatusField As String
        
        Private lastUseTimeField As String
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SINumber() As String
            Get
                Return Me.sINumberField
            End Get
            Set
                Me.sINumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As String
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SISyncStatus() As String
            Get
                Return Me.sISyncStatusField
            End Get
            Set
                Me.sISyncStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastUseTime() As String
            Get
                Return Me.lastUseTimeField
            End Get
            Set
                Me.lastUseTimeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsComponent
        
        Private componentPNField As String
        
        Private componentSNField As String
        
        Private componentCategoryField As String
        
        '''<remarks/>
        Public Property ComponentPN() As String
            Get
                Return Me.componentPNField
            End Get
            Set
                Me.componentPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ComponentSN() As String
            Get
                Return Me.componentSNField
            End Get
            Set
                Me.componentSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ComponentCategory() As String
            Get
                Return Me.componentCategoryField
            End Get
            Set
                Me.componentCategoryField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsNodeData
        
        Private nodeSeqField As Integer
        
        Private nodeSerialNumberField As String
        
        Private nodeServiceTagField As String
        
        Private componentsField() As clsComponent
        
        '''<remarks/>
        Public Property NodeSeq() As Integer
            Get
                Return Me.nodeSeqField
            End Get
            Set
                Me.nodeSeqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NodeSerialNumber() As String
            Get
                Return Me.nodeSerialNumberField
            End Get
            Set
                Me.nodeSerialNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NodeServiceTag() As String
            Get
                Return Me.nodeServiceTagField
            End Get
            Set
                Me.nodeServiceTagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Components() As clsComponent()
            Get
                Return Me.componentsField
            End Get
            Set
                Me.componentsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsDcsChassisInfo
        
        Private cRDNumberField As String
        
        Private nodesField() As clsNodeData
        
        '''<remarks/>
        Public Property CRDNumber() As String
            Get
                Return Me.cRDNumberField
            End Get
            Set
                Me.cRDNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Nodes() As clsNodeData()
            Get
                Return Me.nodesField
            End Get
            Set
                Me.nodesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsSonyIDData
        
        Private iDCodeField As String
        
        Private iDDataField As String
        
        Private iDTagField As String
        
        Private scrapFlagField As Short
        
        '''<remarks/>
        Public Property IDCode() As String
            Get
                Return Me.iDCodeField
            End Get
            Set
                Me.iDCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IDData() As String
            Get
                Return Me.iDDataField
            End Get
            Set
                Me.iDDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IDTag() As String
            Get
                Return Me.iDTagField
            End Get
            Set
                Me.iDTagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ScrapFlag() As Short
            Get
                Return Me.scrapFlagField
            End Get
            Set
                Me.scrapFlagField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/Tester.WebService/WebService")>  _
    Partial Public Class clsWSConfig
        
        Private seqField As Integer
        
        Private keyField As String
        
        Private valueField As String
        
        '''<remarks/>
        Public Property Seq() As Integer
            Get
                Return Me.seqField
            End Get
            Set
                Me.seqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Key() As String
            Get
                Return Me.keyField
            End Get
            Set
                Me.keyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetScrapQualifyCompletedEventHandler(ByVal sender As Object, ByVal e As GetScrapQualifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetScrapQualifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFixtureStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFixtureStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFixtureStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub IACSReturnPrepareMaterialStatusToSFCSCompletedEventHandler(ByVal sender As Object, ByVal e As IACSReturnPrepareMaterialStatusToSFCSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IACSReturnPrepareMaterialStatusToSFCSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTestLogFileInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTestLogFileInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTestLogFileInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWebServiceInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebServiceInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebServiceInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsWSInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsWSInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWebServiceConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebServiceConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebServiceConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsWSConfig()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsWSConfig())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNlistByRangeCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNlistByRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNlistByRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GetResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadRuninRackUnitStateCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRuninRackUnitStateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRuninRackUnitStateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadFixtureUsedTimesCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFixtureUsedTimesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFixtureUsedTimesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckSFCDLSkillCompletedEventHandler(ByVal sender As Object, ByVal e As CheckSFCDLSkillCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckSFCDLSkillCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadSonyIDDataCompletedEventHandler(ByVal sender As Object, ByVal e As UploadSonyIDDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadSonyIDDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadSonyIDDatasCompletedEventHandler(ByVal sender As Object, ByVal e As UploadSonyIDDatasCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadSonyIDDatasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AllocateSonyKeyCompletedEventHandler(ByVal sender As Object, ByVal e As AllocateSonyKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllocateSonyKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IDData() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AllocateSonyKeysCompletedEventHandler(ByVal sender As Object, ByVal e As AllocateSonyKeysCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllocateSonyKeysCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property KeyQuantity() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IDDatas() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub BindingUSNRIPalletIDCompletedEventHandler(ByVal sender As Object, ByVal e As BindingUSNRIPalletIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BindingUSNRIPalletIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RIPalletID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LinkUSNRIPalletIDCompletedEventHandler(ByVal sender As Object, ByVal e As LinkUSNRIPalletIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LinkUSNRIPalletIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDcsChassisInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetDcsChassisInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDcsChassisInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsDcsChassisInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsDcsChassisInfo)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GetResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCfiNewSiListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCfiNewSiListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCfiNewSiListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCfiSiInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCfiSiInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCfiSiInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsSINumberInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsSINumberInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCfiSiStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCfiSiStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCfiSiStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCfiDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetCfiDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCfiDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsUnitCfiData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsUnitCfiData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadCfiHwInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadCfiHwInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadCfiHwInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadBurnInRoomTemperatureCompletedEventHandler(ByVal sender As Object, ByVal e As UploadBurnInRoomTemperatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadBurnInRoomTemperatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub IPCUSNPositionLinkageCompletedEventHandler(ByVal sender As Object, ByVal e As IPCUSNPositionLinkageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IPCUSNPositionLinkageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckInOutIPCBurnInRoomCompletedEventHandler(ByVal sender As Object, ByVal e As CheckInOutIPCBurnInRoomCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckInOutIPCBurnInRoomCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub TransferIPCBurnInLocationCompletedEventHandler(ByVal sender As Object, ByVal e As TransferIPCBurnInLocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransferIPCBurnInLocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LinkMultiBoardUSNCompletedEventHandler(ByVal sender As Object, ByVal e As LinkMultiBoardUSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LinkMultiBoardUSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RequstJDMD3FileJobCompletedEventHandler(ByVal sender As Object, ByVal e As RequstJDMD3FileJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RequstJDMD3FileJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetJDMD3FileJobInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetJDMD3FileJobInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJDMD3FileJobInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsJDMD3FileJobInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsJDMD3FileJobInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateJDMD3FileJobStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJDMD3FileJobStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJDMD3FileJobStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAISImageFileNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetAISImageFileNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAISImageFileNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAISImageFileNameSplitCompletedEventHandler(ByVal sender As Object, ByVal e As GetAISImageFileNameSplitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAISImageFileNameSplitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetIDValueByMOCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDValueByMOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIDValueByMOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsMOIDValue
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsMOIDValue)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetICPNCompletedEventHandler(ByVal sender As Object, ByVal e As GetICPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetICPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEngravingInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetEngravingInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEngravingInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsEngravingInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsEngravingInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMacSecurityKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetMacSecurityKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMacSecurityKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadRendyResultCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRendyResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRendyResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadRendyAntiTheftCCIDCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRendyAntiTheftCCIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRendyAntiTheftCCIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTpsUpnInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTpsUpnInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTpsUpnInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTeNotReadyMoListCompletedEventHandler(ByVal sender As Object, ByVal e As GetTeNotReadyMoListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTeNotReadyMoListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MOs() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateTeReadyFlagByMoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTeReadyFlagByMoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTeReadyFlagByMoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMoInfoByMoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMoInfoByMoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMoInfoByMoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMOItemByMoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMOItemByMoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMOItemByMoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MOItems() As clsMOItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsMOItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTVKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetTVKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTVKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property clsTVKeyData() As clsTVKeyData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsTVKeyData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVKeyCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDefectUsnListCompletedEventHandler(ByVal sender As Object, ByVal e As GetDefectUsnListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDefectUsnListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumbers() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnDefectCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnDefectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnDefectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DataTable() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RosaHddMoLinkCRUDCompletedEventHandler(ByVal sender As Object, ByVal e As RosaHddMoLinkCRUDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RosaHddMoLinkCRUDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLastTransactionDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetLastTransactionDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLastTransactionDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Workstation() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransactionDate() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLastFixtureIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetLastFixtureIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLastFixtureIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FixtureId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnRepairCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnRepairCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnRepairCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DataTable() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnInfoAtStageCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnInfoAtStageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnInfoAtStageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property KeyValues() As clsKeyValue()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsKeyValue())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadRfEquTestTimeCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRfEquTestTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRfEquTestTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAutoStickLabelPNCompletedEventHandler(ByVal sender As Object, ByVal e As GetAutoStickLabelPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAutoStickLabelPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AutoStickLabelPNs() As clsAutoStickLabelPN()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsAutoStickLabelPN())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RosaSwPoNackRuleCheckCompletedEventHandler(ByVal sender As Object, ByVal e As RosaSwPoNackRuleCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RosaSwPoNackRuleCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEDI860SignalCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEDI860SignalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEDI860SignalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MESSAGE() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadPcbLotCompletedEventHandler(ByVal sender As Object, ByVal e As UploadPcbLotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadPcbLotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadEngravingResultCompletedEventHandler(ByVal sender As Object, ByVal e As UploadEngravingResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadEngravingResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadAstroMoInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadAstroMoInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadAstroMoInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUpnInfoFromViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetUpnInfoFromViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUpnInfoFromViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InfoNameValues() As clsInfoNameValue()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsInfoNameValue())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetKeyInfoFromViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetKeyInfoFromViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetKeyInfoFromViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InfoNameValues() As clsInfoNameValue()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsInfoNameValue())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadRuninRackStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRuninRackStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRuninRackStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AllocateAndroidKeyCompletedEventHandler(ByVal sender As Object, ByVal e As AllocateAndroidKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllocateAndroidKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ResultValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckEngravingBoradBarcLotNoCompletedEventHandler(ByVal sender As Object, ByVal e As CheckEngravingBoradBarcLotNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckEngravingBoradBarcLotNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AllocateAwaitingUnitSnListCompletedEventHandler(ByVal sender As Object, ByVal e As AllocateAwaitingUnitSnListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllocateAwaitingUnitSnListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumberList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadCompleteEngravingUnitSnCompletedEventHandler(ByVal sender As Object, ByVal e As UploadCompleteEngravingUnitSnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadCompleteEngravingUnitSnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMoAndBoardInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMoAndBoardInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMoAndBoardInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ClassMOAndBoardInfo() As clsMOAndBoardInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsMOAndBoardInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub Get2SLabelInfoCompletedEventHandler(ByVal sender As Object, ByVal e As Get2SLabelInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get2SLabelInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Class2SLabelInfo() As cls2SLabelInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),cls2SLabelInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub Upload2SLabelInfoCompletedEventHandler(ByVal sender As Object, ByVal e As Upload2SLabelInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Upload2SLabelInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnInformationListCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnInformationListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnInformationListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InfoNameValues() As clsInfoNameValue()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsInfoNameValue())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTvDacDataListCompletedEventHandler(ByVal sender As Object, ByVal e As GetTvDacDataListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTvDacDataListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TvDacDataArray() As clsTvDacData()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsTvDacData())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SwapUSNCompletedEventHandler(ByVal sender As Object, ByVal e As SwapUSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SwapUSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEllaRackLoctionCompletedEventHandler(ByVal sender As Object, ByVal e As GetEllaRackLoctionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEllaRackLoctionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InfoNameValues() As clsInfoNameValue()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsInfoNameValue())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadOCRInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadOCRInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadOCRInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBomPnDescriptionCompletedEventHandler(ByVal sender As Object, ByVal e As GetBomPnDescriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBomPnDescriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsBomPnDescription()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsBomPnDescription())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadBomTransferUPNCompletedEventHandler(ByVal sender As Object, ByVal e As UploadBomTransferUPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadBomTransferUPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RecordLogMessageCompletedEventHandler(ByVal sender As Object, ByVal e As RecordLogMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecordLogMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RecordESOPInfoCompletedEventHandler(ByVal sender As Object, ByVal e As RecordESOPInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecordESOPInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LinkUsnWorkingPalletIdCompletedEventHandler(ByVal sender As Object, ByVal e As LinkUsnWorkingPalletIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LinkUsnWorkingPalletIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLinkUSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetLinkUSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLinkUSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ResultMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub BarcodeValidationWithGivenCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As BarcodeValidationWithGivenCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BarcodeValidationWithGivenCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SetMoOnLineCompletedEventHandler(ByVal sender As Object, ByVal e As SetMoOnLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetMoOnLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LinkWorkingPalletCSNCompletedEventHandler(ByVal sender As Object, ByVal e As LinkWorkingPalletCSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LinkWorkingPalletCSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SwapPalletIDUSNCompletedEventHandler(ByVal sender As Object, ByVal e As SwapPalletIDUSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SwapPalletIDUSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SwapWorkingPalletCompletedEventHandler(ByVal sender As Object, ByVal e As SwapWorkingPalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SwapWorkingPalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UnlinkWorkingPalletCompletedEventHandler(ByVal sender As Object, ByVal e As UnlinkWorkingPalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnlinkWorkingPalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RequestLabelPrintCompletedEventHandler(ByVal sender As Object, ByVal e As RequestLabelPrintCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RequestLabelPrintCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub IsCPNCompleteCompletedEventHandler(ByVal sender As Object, ByVal e As IsCPNCompleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsCPNCompleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AssignUserGroupCodeCompletedEventHandler(ByVal sender As Object, ByVal e As AssignUserGroupCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignUserGroupCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAndProcessKtlOutEventCompletedEventHandler(ByVal sender As Object, ByVal e As GetAndProcessKtlOutEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAndProcessKtlOutEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReturnKtlOutEvent() As clsKtlOutEvent()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsKtlOutEvent())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDynamicDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetDynamicDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDynamicDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckRouteCompletedEventHandler(ByVal sender As Object, ByVal e As CheckRouteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckRouteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CompleteCompletedEventHandler(ByVal sender As Object, ByVal e As CompleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CompleteWithSingleTrnDataCompletedEventHandler(ByVal sender As Object, ByVal e As CompleteWithSingleTrnDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompleteWithSingleTrnDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CompleteWithDefectRemarkCompletedEventHandler(ByVal sender As Object, ByVal e As CompleteWithDefectRemarkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompleteWithDefectRemarkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CompleteWithErrorDescriptionCompletedEventHandler(ByVal sender As Object, ByVal e As CompleteWithErrorDescriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompleteWithErrorDescriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVADCCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVADCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVADCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVDACCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVDACCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVDACCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVQCCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVQCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVQCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVQCwithWhiteBalanceFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVQCwithWhiteBalanceFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVQCwithWhiteBalanceFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadMonitorWhiteBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As UploadMonitorWhiteBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadMonitorWhiteBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVPowerRangeCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVPowerRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVPowerRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVHDCPKeyCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVHDCPKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVHDCPKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetHDCPKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetHDCPKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHDCPKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property HDCPKey() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTVCIPlusKeyCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTVCIPlusKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTVCIPlusKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCIPlusKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetCIPlusKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCIPlusKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CIPlusKey() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadUSNItemCompletedEventHandler(ByVal sender As Object, ByVal e As UploadUSNItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadUSNItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadUSNItemWithBarcodeValidationCompletedEventHandler(ByVal sender As Object, ByVal e As UploadUSNItemWithBarcodeValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadUSNItemWithBarcodeValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnIdWithoutCombineCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnIdWithoutCombineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnIdWithoutCombineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetHDCPFileNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetHDCPFileNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHDCPFileNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadFixtureIDCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFixtureIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFixtureIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadVolTageCompletedEventHandler(ByVal sender As Object, ByVal e As UploadVolTageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadVolTageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTPSKeyValueCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTPSKeyValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTPSKeyValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTPSLogCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTPSLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTPSLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTPSRetestCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTPSRetestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTPSRetestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckOPIDCompletedEventHandler(ByVal sender As Object, ByVal e As CheckOPIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckOPIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsnGenealogyCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsnGenealogyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsnGenealogyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsMO
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsMO)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEDIDFilenameCompletedEventHandler(ByVal sender As Object, ByVal e As GetEDIDFilenameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEDIDFilenameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadEDIDResultCompletedEventHandler(ByVal sender As Object, ByVal e As UploadEDIDResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadEDIDResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadMonitorEDIDCompletedEventHandler(ByVal sender As Object, ByVal e As UploadMonitorEDIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadMonitorEDIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTestLogCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTestLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTestLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadRuninRackUnitStartDateCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRuninRackUnitStartDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRuninRackUnitStartDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckTestFixtureCompletedEventHandler(ByVal sender As Object, ByVal e As CheckTestFixtureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckTestFixtureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadUSNInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadUSNInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadUSNInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadUSNInfoWithUniqueCheckFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UploadUSNInfoWithUniqueCheckFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadUSNInfoWithUniqueCheckFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMOInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMOInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMOInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTransactionTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransactionTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransactionTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SetReflowStageCompletedEventHandler(ByVal sender As Object, ByVal e As SetReflowStageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetReflowStageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSetCA210OffsetTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetSetCA210OffsetTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSetCA210OffsetTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsCA210OffsetResult()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsCA210OffsetResult())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTestSuiteInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTestSuiteInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTestSuiteInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsGetTestSuiteInfoResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsGetTestSuiteInfoResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTestSuiteInfoWithDataSearchTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTestSuiteInfoWithDataSearchTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTestSuiteInfoWithDataSearchTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsGetTestSuiteInfoResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsGetTestSuiteInfoResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsGetUSNInfoResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsGetUSNInfoResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMOItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetMOItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMOItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsMOItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsMOItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadMonitorLpByUsnCompletedEventHandler(ByVal sender As Object, ByVal e As UploadMonitorLpByUsnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadMonitorLpByUsnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadMonitorLPCompletedEventHandler(ByVal sender As Object, ByVal e As UploadMonitorLPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadMonitorLPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckErrorCodeCompletedEventHandler(ByVal sender As Object, ByVal e As CheckErrorCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckErrorCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetRIRackPositionByUSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetRIRackPositionByUSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRIRackPositionByUSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RIRackPosition() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNByRIRackPositionCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNByRIRackPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNByRIRackPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadDownTimeCompletedEventHandler(ByVal sender As Object, ByVal e As UploadDownTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDownTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InfoValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNByUSNInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNByUSNInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNByUSNInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMessageCompletedEventHandler(ByVal sender As Object, ByVal e As GetMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsMessage
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsMessage)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSPCConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetSPCConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSPCConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsSPCConfig
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsSPCConfig)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUPNInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetUPNInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUPNInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InfoValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPanelParameterCompletedEventHandler(ByVal sender As Object, ByVal e As GetPanelParameterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPanelParameterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PanelParameter() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPanelParameterWithDataSearchTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPanelParameterWithDataSearchTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPanelParameterWithDataSearchTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PanelParameter() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUUTDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetUUTDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUUTDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsRequestData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsRequestData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNByCSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNByCSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNByCSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadCertifyPOCompletedEventHandler(ByVal sender As Object, ByVal e As UploadCertifyPOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadCertifyPOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSWCPNForUPNCompletedEventHandler(ByVal sender As Object, ByVal e As GetSWCPNForUPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSWCPNForUPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SWCPNs() As clsSWCPN()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsSWCPN())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNInfoByMACCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNInfoByMACCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNInfoByMACCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ModelFamily() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Model() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitPartNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MO() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AllMAC() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ImagePartNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CheckRouteResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateSyncStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSyncStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSyncStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEarliestSIListCompletedEventHandler(ByVal sender As Object, ByVal e As GetEarliestSIListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEarliestSIListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDeleteSIInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDeleteSIInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDeleteSIInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAvailableGradeListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAvailableGradeListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAvailableGradeListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLastGradeCompletedEventHandler(ByVal sender As Object, ByVal e As GetLastGradeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLastGradeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckSamplingCompletedEventHandler(ByVal sender As Object, ByVal e As CheckSamplingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckSamplingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSkuBomDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetSkuBomDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSkuBomDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SkuBomData() As clsSkuBomData()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsSkuBomData())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCurrentDBSysdateCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentDBSysdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentDBSysdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUSNByRIPalletIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSNByRIPalletIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSNByRIPalletIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UnitSerialNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub BreakUpUSNRIPalletByUSNCompletedEventHandler(ByVal sender As Object, ByVal e As BreakUpUSNRIPalletByUSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BreakUpUSNRIPalletByUSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMO53PNItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetMO53PNItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMO53PNItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Item53PNDesc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTEModelNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetTEModelNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTEModelNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TEModelName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMFGTypeByStageCompletedEventHandler(ByVal sender As Object, ByVal e As GetMFGTypeByStageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMFGTypeByStageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTestEquipmentsCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTestEquipmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTestEquipmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTestEquipmentsWithStringCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTestEquipmentsWithStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTestEquipmentsWithStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadTestDataWithStringCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTestDataWithStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTestDataWithStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UploadFGCodeCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFGCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFGCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPreparedMOListCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreparedMOListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreparedMOListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsPreparedMO()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsPreparedMO())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GetResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
